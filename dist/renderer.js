var __webpack_modules__={5:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Q": () => (/* binding */ Core)\n});\n\n;// CONCATENATED MODULE: ./src/renderer/modules/events.ts\nconst Events=new EventTarget;/* harmony default export */ const events = (Events);\n;// CONCATENATED MODULE: ./src/renderer/modules/logger.ts\nvar Logger;(function(Logger){function parseType(type){switch(type){case"error":case"info":case"error":return type;default:return"log"}}function logMessage(type,module,...message){console[parseType(type)](`%c[KernelSettings]%c %c[${module}]%c`,"color: #A8D46B; font-weight: 700;","","color: #A8D46B","",...message)}function log(module,...message){logMessage("log",module,...message)}Logger.log=log;function info(module,...message){logMessage("info",module,...message)}Logger.info=info;function warn(module,...message){logMessage("warn",module,...message)}Logger.warn=warn;function error(module,...message){logMessage("error",module,...message)}Logger.error=error})(Logger||(Logger={}));\n;// CONCATENATED MODULE: ./src/renderer/modules/devserver.ts\nconst fs=SettingsNative.requireModule("fs");const path=SettingsNative.requireModule("path");var DevServer;(function(DevServer1){var ws=DevServer1.ws=null;var expectedClose=DevServer1.expectedClose=false;const tryJSON=function(json){try{return JSON.parse(json)}catch(error){return false}};function close(){if(!ws)return;Logger.log("DevServer","Closing WebSocket");DevServer.ws=ws=null}DevServer1.close=close;function initialize(){const win=window;if(win.KernelDevServer&&win.KernelDevServer.ws!=null){Logger.log("DevServer","Taking over socket");ws=DevServer.ws=win.KernelDevServer.ws}else{Logger.log("DevServer","Loading development server...");ws=DevServer.ws=new WebSocket("ws://localhost:5656")}win.KernelDevServer=DevServer;ws.onmessage=handleMessage;ws.onerror=error=>{Logger.error("DevServer","Fatal error:",error)};ws.onclose=()=>{DevServer.ws=ws=null;if(!expectedClose)Logger.error("DevServer","Connection closed...")}}DevServer1.initialize=initialize;async function reloadCore(){Logger.log("DevServer","Reloading core...");events.dispatchEvent(new Event("reload-core"));const content=fs.readFile(path.resolve(fs.current,"renderer.js"),"utf8");const script=document.head.appendChild(Object.assign(document.createElement("script"),{type:"module",textContent:content+";__webpack_exports__Core.start();",onload:()=>script.remove()}))}DevServer1.reloadCore=reloadCore;function reloadStyles(){events.dispatchEvent(new Event("reload-css"))}DevServer1.reloadStyles=reloadStyles;function reload(type){switch(type){case"core":{reloadCore()}break;case"styles":{reloadStyles()}break}}DevServer1.reload=reload;var handleMessage=DevServer1.handleMessage=({data})=>{const message=tryJSON(data);if(!message)return Logger.error("DevServer","Unable to parse message:",data);switch(message.operation){case"HELLO":{send("HELLO",{client:`Discord->${window.DiscordNative.app.getReleaseChannel()}`});Logger.log("DevServer","WS Connected")}break;case"RELOAD_STYLES":{reloadStyles()}break;case"RELOAD_CORE":{reloadCore()}break;default:{Logger.log("DevServer","Unknown operation:",message.operation)}}};function send(operation,data){if(!ws)throw"Tried sending message without connection established";ws.send(JSON.stringify({operation:operation,data:data}))}DevServer1.send=send})(DevServer||(DevServer={}));\n;// CONCATENATED MODULE: ./src/renderer/modules/storage.ts\nconst storage_fs=SettingsNative.requireModule("fs");const storage_path=SettingsNative.requireModule("path");var Storage;(function(Storage1){var listeners=Storage1.listeners=new Set;var location=Storage1.location="";var groups=Storage1.groups=new Map;function tryJSON(json){try{return JSON.parse(json)}catch(error){return error}}function emit(...args){const callbacks=[...listeners];for(let i=0;i<callbacks.length;i++){try{callbacks[i](...args)}catch(error){console.error(error)}}}Storage1.emit=emit;function on(listener){listeners.add(listener);return off.bind(listener)}Storage1.on=on;function off(listener){return listeners.delete(listener)}Storage1.off=off;function use(factory){const[state,setState]=React.useState(factory());React.useEffect(()=>{const remove=on(()=>{setState(factory())});return()=>void remove()},[]);return state}Storage1.use=use;function initialize(){location=Storage.location=storage_path.resolve(storage_fs.current,"..","..","..","storage","settings");if(!storage_fs.exists(location)){try{storage_fs.createDir(location,{recursive:true})}catch(error){return console.error(error)}}for(let files=storage_fs.readDir(location,"utf8"),i=0;i<files.length;i++){const file=files[i];if(!storage_fs.stats(storage_path.join(location,file)).isFile()||!file.endsWith(".json"))continue;const group=file.slice(0,file.indexOf(".json"));groups.set(group,tryJSON(storage_fs.readFile(storage_path.join(location,file),"utf8")))}}Storage1.initialize=initialize;function get(group,def=null){if(~group.indexOf(".")){const[id,...paths]=group.split(".");return paths.reduce((curr,name)=>curr?.[name],groups.get(id)??def)}return groups.get(group)??def}Storage1.get=get;function set(group,data){if(~group.indexOf(".")){const[id,...paths]=group.split(".");group=id;const prop=paths.pop();const stored=groups.get(id);if(stored!=null){const object=paths.reduce((curr,name)=>curr?.[name],groups.get(id));if(object==null)throw new Error("Group path not found!");object[prop]=data}else{const tree=paths.reduce((curr,name)=>{if(!curr[name])curr[name]={};return curr[name]},{});tree[prop]=data;groups.set(id,tree)}}else{groups.set(group,data)}storage_fs.writeFile(storage_path.join(Storage.location,group+".json"),JSON.stringify(groups.get(group),null,"\t"));emit(group)}Storage1.set=set})(Storage||(Storage={}));\n;// CONCATENATED MODULE: ./src/renderer/modules/memoize.ts\nfunction memoize(object){const keys=Object.keys(object);const clone={};for(let i=0;i<keys.length;i++){const key=keys[i];const descriptor=Object.getOwnPropertyDescriptor(object,key);if(!descriptor||!descriptor.get){clone[key]=object[key];continue}const getter=descriptor.get;let value=undefined;Object.defineProperty(clone,key,{configurable:true,enumerable:true,get(){return value!==undefined?value:value=getter()}})}return clone}\n;// CONCATENATED MODULE: ./src/renderer/modules/webpack.ts\nif(typeof Array.prototype.at!=="function"){Object.defineProperty(Array.prototype,"at",{value:function at(index){return index<0?this[this.length-Math.abs(index)]:this[index]},enumerable:false,configurable:true})}if(typeof setImmediate==="undefined"){window.setImmediate=callback=>setTimeout(callback,0)}class Filters{static byProps(...props){return module=>props.every(prop=>prop in module)}static byDisplayName(name,def=false){return module=>(def?module=module.default:module)&&typeof module==="function"&&module.displayName===name}static byTypeString(...strings){return module=>module.type&&(module=module.type?.toString())&&strings.every(str=>module.indexOf(str)>-1)}static byCode(...strings){return module=>(module=module.toString())&&strings.every(str=>module.indexOf(str)>-1)}static byPrototype(...props){const filter=Filters.byProps(...props);return module=>module.prototype&&filter(module.prototype)}}class WebpackModule{cache=null;#listeners=new Set;get Filters(){return Filters}get chunkName(){return"webpackChunkdiscord_app"}get id(){return Symbol("kernel-settings")}constructor(){this.whenReady=this.waitForGlobal.then(()=>new Promise(async onReady=>{const[Dispatcher,UserStore]=await this.findByProps(["_dispatch","dispatch"],["getCurrentUser","_dispatchToken"],{cache:false,bulk:true,wait:true,forever:true});if(UserStore.getCurrentUser())return onReady();const listener=function(){Dispatcher.unsubscribe("START_SESSION",listener);Dispatcher.unsubscribe("CONNECTION_OPEN",listener);onReady()};Dispatcher.subscribe("START_SESSION",listener);Dispatcher.subscribe("CONNECTION_OPEN",listener)}));this.whenReady.then(()=>{let originalPush=window[this.chunkName].push;const handlePush=chunk=>{const[,modules]=chunk;for(const moduleId in modules){const originalModule=modules[moduleId];modules[moduleId]=(...args)=>{const[,exports]=args;originalModule.apply(originalModule,args);const listeners=[...this.#listeners];for(let i=0;i<listeners.length;i++){try{listeners[i](exports)}catch(error){console.error("[Webpack]","Could not fire callback listener:",error)}}};Object.assign(modules[moduleId],originalModule,{toString:originalModule.toString.bind(originalModule),__original:originalModule})}return originalPush.apply(window[this.chunkName],[chunk])};Object.defineProperty(window[this.chunkName],"push",{configurable:true,get:()=>handlePush,set:newPush=>{originalPush=newPush;Object.defineProperty(window[this.chunkName],"push",{value:handlePush,configurable:true,writable:true})}})})}addListener(listener){this.#listeners.add(listener);return()=>{this.#listeners.delete(listener)}}removeListener(listener){return this.#listeners.delete(listener)}findLazy(filter){const fromCache=this.findModule(filter);if(fromCache)return Promise.resolve(fromCache);return new Promise(resolve=>{const listener=m=>{const directMatch=filter(m);if(directMatch){resolve(m);return void remove()}if(!m.default)return;const defaultMatch=filter(m.default);if(!defaultMatch)return;resolve(m.default);remove()};const remove=this.addListener(listener)})}async waitFor(filter,{retries=100,all=false,forever=false,delay=50}={}){for(let i=0;i<retries||forever;i++){const module=this.findModule(filter,{all,cache:false});if(module)return module;await new Promise(res=>setTimeout(res,delay))}}parseOptions(args,filter=thing=>typeof thing==="object"&&thing!=null&&!Array.isArray(thing)){return[args,filter(args.at(-1))?args.pop():{}]}request(cache1=true){if(cache1&&this.cache)return this.cache;let req=undefined;if(Array.isArray(window[this.chunkName])){const chunk=[[this.id],{},__nested_webpack_require_3563__=>req=__nested_webpack_require_3563__];webpackChunkdiscord_app.push(chunk);webpackChunkdiscord_app.splice(webpackChunkdiscord_app.indexOf(chunk),1)}if(cache1)this.cache=req;return req}findModule(filter,{all=false,cache:cache1=true,force=true,default:defaultExports=false}={}){if(typeof filter!=="function")return void 0;const __nested_webpack_require_3896__=this.request(cache1);const found=[];let hasError=null;if(!__nested_webpack_require_3896__)return;const wrapFilter=function(module,index){try{return filter(module,index)}catch(error){hasError??=error;return false}};for(const id in __nested_webpack_require_3896__.c){const module=__nested_webpack_require_3896__.c[id].exports;if(!module||module===window)continue;switch(typeof module){case"object":{if(wrapFilter(module,id)){if(!all)return module;found.push(module)}if(module.default!=null&&typeof module.default!=="number"&&wrapFilter(module.default,id)){const exports=defaultExports?module:module.default;if(!all)return exports;found.push(exports)}if(force)for(const key in module){if(!module[key])continue;if(wrapFilter(module[key],id)){if(!all)return module[key];found.push(module[key])}}break}case"function":{if(wrapFilter(module,id)){if(!all)return module;found.push(module)}break}}}if(hasError){setImmediate(()=>{console.warn("[Webpack] filter threw an error. This can cause lag spikes at the user\'s end. Please fix asap.\\n\\n",hasError)})}return all?found:found[0]}findModules(filter){return this.findModule(filter,{all:true})}bulk(...options){const[filters,{wait=false,...rest}]=this.parseOptions(options);const found=new Array(filters.length);const searchFunction=wait?this.waitFor:this.findModule;const wrappedFilters=filters.map(filter=>{if(Array.isArray(filter))filter=Filters.byProps(...filter);if(typeof filter==="string")filter=Filters.byDisplayName(filter);return m=>{try{return filter(m)}catch(error){return false}}});const returnValue=searchFunction.call(this,module=>{for(let i=0;i<wrappedFilters.length;i++){const filter=wrappedFilters[i];if(typeof filter!=="function"||!filter(module)||found[i]!=null)continue;found[i]=module}return found.filter(String).length===filters.length},rest);if(wait)return returnValue.then(()=>found);return found}findByProps(...options){const[props,{bulk=false,wait=false,...rest}]=this.parseOptions(options);if(!bulk&&!wait){return this.findModule(Filters.byProps(...props),rest)}if(wait&&!bulk){return this.waitFor(Filters.byProps(...props),rest)}if(bulk){const filters=props.map(propsArray=>Filters.byProps(...propsArray)).concat({wait,...rest});return this.bulk(...filters)}return null}findByDisplayName(...options){const[displayNames,{bulk=false,wait=false,...rest}]=this.parseOptions(options);if(!bulk&&!wait){return this.findModule(Filters.byDisplayName(displayNames[0]),rest)}if(wait&&!bulk){return this.waitFor(Filters.byDisplayName(displayNames[0]),rest)}if(bulk){const filters=displayNames.map(filters.map(Filters.byDisplayName)).concat({wait,cache});return this.bulk(...filters)}return null}findIndex(filter){let foundIndex=-1;this.findModule((module,index)=>{if(filter(module))foundIndex=index});return foundIndex}atIndex(index){return this.request(true)?.c[index]}get waitForGlobal(){return new Promise(async onExists=>{while(!Array.isArray(window[this.chunkName])){await new Promise(setImmediate)}onExists()})}async wait(callback=null){return this.whenReady.then(()=>{typeof callback==="function"&&callback()})}get whenExists(){return this.waitForGlobal}on(event,listener){switch(event){case"LOADED":return this.whenReady.then(listener)}}get once(){return this.on}}const Webpack=new WebpackModule;/* harmony default export */ const webpack = (Webpack);\n;// CONCATENATED MODULE: ./src/renderer/components/discord.ts\nconst DiscordComponents=memoize({get Button(){return webpack.findByProps("BorderColors")},get Switch(){return webpack.findModule(m=>typeof m==="function"&&Filters.byCode("helpdeskArticleId")(m))},get Markdown(){return webpack.findModule(m=>m?.prototype?.render&&m.rules)},get Text(){return webpack.findModule(m=>m.Sizes?.SIZE_24&&m.Colors?.LINK)},get Spinner(){return webpack.findModule(m=>m.Type?.SPINNING_CIRCLE)},get Flex(){return webpack.findByProps("Child","Align")},get Link(){return webpack.findModule(m=>typeof m==="function"&&Filters.byCode("href","anchor")(m))},get FormTitle(){return webpack.findModule(m=>m.Tags&&Filters.byCode("errorSeparator")(m))},get FormNotice(){return webpack.findModule(m=>m.Types&&Filters.byCode("formNoticeTitle","formNoticeBody")(m))},get FormDivider(){return webpack.findModule(m=>typeof m==="function"&&(m=m.toString())&&m.length<200&&m.includes("divider"))},get FormItem(){return webpack.findModule(m=>m.Tags&&Filters.byCode("children","createElement","disabled","tag","title")(m))},get Tooltips(){return webpack.findByProps("Positions","Colors")}});/* harmony default export */ const discord = (DiscordComponents);\n;// CONCATENATED MODULE: ./src/renderer/components/icons/trash.tsx\nfunction _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function Trash(props){return React.createElement("svg",_extends({width:"24",height:"24",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},props),React.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),React.createElement("path",{d:"M15 3.999V2H9V3.999H3V5.999H21V3.999H15Z",fill:"currentColor"}),React.createElement("path",{d:"M5 6.99902V18.999C5 20.101 5.897 20.999 7 20.999H17C18.103 20.999 19 20.101 19 18.999V6.99902H5ZM11 17H9V11H11V17ZM15 17H13V11H15V17Z",fill:"currentColor"}))}\n;// CONCATENATED MODULE: ./src/renderer/components/icons/folder.tsx\nfunction folder_extends(){folder_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return folder_extends.apply(this,arguments)}function Folder(props){return React.createElement("svg",folder_extends({width:"24",height:"24",viewBox:"0 0 512 512"},props),React.createElement("path",{fill:"currentColor",d:"M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z"}))}\n;// CONCATENATED MODULE: ./src/renderer/components/icons/shield.tsx\nfunction shield_extends(){shield_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return shield_extends.apply(this,arguments)}const Verified=props=>React.createElement("svg",shield_extends({xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},props),React.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),React.createElement("path",{d:"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z",fill:"currentColor"}));const Warning=props=>React.createElement("svg",shield_extends({xmlns:"http://www.w3.org/2000/svg","enable-background":"new 0 0 24 24",height:"24",viewBox:"0 0 24 24",width:"24"},props),React.createElement("g",null,React.createElement("path",{d:"M0,0h24v24H0V0z",fill:"none"})),React.createElement("g",null,React.createElement("path",{d:"M12,2L4,5v6.09c0,5.05,3.41,9.76,8,10.91c4.59-1.15,8-5.86,8-10.91V5L12,2z M13,16h-2v-2h2V16z M13,12h-2V7h2V12z",fill:"currentColor"})));var Types;(function(Types){Types["VERIFIED"]="VERIFIED";Types["WARNING"]="WARNING"})(Types||(Types={}));const Shield=({type,...props})=>{switch(type){case Types.VERIFIED:return React.createElement(Verified,shield_extends({},props));case Types.WARNING:return React.createElement(Warning,shield_extends({},props));default:return null}};Shield.Types=Types;/* harmony default export */ const shield = (Shield);\n;// CONCATENATED MODULE: ./src/renderer/components/icons/update_available.tsx\nfunction update_available_extends(){update_available_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return update_available_extends.apply(this,arguments)}function UpdateAvailable(props){return React.createElement("svg",update_available_extends({className:"ks-update-available","aria-hidden":"false",width:"16",height:"16",viewBox:"0 0 24 24"},props),React.createElement("g",{fill:"none","fill-rule":"evenodd"},React.createElement("path",{fill:"currentColor","fill-rule":"nonzero",d:"M5,8 L9,12 L6,12 C6,15.31 8.69,18 12,18 C13.01,18 13.97,17.75 14.8,17.3 L16.26,18.76 C15.03,19.54 13.57,20 12,20 C7.58,20 4,16.42 4,12 L1,12 L5,8 Z M18,12 C18,8.69 15.31,6 12,6 C10.99,6 10.03,6.25 9.2,6.7 L7.74,5.24 C8.97,4.46 10.43,4 12,4 C16.42,4 20,7.58 20,12 L23,12 L19,16 L15,12 L18,12 Z"}),React.createElement("polygon",{points:"24 0 0 0 0 24 24 24"})))}\n;// CONCATENATED MODULE: ./src/renderer/components/icons/index.tsx\nfunction icons_extends(){icons_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return icons_extends.apply(this,arguments)}const Icons={Trash: Trash,Folder: Folder,Shield: shield,UpdateAvailable: UpdateAvailable};function Icon({name,...props}){const IconComponent=Icons[name];const extraProps={};if(!IconComponent){return null}if(props.size){extraProps.width=extraProps.height=props.size}return React.createElement(IconComponent,icons_extends({},props,extraProps))}\n;// CONCATENATED MODULE: ./src/renderer/components/card.tsx\nfunction card_extends(){card_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return card_extends.apply(this,arguments)}const kernel=window.kernel;const Electron=SettingsNative.requireModule("electron");function ToolButton({label,icon,onClick,danger=false}){const{Tooltips,Button}=discord;return React.createElement(Tooltips,{text:label,position:"top"},props=>React.createElement(Button,card_extends({},props,{className:"kernel-toolbutton",look:Button.Looks.BLANK,size:Button.Sizes.NONE,onClick:onClick}),React.createElement(Icon,{size:"20",name:icon,color:danger?"#ed4245":undefined})))}function SwitchWrapper({value,onChange,disabled}){const{Switch}=discord;const[isChecked,setChecked]=React.useState(value);return React.createElement(Switch,{checked:isChecked,disabled:disabled,value:value,onChange:React.useCallback(()=>{if(disabled)return;onChange(!isChecked);setChecked(value=>!value)},[onChange,isChecked])})}function openItem(path){if(path.endsWith(".asar"))return Electron.showItemInFolder(path);Electron.openPath(path)}function KernelCard({pkg}){const{Markdown,Text}=discord;return React.createElement("div",{className:"kernel-card"},React.createElement("div",{className:"kernel-card-tools"},React.createElement(ToolButton,{label:"Open Path",icon:"Folder",onClick:()=>openItem(pkg.path)}),React.createElement(ToolButton,{danger:true,label:"Delete",icon:"Trash",onClick:()=>Electron.trashItem(pkg.path)})),React.createElement("div",{className:"kernel-card-header"},React.createElement(Text,{className:"kernel-card-name"},pkg.name)),pkg.description!=null&&React.createElement(Text,{className:"kernel-card-desc"},React.createElement(Markdown,null,pkg.description)),React.createElement("div",{className:"kernel-footer"},React.createElement(SwitchWrapper,{value:pkg.enabled,enabled:pkg.enabled,disabled:pkg.id==="kernel-settings",onChange:value=>{if(!value)kernel.packages.stopPackage(pkg.id);else kernel.packages.startPackage(pkg.id)}})))}\n;// CONCATENATED MODULE: ./src/renderer/components/panel.tsx\nconst panel_kernel=window.kernel;function KernelPanel(){const{FormTitle}=discord;return React.createElement("div",{className:"kernel-panel"},React.createElement(FormTitle,{tag:FormTitle.Tags.H1},"Packages"),React.createElement("div",{className:"kernel-card-scroller"},Object.values(panel_kernel.packages.getPackages()).map(pkg=>React.createElement(KernelCard,{pkg:pkg,key:pkg.id??pkg.name}))))}\n;// CONCATENATED MODULE: ./src/renderer/modules/discord.ts\nconst DiscordModules=memoize({get Moment(){return webpack.findByProps("momentProperties")}});/* harmony default export */ const modules_discord = (DiscordModules);\n;// CONCATENATED MODULE: ./src/renderer/modules/makelazy.ts\nfunction makeLazy(factory,fallback){return function LazyComponent(props){const[state,setState]=React.useState({resolved:false,value:void 0});React.useEffect(()=>{if(state.resolved)return;factory(props).then(value=>{setState({value,resolved:true})})},[state]);return state.resolved?state.value:React.createElement(fallback,props)}}\n;// CONCATENATED MODULE: ./src/renderer/modules/simplegit.ts\nconst period="@@@===@@@";const commitFields=["hash","hash_short","author","date","message"];const hashFields=["short","full"];const child_process=SettingsNative.requireModule("child_process");class Git{static executeCmd(cmd,cwd){return new Promise((resolve,reject)=>{child_process.exec(cmd,{cwd},(error,stdout)=>{if(error)return reject(error);resolve(stdout)})})}static async isInstalled(){try{await this.executeCmd("git --version");return true}catch{return false}}static async isRepo(cwd){try{const result=await this.executeCmd("git rev-parse --is-inside-work-tree",cwd);return result==="true"}catch{return false}}static async getBranchName(cwd){try{const result=await this.executeCmd("git branch -a",cwd);if(!result)return null;return result.slice(2,result.indexOf("\\n"))}catch(error){console.error(error);return null}}static async getLatestCommit(cwd,target="master"){try{return this.parsePeriods(hashFields,await this.executeCmd(`git log -1 ${target} --pretty=format:"%h${period}%H"`,cwd))}catch(error){console.error(error);return{hasError:true}}}static async getDiff(cwd,target="master"){try{const result=await this.executeCmd(`git log ${target}..origin/${target} --pretty=format:"%H${period}%h${period}%an${period}%ar${period}%s"`,cwd);if(!result)return[];return result.split("\\n").map(p=>this.parsePeriods(commitFields,p))}catch(error){console.error(error);return[]}}static parsePeriods(fields,out){return Object.fromEntries(out.split(period).map((c,i)=>[fields[i],c]))}}\n;// CONCATENATED MODULE: ./src/renderer/components/primitives.tsx\nfunction Show({when,children,fallback=null}){return when?children:fallback}function Switch({children,default:def=null}){return children.find(child=>child?.props?.when)??def}function Match({when,children}){return children}function For({each,children}){const result=[];for(let i=0;i<each.length;i++){result.push(children(each[i],i))}return React.createElement(React.Fragment,null,result)}\n;// CONCATENATED MODULE: ./src/renderer/components/updates.tsx\nconst updates_fs=SettingsNative.requireModule("fs");function useGitCommand(factory,deps){const[state,setState]=React.useState({loaded:false,result:null});const handleFetch=()=>{Promise.resolve(factory()).then(result=>{setState({loaded:typeof result==="boolean"?true:!!result,result:result})}).catch(console.error)};React.useEffect(handleFetch,deps??[]);return{...state,fetch(){setState({loaded:false,result:null});handleFetch()}}}const LoadingSpinner=()=>{const{Spinner}=discord;return React.createElement(Spinner,{type:Spinner.Type.LOW_MOTION,className:"ksu-spinner"})};const CurrentBranch=makeLazy(async({gitLoaded})=>{if(!gitLoaded)return null;const{Link}=discord;const branch=await Git.getBranchName(updates_fs.current);return React.createElement(Link,{href:`https://github.com/strencher-kernel/settings/tree/${branch}`},branch)},LoadingSpinner);const CurrentCommitHash=makeLazy(async({gitLoaded})=>{if(!gitLoaded)return null;const{Text,Link}=discord;const hash=await Git.getLatestCommit(updates_fs.current,await Git.getBranchName(updates_fs.current));if(hash.hasError)return React.createElement(Text,{color:Text.Colors.RED},"error");return React.createElement(Link,{href:`https://github.com/strencher-kernel/settings/tree/${hash.full}`},hash.short)},LoadingSpinner);let needsReload=false;function UpdaterPanel(){const{Moment}=modules_discord;const[errorMessage,setError]=React.useState(null);const{Link,Button,Text,Flex,FormTitle,FormNotice,FormDivider,FormItem,Spinner}=discord;const git=useGitCommand(()=>Git.isInstalled());const updates=useGitCommand(async()=>{if(!git.loaded||!git.result)return[];return Git.getDiff(updates_fs.current)},[git.loaded]);const lastUpdate=Moment(Storage.use(()=>Storage.get("updater.lastFetch",new Date)));return React.createElement("div",{className:"kernel-panel"},React.createElement(FormTitle,{tag:FormTitle.Tags.H1},"Updates"),React.createElement(Show,{when:git.loaded,fallback:React.createElement(Spinner,{type:Spinner.Type.WANDERING_CUBES})},React.createElement(Show,{when:!git.result},React.createElement(FormNotice,{type:FormNotice.Types.DANGER,className:"ks-marginBottom20",title:"Git installation not found!",imageData:{src:"/assets/6e97f6643e7df29b26571d96430e92f4.svg",width:60,height:60},body:React.createElement("span",null,"Currently KernelSettings relies on your local git installation. Please install git to use this updater.")})),React.createElement(Show,{when:errorMessage!=null},React.createElement(FormNotice,{type:FormNotice.Types.DANGER,className:"ks-marginBottom20",title:"Error occurred",imageData:{src:"/assets/6e97f6643e7df29b26571d96430e92f4.svg",width:60,height:60},body:React.createElement("span",null,errorMessage)})),React.createElement(Show,{when:errorMessage==null&&needsReload},React.createElement(FormNotice,{type:FormNotice.Types.WARNING,className:"ks-marginBottom20",title:"Reload required",imageData:{src:"/assets/6e97f6643e7df29b26571d96430e92f4.svg",width:60,height:60},body:React.createElement("span",null,"Client reload is required in order to make changes take affect.")})),React.createElement(Show,{when:git.result},React.createElement(Flex,{className:"ksu-card",direction:Flex.Direction.VERTICAL},React.createElement(Flex,{justify:Flex.Justify.BETWEEN,align:Flex.Align.CENTER},React.createElement(Flex,{className:"ksu-shield-container",direction:Flex.Direction.HORIZONTAL,align:Flex.Align.START,justify:Flex.Justify.CENTER},React.createElement(Show,{when:updates.loaded,fallback:React.createElement(UpdateAvailable,{width:"70",height:"70",className:"ks-update-available ksu-shield"})},React.createElement(shield,{type:updates.result?.length>0?shield.Types.WARNING:shield.Types.VERIFIED,width:"70",height:"70",className:`ksu-shield ${updates.result?.length>0?"ksu-shield-warn":"ksu-shield-ok"}`})),React.createElement(Flex.Child,null,React.createElement(Text,{size:Text.Sizes.SIZE_24,color:Text.Colors.HEADER_PRIMARY},React.createElement(Switch,{default:"Everything is up to date!"},React.createElement(Match,{when:!updates.loaded},"Loading..."),React.createElement(Match,{when:updates.result?.length>0},"Something needs to be updated!"))),React.createElement(Text,{size:Text.Sizes.SIZE_14,color:Text.Colors.HEADER_SECONDARY},"Last Checked: ",lastUpdate.calendar()))),React.createElement("div",{className:"ksu-git-info"},React.createElement(Text,{className:"ksu-git-info-item"},"Branch: ",React.createElement(CurrentBranch,{gitLoaded:!!git.result})),React.createElement(Text,{className:"ksu-git-info-item"},"Commit: ",React.createElement(CurrentCommitHash,{gitLoaded:!!git.result})))),React.createElement(FormDivider,{className:"ksu-divider"}),React.createElement(Flex,{direction:Flex.Direction.HORIZONTAL},React.createElement(Button,{disabled:!updates.loaded,color:Button.Colors.BRAND,size:Button.Sizes.SMALL,className:"ksu-button",onClick:()=>{updates.fetch();Storage.set("updater.lastFetch",new Date)}},"Check for Updates"),React.createElement(Show,{when:updates.result?.length>0},React.createElement(Button,{disabled:!updates.loaded,color:Button.Colors.YELLOW,size:Button.Sizes.SMALL,className:"ksu-button",onClick:()=>{Git.executeCmd("git pull",updates_fs.current).then(()=>{needsReload=true;updates.fetch()}).catch(error=>{Logger.error("Updater","Failed to update!",error);setError("Error occurred while updating kernel settings. Check your console (Ctrl/Cmd + Shift + I) and report any errors.")})}},"Update")),React.createElement(Show,{when:needsReload},React.createElement(Button,{color:Button.Colors.GREEN,size:Button.Sizes.SMALL,className:"ksu-button ksu-reload-button",onClick:()=>{window.location.reload()}},"Reload ",React.createElement(UpdateAvailable,null)))),React.createElement(Show,{when:updates.result?.length>0},React.createElement(FormDivider,{className:"ksu-divider"}),React.createElement(FormItem,{title:"Recent Commits",tag:"h5"},React.createElement(For,{each:updates.result},(commit,index)=>React.createElement("div",{className:"ksu-commit",key:index},React.createElement("span",{className:"ksu-commit-hash"},React.createElement(Link,{href:`https://github.com/strencher-kernel/settings/commit/${commit.hash}`},commit.hash_short)),React.createElement("span",{className:"ksu-commit-name"},commit.message),React.createElement("span",{className:"ksu-commit-author-label"}," by "),React.createElement("span",{className:"ksu-commit-author"},React.createElement("img",{className:"ksu-commit-author-avatar",src:`https://github.com/${commit.author}.png?size=20`}),React.createElement("span",{className:"ksu-commit-author-name"},commit.author))))))))))}\n;// CONCATENATED MODULE: ./src/renderer/modules/patcher.ts\nvar Patcher;(function(Patcher){const patches=new Set;function patch(module,func,callback,before=false){const original=module[func];const unpatch=()=>{module[func]=original};module[func]=function(){if(before){try{Reflect.apply(callback,this,arguments)}catch(error){console.error("[Kernel:patcher] Error during before patch:",error)}}let returnValue=Reflect.apply(original,this,arguments);if(before)return returnValue;try{const tempRet=Reflect.apply(callback,this,[arguments,returnValue]);if(tempRet!=null)returnValue=tempRet}catch(error1){console.error("[Kernel:patcher] Error during patch:",error1)}return returnValue};Object.assign(module[func],original,{toString(){return original.toString()}});patches.add(unpatch);return unpatch}Patcher.patch=patch;function unpatchAll(){for(const unpatch of patches)unpatch()}Patcher.unpatchAll=unpatchAll})(Patcher||(Patcher={}));\n;// CONCATENATED MODULE: ./src/renderer/modules/settings.ts\nconst win=window;var SettingsRenderer;(function(SettingsRenderer1){let initialized=false;var panels=SettingsRenderer1.panels=win["__kernel_settings_cache__"]??[{section:"DIVIDER"},{section:"HEADER",label:"Kernel",id:"kernel-settings"}];function register(name,render){const panel={section:`Kernel-${name}`,label:name,id:`kernel-settings-${name}`,className:`kernel-settings`,element:typeof render==="function"?render:render.render,...typeof render==="object"?render:{}};SettingsRenderer.panels.push(panel);SettingsRenderer.panels.sort((a,b)=>a.order-b.order);return()=>{const index=SettingsRenderer.panels.indexOf(panel);if(index<0)return false;SettingsRenderer.panels.splice(index,1);return true}}SettingsRenderer1.register=register;async function initialize(){if(initialized)return;initialized=true;const SettingsView=await webpack.findLazy(webpack.Filters.byPrototype("getPredicateSections"));if(!win["__kernel_settings_cache__"])Patcher.patch(SettingsView.prototype,"getPredicateSections",function(_,res){if(!Array.isArray(res)||!res.some(e=>e?.section?.toLowerCase()==="changelog")||res.some(s=>s?.id==="kernel-settings"))return;const index=res.findIndex(s=>s?.section?.toLowerCase()==="changelog")-1;if(index<0)return;res.splice(index,0,...SettingsRenderer.panels)});events.addEventListener("reload-core",()=>{win["__kernel_settings_cache__"]=panels})}SettingsRenderer1.initialize=initialize})(SettingsRenderer||(SettingsRenderer={}));\n;// CONCATENATED MODULE: ./src/renderer/index.tsx\nconst renderer_fs=SettingsNative.requireModule("fs");const renderer_path=SettingsNative.requireModule("path");var Core;(function(Core){let styleElement=null;async function start(){await webpack.whenReady;Logger.log("Core","Started.");window.React=webpack.findByProps("createElement","useEffect");if(false){}SettingsRenderer.initialize();registerSettings();Storage.initialize();loadStyles();exposeGlobals()}Core.start=start;function registerSettings(){let flush=[SettingsRenderer.register("Updates",{render:()=>React.createElement(UpdaterPanel,null),order:2}),SettingsRenderer.register("Packages",{render:()=>React.createElement(KernelPanel,null),order:1})];events.addEventListener("reload-core",()=>{for(let i=0;i<flush.length;i++){flush[i]()}})}Core.registerSettings=registerSettings;function exposeGlobals(){const Dispatcher=webpack.findByProps("_dispatch","dispatch");Object.defineProperties(window,{KernelSettings:{value:Object.freeze(SettingsRenderer),configurable:true,writable:true},KernelStorage:{value:Object.freeze(Storage),configurable:true,writable:true}});Dispatcher.wait(()=>Dispatcher.dispatch({type:"KERNEL_SETTINGS_INIT"}))}Core.exposeGlobals=exposeGlobals;function loadStyles(){const location=renderer_path.resolve(renderer_fs.current,"style.css");if(!renderer_fs.isFile(location))return;const load=function(){const styles=renderer_fs.readFile(location,"utf8");styleElement=document.head.appendChild(Object.assign(document.createElement("style"),{id:"kernel-style",textContent:styles}))};load();events.addEventListener("reload-css",()=>{styleElement.remove();load();Logger.log("Styles","Reloaded.")})}Core.loadStyles=loadStyles;function stop(){Patcher.unpatchAll();styleElement?.remove()}Core.stop=stop})(Core||(Core={}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsT0FHRixJQUFJQyxXQUVSLDhDQUFlRCxNQUFPLEU7O0FDTGYsSUFBVUUsTUFxQmhCLG1CQWxCRyxTQUFTQyxVQUFVQyxJQUFXLENBQVUsQ0FDcEMsT0FBUUEsTUFDSixJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssUUFDRCxPQUFPQSxJQUNYLFNBQVMsTUFBTyxLQUNwQixDQUNKLENBRUEsU0FBU0MsV0FBV0QsSUFBVyxDQUFFRSxNQUFjLENBQUUsR0FBR0MsT0FBYyxDQUFRLENBQ3RFQyxPQUFPLENBQUNMLFVBQVVDLE1BQU0sQ0FBQyxDQUFDLHdCQUF3QixFQUFFRSxPQUFPLEdBQUcsQ0FBQyxDQUFFLG9DQUFxQyxHQUFJLGlCQUFrQixNQUFPQyxRQUN2SSxDQUVPLFNBQVNFLElBQUlILE1BQU0sQ0FBRSxHQUFHQyxPQUFPLENBQUUsQ0FBQ0YsV0FBVyxNQUFPQyxVQUFXQyxRQUFTLFFBQS9ERSxJQUFBQSxJQUNULFNBQVNDLEtBQUtKLE1BQU0sQ0FBRSxHQUFHQyxPQUFPLENBQUUsQ0FBQ0YsV0FBVyxPQUFRQyxVQUFXQyxRQUFTLFFBQWpFRyxLQUFBQSxLQUNULFNBQVNDLEtBQUtMLE1BQU0sQ0FBRSxHQUFHQyxPQUFPLENBQUUsQ0FBQ0YsV0FBVyxPQUFRQyxVQUFXQyxRQUFTLFFBQWpFSSxLQUFBQSxLQUNULFNBQVNDLE1BQU1OLE1BQU0sQ0FBRSxHQUFHQyxPQUFPLENBQUUsQ0FBQ0YsV0FBVyxRQUFTQyxVQUFXQyxRQUFTLFFBQW5FSyxNQUFBQSxRQXBCSFYsU0FBQUEsWTs7QUNHakIsTUFBTVcsR0FBS0MsZUFBZUMsYUFBYSxDQUFDLE1BQ3hDLE1BQU1DLEtBQU9GLGVBQWVDLGFBQWEsQ0FBQyxPQUUxQyxDQUFPLElBQVVFLFNBd0doQiwyQkF2R2NDLGNBQUFBLEdBQWdCLElBQUksS0FDcEJDLHlCQUFBQSxjQUFnQixLQUFLLENBRWhDLE1BQU1DLFFBQVUsU0FBVUMsSUFBWSxDQUFFLENBQ3BDLEdBQUksQ0FDQSxPQUFPQyxLQUFLQyxLQUFLLENBQUNGLEtBQ3RCLENBQUUsTUFBT1QsTUFBTyxDQUNaLE9BQU8sS0FBSyxDQUVwQixFQUVPLFNBQVNZLE9BQWMsQ0FDMUIsR0FBSSxDQUFDTixHQUFJLE1BQU8sQ0FFaEJoQixVQUFVLENBQUMsWUFBYSxvQkFDeEJlLENBQUFBLFVBQVVDLEVBQUUsQ0FBR0EsR0FBSyxJQUFJLFlBSlpNLE1BQUFBLE1BT1QsU0FBU0MsWUFBbUIsQ0FDL0IsTUFBTUMsSUFBTUMsT0FFWixHQUFJRCxJQUFJRSxlQUFlLEVBQUlGLElBQUlFLGVBQWUsQ0FBQ1YsRUFBRSxFQUFJLElBQUksQ0FBRSxDQUN2RGhCLFVBQVUsQ0FBQyxZQUFhLHNCQUN4QmdCLEdBQUtELFVBQVVDLEVBQUUsQ0FBR1EsSUFBSUUsZUFBZSxDQUFDVixFQUFFLEtBQ3ZDLENBQ0hoQixVQUFVLENBQUMsWUFBYSxpQ0FDeEJnQixHQUFLRCxVQUFVQyxFQUFFLENBQUcsSUFBSVcsVUFBVSxzQkFDdEMsQ0FBQyxJQUVHRCxlQUFlLENBQUdYLFNBQ3RCQyxDQUFBQSxHQUFHWSxTQUFTLENBQUdDLGFBQ2ZiLENBQUFBLEdBQUdjLE9BQU8sQ0FBRyxPQUFXLENBQ3BCOUIsWUFBWSxDQUFDLFlBQWEsZUFBZ0JVLE1BQzlDLENBQ0FNLENBQUFBLEdBQUdlLE9BQU8sQ0FBRyxJQUFNLENBQ2ZoQixVQUFVQyxFQUFFLENBQUdBLEdBQUssSUFBSSxDQUN4QixHQUFJLENBQUNDLGNBQWVqQixZQUFZLENBQUMsWUFBYSx1QkFBd0IsQ0FFOUUsWUFwQmdCdUIsV0FBQUEsV0FzQlQsZUFBZVMsWUFBNEIsQ0FDOUNoQyxVQUFVLENBQUMsWUFBYSxxQkFFeEJGLG9CQUFvQixDQUFDLElBQUlvQyxNQUFNLGdCQUUvQixNQUFNQyxRQUFVeEIsR0FBR3lCLFFBQVEsQ0FBQ3RCLEtBQUt1QixPQUFPLENBQUMxQixHQUFHMkIsT0FBTyxDQUFFLGVBQWdCLFFBQ3JFLE1BQU1DLE9BQVNDLFNBQVNDLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxPQUFPQyxNQUFNLENBQUNKLFNBQVNLLGFBQWEsQ0FBQyxVQUFXLENBQ3JGM0MsS0FBTSxTQUNONEMsWUFBYVgsUUFBVSxvQ0FDdkJZLE9BQVEsSUFBTVIsT0FBT1MsTUFBTSxFQUMvQixHQUNKLFlBWHNCaEIsV0FBQUEsV0FhZixTQUFTaUIsY0FBcUIsQ0FDakNuRCxvQkFBb0IsQ0FBQyxJQUFJb0MsTUFBTSxjQUNuQyxZQUZnQmUsYUFBQUEsYUFJVCxTQUFTQyxPQUFPaEQsSUFBK0IsQ0FBUSxDQUMxRCxPQUFRQSxNQUNKLElBQUssT0FBUSxDQUNUOEIsWUFDSixDQUFFLEtBQU0sS0FDSCxTQUFVLENBQ1hpQixjQUNKLENBQUUsS0FBTSxDQUVoQixZQVRnQkMsT0FBQUEsV0FXSHJCLHlCQUFBQSxjQUFnQixDQUFDLENBQUNzQixJQUFJLENBQUMsR0FBSyxDQUNyQyxNQUFNOUMsUUFBVWEsUUFBUWlDLE1BQ3hCLEdBQUksQ0FBQzlDLFFBQVMsT0FBT0wsWUFBWSxDQUFDLFlBQWEsMkJBQTRCbUQsS0FBTSxDQUVqRixPQUFROUMsUUFBUStDLFNBQVMsRUFDckIsSUFBSyxRQUFTLENBQ1ZDLEtBQUssUUFBUyxDQUNWQyxPQUFRLENBQUMsU0FBUyxFQUFFLE9BQWdCQyxhQUFhLENBQUNDLEdBQUcsQ0FBQ0MsaUJBQWlCLEdBQUcsQ0FBQyxHQUcvRXpELFVBQVUsQ0FBQyxZQUFhLGVBQzVCLENBQUUsS0FBTSxLQUVILGdCQUFpQixDQUNsQmlELGNBQ0osQ0FBRSxLQUFNLEtBRUgsY0FBZSxDQUNoQmpCLFlBQ0osQ0FBRSxLQUFNLFNBRUMsQ0FDTGhDLFVBQVUsQ0FBQyxZQUFhLHFCQUFzQkssUUFBUStDLFNBQVMsQ0FDbkUsQ0FDSixDQUNKLEVBRU8sU0FBU0MsS0FBS0QsU0FBNEIsQ0FBRUQsSUFBUyxDQUFRLENBQ2hFLEdBQUksQ0FBQ25DLEdBQUksS0FBTSxzREFBdUQsQ0FFdEVBLEdBQUdxQyxJQUFJLENBQUNqQyxLQUFLc0MsU0FBUyxDQUFDLENBQ25CTixVQUFXQSxVQUNYRCxLQUFNQSxJQUNWLEdBQ0osWUFQZ0JFLEtBQUFBLE9BaEdIdEMsWUFBQUEsZTs7QUNKakIsTUFBTUosVUFBRUEsQ0FBR0MsZUFBZUMsYUFBYSxDQUFDLE1BQ3hDLE1BQU1DLFlBQUlBLENBQUdGLGVBQWVDLGFBQWEsQ0FBQyxPQUUxQyxDQUFPLElBQVU4QyxPQXdHaEIseUJBdkdjQyxtQkFBQUEsVUFBMkIsSUFBSUMsUUFDL0JDLGtCQUFBQSxTQUFXLE9BQ1RDLGdCQUFBQSxPQUEyQixJQUFJQyxJQUU1QyxTQUFTOUMsUUFBUUMsSUFBWSxDQUFFLENBQzNCLEdBQUksQ0FDQSxPQUFPQyxLQUFLQyxLQUFLLENBQUNGLEtBQ3RCLENBQUUsTUFBT1QsTUFBTyxDQUNaLE9BQU9BLEtBQ1gsQ0FDSixDQUVPLFNBQVN1RCxLQUFLLEdBQUdDLElBQVcsQ0FBRSxDQUNqQyxNQUFNQyxVQUFZLElBQUlQLFVBQVUsQ0FFaEMsSUFBSyxJQUFJUSxFQUFJLEVBQUdBLEVBQUlELFVBQVVFLE1BQU0sQ0FBRUQsSUFBSyxDQUN2QyxHQUFJLENBQUNELFNBQVMsQ0FBQ0MsRUFBRSxJQUFJRixLQUFNLENBQzNCLE1BQU94RCxNQUFPLENBQUNKLFFBQVFJLEtBQUssQ0FBQ0EsTUFBTyxDQUN4QyxDQUNKLFVBUGdCdUQsS0FBQUEsS0FTVCxTQUFTSyxHQUFHQyxRQUFrQixDQUFpQixDQUNsRFgsVUFBVVksR0FBRyxDQUFDRCxVQUVkLE9BQU9FLElBQUlDLElBQUksQ0FBQ0gsU0FDcEIsVUFKZ0JELEdBQUFBLEdBTVQsU0FBU0csSUFBSUYsUUFBa0IsQ0FBVyxDQUM3QyxPQUFPWCxVQUFVZSxNQUFNLENBQUNKLFNBQzVCLFVBRmdCRSxJQUFBQSxJQUlULFNBQVNHLElBQU9DLE9BQWdCLENBQUssQ0FDeEMsS0FBTSxDQUFDQyxNQUFPQyxTQUFTLENBQUdDLE1BQU1DLFFBQVEsQ0FBQ0osV0FFekNHLE1BQU1FLFNBQVMsQ0FBQyxJQUFNLENBQ2xCLE1BQU1sQyxPQUFTc0IsR0FBRyxJQUFNLENBQ3BCUyxTQUFTRixVQUNiLEdBRUEsTUFBTyxJQUFNLEtBQUs3QixRQUN0QixFQUFHLEVBQUUsRUFFTCxPQUFPOEIsS0FDWCxVQVpnQkYsSUFBQUEsSUFjVCxTQUFTckQsWUFBbUIsQ0FDL0J1QyxTQUFXSCxRQUFRRyxRQUFRLENBQUdoRCxZQUFJQSxDQUFDdUIsT0FBTyxDQUFDMUIsVUFBRUEsQ0FBQzJCLE9BQU8sQ0FBRSxLQUFNLEtBQU0sS0FBTSxVQUFXLFlBQ3BGLEdBQUksQ0FBQzNCLFVBQUVBLENBQUN3RSxNQUFNLENBQUNyQixVQUFXLENBQ3RCLEdBQUksQ0FDQW5ELFVBQUVBLENBQUN5RSxTQUFTLENBQUN0QixTQUFVLENBQUN1QixVQUFXLElBQUksRUFDM0MsQ0FBRSxNQUFPM0UsTUFBTyxDQUNaLE9BQU9KLFFBQVFJLEtBQUssQ0FBQ0EsTUFDekIsQ0FDSixDQUFDLElBRUksSUFBSTRFLE1BQVEzRSxVQUFFQSxDQUFDNEUsT0FBTyxDQUFDekIsU0FBVSxRQUFTTSxFQUFJLEVBQUdBLEVBQUlrQixNQUFNakIsTUFBTSxDQUFFRCxJQUFLLENBQ3pFLE1BQU1vQixLQUFPRixLQUFLLENBQUNsQixFQUFFLENBQ3JCLEdBQUksQ0FBQ3pELFVBQUVBLENBQUM4RSxLQUFLLENBQUMzRSxZQUFJQSxDQUFDNEUsSUFBSSxDQUFDNUIsU0FBVTBCLE9BQU9HLE1BQU0sSUFBTSxDQUFDSCxLQUFLSSxRQUFRLENBQUMsU0FBVSxRQUFTLENBQ3ZGLE1BQU1DLE1BQVFMLEtBQUtNLEtBQUssQ0FBQyxFQUFHTixLQUFLTyxPQUFPLENBQUMsVUFFekNoQyxPQUFPaUMsR0FBRyxDQUFDSCxNQUFPM0UsUUFBUVAsVUFBRUEsQ0FBQ3lCLFFBQVEsQ0FBQ3RCLFlBQUlBLENBQUM0RSxJQUFJLENBQUM1QixTQUFVMEIsTUFBTyxTQUNyRSxDQUNKLFVBakJnQmpFLFdBQUFBLFdBbUJULFNBQVMwRSxJQUFJSixLQUFhLENBQUVLLElBQU0sSUFBSSxDQUFFLENBQzNDLEdBQUksQ0FBQ0wsTUFBTUUsT0FBTyxDQUFDLEtBQU0sQ0FDckIsS0FBTSxDQUFDSSxHQUFJLEdBQUdDLE1BQU0sQ0FBR1AsTUFBTVEsS0FBSyxDQUFDLEtBRW5DLE9BQU9ELE1BQU1FLE1BQU0sQ0FBQyxDQUFDQyxLQUFNQyxPQUFTRCxNQUFNLENBQUNDLEtBQUssQ0FBRXpDLE9BQU9rQyxHQUFHLENBQUNFLEtBQU9ELElBQ3hFLENBQUMsT0FFTW5DLE9BQU9rQyxHQUFHLENBQUNKLFFBQVVLLEdBQ2hDLFVBUmdCRCxJQUFBQSxJQVVULFNBQVNELElBQUlILEtBQWEsQ0FBRTFDLElBQVMsQ0FBRSxDQUMxQyxHQUFJLENBQUMwQyxNQUFNRSxPQUFPLENBQUMsS0FBTSxDQUNyQixLQUFNLENBQUNJLEdBQUksR0FBR0MsTUFBTSxDQUFHUCxNQUFNUSxLQUFLLENBQUMsS0FDbkNSLE1BQVFNLEdBQ1IsTUFBTU0sS0FBT0wsTUFBTU0sR0FBRyxHQUN0QixNQUFNQyxPQUFTNUMsT0FBT2tDLEdBQUcsQ0FBQ0UsSUFFMUIsR0FBSVEsUUFBVSxJQUFJLENBQUUsQ0FDaEIsTUFBTUMsT0FBU1IsTUFBTUUsTUFBTSxDQUFDLENBQUNDLEtBQU1DLE9BQVNELE1BQU0sQ0FBQ0MsS0FBSyxDQUFFekMsT0FBT2tDLEdBQUcsQ0FBQ0UsS0FDckUsR0FBSVMsUUFBVSxJQUFJLENBQUUsTUFBTSxJQUFJQyxNQUFNLHdCQUF5QixDQUU3REQsTUFBTSxDQUFDSCxLQUFLLENBQUd0RCxJQUNuQixLQUFPLENBQ0gsTUFBTTJELEtBQU9WLE1BQU1FLE1BQU0sQ0FBQyxDQUFDQyxLQUFNQyxPQUFTLENBQ3RDLEdBQUksQ0FBQ0QsSUFBSSxDQUFDQyxLQUFLLENBQUVELElBQUksQ0FBQ0MsS0FBSyxDQUFHLENBQUMsQ0FBRSxDQUVqQyxPQUFPRCxJQUFJLENBQUNDLEtBQUssRUFDbEIsQ0FBQyxFQUVKTSxDQUFBQSxJQUFJLENBQUNMLEtBQUssQ0FBR3RELEtBQ2JZLE9BQU9pQyxHQUFHLENBQUNHLEdBQUlXLEtBQ25CLENBQUMsS0FDRSxDQUNIL0MsT0FBT2lDLEdBQUcsQ0FBQ0gsTUFBTzFDLEtBQ3RCLENBQUMsV0FFRTRELFNBQVMsQ0FBQ2pHLFlBQUlBLENBQUM0RSxJQUFJLENBQUMvQixRQUFRRyxRQUFRLENBQUUrQixNQUFRLFNBQVV6RSxLQUFLc0MsU0FBUyxDQUFDSyxPQUFPa0MsR0FBRyxDQUFDSixPQUFRLElBQUksQ0FBRSxNQUNuRzVCLEtBQUs0QixNQUNULFVBNUJnQkcsSUFBQUEsTUEzRUhyQyxVQUFBQSxhOztBQ0xGLFNBQVNxRCxRQUFpQkosTUFBUyxDQUEyQixDQUN6RSxNQUFNSyxLQUFPdEUsT0FBT3NFLElBQUksQ0FBQ0wsUUFDekIsTUFBTU0sTUFBUSxDQUFDLEVBRWYsSUFBSyxJQUFJOUMsRUFBSSxFQUFHQSxFQUFJNkMsS0FBSzVDLE1BQU0sQ0FBRUQsSUFBSyxDQUNsQyxNQUFNK0MsSUFBTUYsSUFBSSxDQUFDN0MsRUFBRSxDQUNuQixNQUFNZ0QsV0FBYXpFLE9BQU8wRSx3QkFBd0IsQ0FBQ1QsT0FBUU8sS0FDM0QsR0FBSSxDQUFDQyxZQUFjLENBQUNBLFdBQVduQixHQUFHLENBQUUsQ0FDaENpQixLQUFLLENBQUNDLElBQUksQ0FBR1AsTUFBTSxDQUFDTyxJQUFJLENBQ3hCLFFBQVMsQ0FDWixNQUVLRyxPQUFTRixXQUFXbkIsR0FBRyxDQUM3QixJQUFJc0IsTUFBUUMsVUFDWjdFLE9BQU84RSxjQUFjLENBQUNQLE1BQU9DLElBQUssQ0FDOUJPLGFBQWMsSUFBSSxDQUNsQkMsV0FBWSxJQUFJLENBQ2hCMUIsS0FBTSxDQUNGLE9BQU9zQixRQUFVQyxVQUFZRCxNQUFTQSxNQUFRRCxRQUFTLENBRS9ELEVBQ0osQ0FFQSxPQUFPSixLQUNYLEM7O0FDdEJBLEdBQUksT0FBUVUsTUFBTUMsU0FBUyxDQUFDQyxFQUFFLEdBQU0sV0FBWSxDQUM1Q25GLE9BQU84RSxjQUFjLENBQUNHLE1BQU1DLFNBQVMsQ0FBRSxLQUFNLENBQ3pDTixNQUFPLFNBQVNPLEdBQUdDLEtBQUssQ0FBRSxDQUN0QixPQUFPQSxNQUFRLEVBQUksSUFBSSxDQUFDLElBQUksQ0FBQzFELE1BQU0sQ0FBRzJELEtBQUtDLEdBQUcsQ0FBQ0YsT0FBTyxDQUFHLElBQUksQ0FBQ0EsTUFBTSxFQUV4RUosV0FBWSxLQUFLLENBQ2pCRCxhQUFjLElBQUksRUFFMUIsQ0FBQyxHQUVHLE9BQVFRLGVBQWtCLFlBQWEsQ0FDdkN6RyxPQUFPeUcsWUFBWSxDQUFHLFVBQW1CRSxXQUFXRCxTQUFVLEVBQ2xFLENBRU8sTUFBTUUsUUFDVCxPQUFPQyxRQUFRLEdBQUdDLEtBQWUsQ0FBRSxDQUMvQixPQUFPLFFBQWlCQSxNQUFNQyxLQUFLLENBQUMvQixNQUFRQSxRQUFRckcsT0FDeEQsQ0FFQSxPQUFPcUksY0FBY2pDLElBQVksQ0FBRU4sSUFBTSxLQUFLLENBQUUsQ0FDNUMsT0FBTyxRQUFpQixDQUFDQSxJQUFPOUYsT0FBU0EsT0FBT3NJLE9BQU8sQ0FBSXRJLE1BQU0sR0FBSyxPQUFRQSxTQUFZLFlBQWNBLE9BQU91SSxXQUFXLEdBQUtuQyxJQUNuSSxDQUVBLE9BQU9vQyxhQUFhLEdBQUdDLE9BQWlCLENBQUUsQ0FDdEMsT0FBTyxRQUFpQnpJLE9BQU9GLElBQUksRUFBS0UsQ0FBQUEsT0FBU0EsT0FBT0YsSUFBSSxFQUFFNEksVUFBUyxHQUFNRCxRQUFRTCxLQUFLLENBQUNPLEtBQU8zSSxPQUFPMkYsT0FBTyxDQUFDZ0QsS0FBTyxDQUFDLEVBQzdILENBQ0EsT0FBT0MsT0FBTyxHQUFHSCxPQUFpQixDQUFFLENBQ2hDLE9BQU8sUUFBaUIsQ0FBQ3pJLE9BQVNBLE9BQU8wSSxRQUFRLEVBQUMsR0FBTUQsUUFBUUwsS0FBSyxDQUFDTyxLQUFPM0ksT0FBTzJGLE9BQU8sQ0FBQ2dELEtBQU8sQ0FBQyxFQUN4RyxDQUNBLE9BQU9FLFlBQVksR0FBR1YsS0FBZSxDQUFFLENBQ25DLE1BQU1XLE9BQVNiLFFBQVFDLE9BQU8sSUFBSUMsT0FDbEMsT0FBTyxRQUFpQm5JLE9BQU95SCxTQUFTLEVBQUlxQixPQUFPOUksT0FBT3lILFNBQVMsQ0FDdkUsQ0FDSixDQUFDLE1BSUtzQixjQUVGQyxNQUFRLElBQUksRUFDWHhGLFNBQVMsQ0FBRyxJQUFJQyxHQUFNLEtBQ25Cd0UsU0FBVSxDQUFDLE9BQU9BLE9BQVEsQ0FDOUIsSUFBSWdCLFdBQVksQ0FBQyxNQUFPLHlCQUEwQixDQUNsRCxJQUFJbEQsSUFBSyxDQUFDLE9BQU9tRCxPQUFPLGtCQUFtQixDQUUzQ0MsYUFBYyxDQUNWLElBQUksQ0FBQ0MsU0FBUyxDQUFHLElBQUksQ0FBQ0MsYUFBYSxDQUFDQyxJQUFJLENBQUMsSUFBTSxJQUFJQyxRQUFRLE1BQU1DLFNBQVcsQ0FDeEUsS0FBTSxDQUFDQyxXQUFZQyxVQUFVLENBQUcsTUFBTSxJQUFJLENBQUNDLFdBQVcsQ0FDbEQsQ0FBQyxZQUFhLFdBQVcsQ0FBRSxDQUFDLGlCQUFrQixpQkFBaUIsQ0FDL0QsQ0FBQ1gsTUFBTyxLQUFLLENBQUVZLEtBQU0sSUFBSSxDQUFFQyxLQUFNLElBQUksQ0FBRUMsUUFBUyxJQUFJLEdBR3hELEdBQUlKLFVBQVVLLGNBQWMsR0FBSSxPQUFPUCxTQUFVLENBRWpELE1BQU1yRixTQUFXLFVBQVksQ0FDekJzRixXQUFXTyxXQUFXLENBQUMsZ0JBQWlCN0YsVUFDeENzRixXQUFXTyxXQUFXLENBQUMsa0JBQW1CN0YsVUFDMUNxRixTQUNKLEVBRUFDLFdBQVdRLFNBQVMsQ0FBQyxnQkFBaUI5RixVQUN0Q3NGLFdBQVdRLFNBQVMsQ0FBQyxrQkFBbUI5RixTQUM1QyxJQUVBLElBQUksQ0FBQ2lGLFNBQVMsQ0FBQ0UsSUFBSSxDQUFDLElBQU0sQ0FDdEIsSUFBSVksYUFBZTdJLE1BQU0sQ0FBQyxJQUFJLENBQUM0SCxTQUFTLENBQUMsQ0FBQ2tCLElBQUksQ0FFOUMsTUFBTUMsV0FBYSxPQUFrQixDQUNqQyxLQUFNLEVBQUdFLFFBQVEsQ0FBR0QsTUFFcEIsSUFBSyxNQUFNRSxZQUFZRCxRQUFTLENBQzVCLE1BQU1FLGVBQWlCRixPQUFPLENBQUNDLFNBQVMsQ0FFeENELE9BQU8sQ0FBQ0MsU0FBUyxDQUFHLENBQUMsR0FBR3pHLE9BQVMsQ0FDN0IsS0FBTSxFQUFHMkcsUUFBUSxDQUFHM0csS0FDcEIwRyxlQUFlRSxLQUFLLENBQUNGLGVBQWdCMUcsTUFFckMsTUFBTU4sVUFBWSxJQUFJLElBQUksQ0FBQyxDQUFDQSxTQUFTLENBQUMsQ0FDdEMsSUFBSyxJQUFJUSxFQUFJLEVBQUdBLEVBQUlSLFVBQVVTLE1BQU0sQ0FBRUQsSUFBSyxDQUN2QyxHQUFJLENBQUNSLFNBQVMsQ0FBQ1EsRUFBRSxDQUFDeUcsUUFBUyxDQUMzQixNQUFPbkssTUFBTyxDQUNWSixRQUFRSSxLQUFLLENBQUMsWUFBYSxvQ0FBcUNBLE1BQ3BFLENBQ0osQ0FDSixFQUVBaUMsT0FBT0MsTUFBTSxDQUFDOEgsT0FBTyxDQUFDQyxTQUFTLENBQUVDLGVBQWdCLENBQzdDOUIsU0FBVThCLGVBQWU5QixRQUFRLENBQUNwRSxJQUFJLENBQUNrRyxnQkFDdkNHLFdBQVlILGNBQ2hCLEVBQ0osQ0FFQSxPQUFPTixhQUFhUSxLQUFLLENBQUNySixNQUFNLENBQUMsSUFBSSxDQUFDNEgsU0FBUyxDQUFDLENBQUUsQ0FBQ29CLE1BQU0sQ0FDN0QsRUFFQTlILE9BQU84RSxjQUFjLENBQUNoRyxNQUFNLENBQUMsSUFBSSxDQUFDNEgsU0FBUyxDQUFDLENBQUUsT0FBUSxDQUNsRDNCLGFBQWMsSUFBSSxDQUNsQnpCLElBQUssSUFBTXVFLFdBQ1h4RSxJQUFLLFNBQWEsQ0FDZHNFLGFBQWVVLFFBRWZySSxPQUFPOEUsY0FBYyxDQUFDaEcsTUFBTSxDQUFDLElBQUksQ0FBQzRILFNBQVMsQ0FBQyxDQUFFLE9BQVEsQ0FDbEQ5QixNQUFPaUQsV0FDUDlDLGFBQWMsSUFBSSxDQUNsQnVELFNBQVUsSUFBSSxFQUV0QixDQUNKLEVBQ0osRUFDSixDQUVBQyxZQUFZM0csUUFBa0IsQ0FBRSxDQUM1QixJQUFJLENBQUMsQ0FBQ1gsU0FBUyxDQUFDWSxHQUFHLENBQUNELFVBRXBCLE1BQU8sSUFBTSxDQUNULElBQUksQ0FBQyxDQUFDWCxTQUFTLENBQUNlLE1BQU0sQ0FBQ0osU0FDM0IsQ0FDSixDQUVBNEcsZUFBZTVHLFFBQWtCLENBQUUsQ0FDL0IsT0FBTyxJQUFJLENBQUMsQ0FBQ1gsU0FBUyxDQUFDZSxNQUFNLENBQUNKLFNBQ2xDLENBRUE2RyxTQUFTbEMsTUFBZ0IsQ0FBZ0IsQ0FDckMsTUFBTW1DLFVBQVksSUFBSSxDQUFDQyxVQUFVLENBQUNwQyxRQUNsQyxHQUFJbUMsVUFBVyxPQUFPMUIsUUFBUXRILE9BQU8sQ0FBQ2dKLFVBQVcsQ0FFakQsT0FBTyxJQUFJMUIsUUFBUXRILFNBQVcsQ0FDMUIsTUFBTWtDLFNBQVcsR0FBWSxDQUN6QixNQUFNaUgsWUFBY3RDLE9BQU9xQyxHQUMzQixHQUFJQyxZQUFhLENBQ2JuSixRQUFRa0osR0FDUixPQUFPLEtBQUt2SSxRQUNoQixDQUFDLEdBRUcsQ0FBQ3VJLEVBQUU3QyxPQUFPLENBQUUsTUFBTyxDQUN2QixNQUFNK0MsYUFBZXZDLE9BQU9xQyxFQUFFN0MsT0FBTyxFQUNyQyxHQUFJLENBQUMrQyxhQUFjLE1BQU8sQ0FFMUJwSixRQUFRa0osRUFBRTdDLE9BQU8sRUFDakIxRixRQUNKLEVBRUEsTUFBTUEsT0FBUyxJQUFJLENBQUNrSSxXQUFXLENBQUMzRyxTQUNwQyxFQUNKLENBRUEsTUFBTW1ILFFBQVF4QyxNQUFvQixDQUFFLENBQUN5QyxRQUFVLEdBQUcsQ0FBRUMsSUFBTSxLQUFLLENBQUUxQixRQUFVLEtBQUssQ0FBRTJCLE1BQVEsRUFBRSxDQUFDLENBQUcsQ0FBQyxDQUFDLENBQUUsQ0FDaEcsSUFBSyxJQUFJekgsRUFBSSxFQUFHLEVBQUt1SCxTQUFZekIsUUFBUzlGLElBQUssQ0FDM0MsTUFBTWhFLE9BQVMsSUFBSSxDQUFDa0wsVUFBVSxDQUFDcEMsT0FBUSxDQUFDMEMsSUFBS3hDLE1BQU8sS0FBSyxHQUN6RCxHQUFJaEosT0FBUSxPQUFPQSxNQUFPLE9BQ3BCLElBQUl1SixRQUFRbUMsS0FBTzFELFdBQVcwRCxJQUFLRCxPQUM3QyxDQUNKLENBRUFFLGFBQWE3SCxJQUFJLENBQUVnRixPQUFTOEMsT0FBVSxPQUFRQSxRQUFXLFVBQVlBLE9BQVMsSUFBSSxFQUFJLENBQUNwRSxNQUFNcUUsT0FBTyxDQUFDRCxNQUFPLENBQUUsQ0FDMUcsTUFBTyxDQUFDOUgsS0FBTWdGLE9BQU9oRixLQUFLNEQsRUFBRSxDQUFDLENBQUMsSUFBTTVELEtBQUt3QyxHQUFHLEdBQUssQ0FBQyxDQUFDLENBQUMsQ0FHeER3RixRQUFROUMsT0FBUSxJQUFJLENBQUUsQ0FDbEIsR0FBSUEsUUFBUyxJQUFJLENBQUNBLEtBQUssQ0FBRSxPQUFPLElBQUksQ0FBQ0EsS0FBSyxDQUMxQyxJQUFJK0MsSUFBTTNFLFVBRVYsR0FBSUksTUFBTXFFLE9BQU8sQ0FBQ3hLLE1BQU0sQ0FBQyxJQUFJLENBQUM0SCxTQUFTLENBQUMsRUFBRyxDQUN2QyxNQUFNb0IsTUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDdEUsRUFBRSxDQUFDLENBQUUsQ0FBQyxFQUFHaUcsK0JBQW1CQSxFQUFJRCxJQUFNQywrQkFBbUJBLENBQUMsQ0FDL0VDLHdCQUF3QjlCLElBQUksQ0FBQ0UsT0FDN0I0Qix3QkFBd0JDLE1BQU0sQ0FBQ0Qsd0JBQXdCdEcsT0FBTyxDQUFDMEUsT0FBUSxFQUMzRSxDQUFDLEdBRUdyQixPQUFPLElBQUksQ0FBQ0EsS0FBSyxDQUFHK0MsR0FBSSxDQUU1QixPQUFPQSxHQUNYLENBRUFiLFdBQVdwQyxNQUFvQixDQUFFLENBQUMwQyxJQUFNLEtBQUssQ0FBRXhDLE1BQUFBLE9BQVEsSUFBSSxDQUFFbUQsTUFBUSxJQUFJLENBQUU3RCxRQUFTOEQsZUFBaUIsS0FBSyxDQUFDLENBQUcsQ0FBQyxDQUFDLENBQUUsQ0FDOUcsR0FBSSxPQUFRdEQsU0FBWSxXQUFZLE9BQU8sS0FBSyxDQUFFLENBRWxELE1BQU1rRCwrQkFBbUJBLENBQUcsSUFBSSxDQUFDRixPQUFPLENBQUM5QyxRQUN6QyxNQUFNcUQsTUFBUSxFQUFFLENBQ2hCLElBQUlDLFNBQVcsSUFBSSxDQUVuQixHQUFJLENBQUNOLCtCQUFtQkEsQ0FBRSxNQUFPLENBRWpDLE1BQU1PLFdBQWEsU0FBVXZNLE1BQVcsQ0FBRTJILEtBQWEsQ0FBRSxDQUNyRCxHQUFJLENBQUMsT0FBT21CLE9BQU85SSxPQUFRMkgsTUFBTyxDQUNsQyxNQUFPckgsTUFBTyxDQUNWZ00sV0FBYWhNLE1BQ2IsT0FBTyxLQUFLLENBRXBCLEVBRUEsSUFBSyxNQUFNeUYsTUFBTWlHLCtCQUFtQkEsQ0FBQ1EsQ0FBQyxDQUFFLENBQ3BDLE1BQU14TSxPQUFTZ00sK0JBQW1CQSxDQUFDUSxDQUFDLENBQUN6RyxHQUFHLENBQUMwRSxPQUFPLENBQ2hELEdBQUksQ0FBQ3pLLFFBQVVBLFNBQVdxQixPQUFRLFFBQVMsQ0FFM0MsT0FBUSxPQUFPckIsUUFDWCxJQUFLLFNBQVUsQ0FDWCxHQUFJdU0sV0FBV3ZNLE9BQVErRixJQUFLLENBQ3hCLEdBQUksQ0FBQ3lGLElBQUssT0FBT3hMLE1BQU8sQ0FDeEJxTSxNQUFNbEMsSUFBSSxDQUFDbkssT0FDZixDQUFDLEdBR0dBLE9BQU9zSSxPQUFPLEVBQUksSUFBSSxFQUN0QixPQUFPdEksT0FBT3NJLE9BQU8sR0FBSyxVQUMxQmlFLFdBQVd2TSxPQUFPc0ksT0FBTyxDQUFFdkMsSUFDN0IsQ0FDRSxNQUFNMEUsUUFBVTJCLGVBQWlCcE0sT0FBU0EsT0FBT3NJLE9BQU8sQ0FDeEQsR0FBSSxDQUFDa0QsSUFBSyxPQUFPZixPQUFRLENBQ3pCNEIsTUFBTWxDLElBQUksQ0FBQ00sUUFDZixDQUFDLEdBRUcwQixNQUFrQyxJQUFLLE1BQU1wRixPQUFPL0csT0FBUSxDQUM1RCxHQUFJLENBQUNBLE1BQU0sQ0FBQytHLElBQUksQ0FBRSxRQUFTLENBRTNCLEdBQUl3RixXQUFXdk0sTUFBTSxDQUFDK0csSUFBSSxDQUFFaEIsSUFBSyxDQUM3QixHQUFJLENBQUN5RixJQUFLLE9BQU94TCxNQUFNLENBQUMrRyxJQUFJLENBQzVCc0YsTUFBTWxDLElBQUksQ0FBQ25LLE1BQU0sQ0FBQytHLElBQUksQ0FDMUIsQ0FBQyxDQUNKLEtBRUssQ0FHVixJQUFLLFdBQVksQ0FDYixHQUFJd0YsV0FBV3ZNLE9BQVErRixJQUFLLENBQ3hCLEdBQUksQ0FBQ3lGLElBQUssT0FBT3hMLE1BQU8sQ0FDeEJxTSxNQUFNbEMsSUFBSSxDQUFDbkssT0FDZixDQUFDLEtBRUssQ0FFZCxDQUNKLENBRUEsR0FBSXNNLFNBQVUsQ0FDVnhFLGFBQWEsSUFBTSxDQUNmNUgsUUFBUUcsSUFBSSxDQUFDLHFHQUFzR2lNLFNBQ3ZILEVBQ0osQ0FBQyxPQUVNZCxJQUFNYSxNQUFRQSxLQUFLLENBQUMsRUFBRSxDQUdqQ0ksWUFBWTNELE1BQW9CLENBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQ29DLFVBQVUsQ0FBQ3BDLE9BQVEsQ0FBQzBDLElBQUssSUFBSSxFQUFHLENBRS9FNUIsS0FBSyxHQUFHOEMsT0FBYyxDQUFFLENBQ3BCLEtBQU0sQ0FBQ0MsUUFBUyxDQUFDOUMsS0FBTyxLQUFLLENBQUUsR0FBRytDLEtBQUssQ0FBQyxDQUFHLElBQUksQ0FBQ2pCLFlBQVksQ0FBQ2UsU0FDN0QsTUFBTUwsTUFBUSxJQUFJN0UsTUFBTW1GLFFBQVExSSxNQUFNLEVBQ3RDLE1BQU00SSxlQUFpQmhELEtBQU8sSUFBSSxDQUFDeUIsT0FBTyxDQUFHLElBQUksQ0FBQ0osVUFBVSxDQUM1RCxNQUFNNEIsZUFBaUJILFFBQVFJLEdBQUcsQ0FBQ2pFLFFBQVUsQ0FDekMsR0FBSXRCLE1BQU1xRSxPQUFPLENBQUMvQyxRQUFTQSxPQUFTYixRQUFRQyxPQUFPLElBQUlZLE9BQVEsQ0FDL0QsR0FBSSxPQUFRQSxTQUFZLFNBQVVBLE9BQVNiLFFBQVFJLGFBQWEsQ0FBQ1MsT0FBUSxDQUV6RSxPQUFPLEdBQU8sQ0FDVixHQUFJLENBQUMsT0FBT0EsT0FBT3FDLEVBQUcsQ0FDdEIsTUFBTzdLLE1BQU8sQ0FBQyxPQUFPLEtBQUssQ0FDL0IsQ0FDSixHQUVBLE1BQU0wTSxZQUFjSCxlQUFlSSxJQUFJLENBQUMsSUFBSSxDQUFFLFFBQWlCLENBQzNELElBQUssSUFBSWpKLEVBQUksRUFBR0EsRUFBSThJLGVBQWU3SSxNQUFNLENBQUVELElBQUssQ0FDNUMsTUFBTThFLE9BQVNnRSxjQUFjLENBQUM5SSxFQUFFLENBQ2hDLEdBQUksT0FBTzhFLFNBQVcsWUFBYyxDQUFDQSxPQUFPOUksU0FBV3FNLEtBQUssQ0FBQ3JJLEVBQUUsRUFBSSxJQUFJLENBQUUsUUFBUyxDQUVsRnFJLEtBQUssQ0FBQ3JJLEVBQUUsQ0FBR2hFLE1BRWYsQ0FFQSxPQUFPcU0sTUFBTXZELE1BQU0sQ0FBQ29FLFFBQVFqSixNQUFNLEdBQUswSSxRQUFRMUksTUFBTSxFQUN0RDJJLE1BRUgsR0FBSS9DLEtBQU0sT0FBT21ELFlBQVkxRCxJQUFJLENBQUMsSUFBTStDLE1BQU8sQ0FFL0MsT0FBT0EsS0FDWCxDQUVBMUMsWUFBWSxHQUFHK0MsT0FBYyxDQUFFLENBQzNCLEtBQU0sQ0FBQ3ZFLE1BQU8sQ0FBQ3lCLEtBQU8sS0FBSyxDQUFFQyxLQUFPLEtBQUssQ0FBRSxHQUFHK0MsS0FBSyxDQUFDLENBQUcsSUFBSSxDQUFDakIsWUFBWSxDQUFDZSxTQUV6RSxHQUFJLENBQUM5QyxNQUFRLENBQUNDLEtBQU0sQ0FDaEIsT0FBTyxJQUFJLENBQUNxQixVQUFVLENBQUNqRCxRQUFRQyxPQUFPLElBQUlDLE9BQVF5RSxLQUN0RCxDQUFDLEdBRUcvQyxNQUFRLENBQUNELEtBQU0sQ0FDZixPQUFPLElBQUksQ0FBQzBCLE9BQU8sQ0FBQ3JELFFBQVFDLE9BQU8sSUFBSUMsT0FBUXlFLEtBQ25ELENBQUMsR0FFR2hELEtBQU0sQ0FDTixNQUFNK0MsUUFBVXhFLE1BQU00RSxHQUFHLENBQUMsWUFBMEI5RSxRQUFRQyxPQUFPLElBQUlpRixhQUFhQyxNQUFNLENBQUMsQ0FBQ3ZELEtBQU0sR0FBRytDLElBQUksR0FFekcsT0FBTyxJQUFJLENBQUNoRCxJQUFJLElBQUkrQyxRQUN4QixDQUFDLE9BR00sSUFBSSxDQUdmVSxrQkFBa0IsR0FBR1gsT0FBYyxDQUFFLENBQ2pDLEtBQU0sQ0FBQ1ksYUFBYyxDQUFDMUQsS0FBTyxLQUFLLENBQUVDLEtBQU8sS0FBSyxDQUFFLEdBQUcrQyxLQUFLLENBQUMsQ0FBRyxJQUFJLENBQUNqQixZQUFZLENBQUNlLFNBRWhGLEdBQUksQ0FBQzlDLE1BQVEsQ0FBQ0MsS0FBTSxDQUNoQixPQUFPLElBQUksQ0FBQ3FCLFVBQVUsQ0FBQ2pELFFBQVFJLGFBQWEsQ0FBQ2lGLFlBQVksQ0FBQyxFQUFFLEVBQUdWLEtBQ25FLENBQUMsR0FFRy9DLE1BQVEsQ0FBQ0QsS0FBTSxDQUNmLE9BQU8sSUFBSSxDQUFDMEIsT0FBTyxDQUFDckQsUUFBUUksYUFBYSxDQUFDaUYsWUFBWSxDQUFDLEVBQUUsRUFBR1YsS0FDaEUsQ0FBQyxHQUVHaEQsS0FBTSxDQUNOLE1BQU0rQyxRQUFVVyxhQUFhUCxHQUFHLENBQUNKLFFBQVFJLEdBQUcsQ0FBQzlFLFFBQVFJLGFBQWEsR0FBRytFLE1BQU0sQ0FBQyxDQUFDdkQsS0FBTWIsS0FBSyxHQUV4RixPQUFPLElBQUksQ0FBQ1ksSUFBSSxJQUFJK0MsUUFDeEIsQ0FBQyxPQUVNLElBQUksQ0FHZlksVUFBVXpFLE1BQW9CLENBQUUsQ0FDNUIsSUFBSTBFLFdBQWEsQ0FBQyxFQUVsQixJQUFJLENBQUN0QyxVQUFVLENBQUMsQ0FBQ2xMLE9BQVEySCxRQUFVLENBQy9CLEdBQUltQixPQUFPOUksUUFBU3dOLFdBQWE3RixLQUFNLEdBRzNDLE9BQU82RixVQUNYLENBRUFDLFFBQVE5RixLQUFhLENBQUUsQ0FDbkIsT0FBTyxJQUFJLENBQUNtRSxPQUFPLENBQUMsSUFBSSxHQUFHVSxDQUFDLENBQUM3RSxNQUFNLENBR3ZDLElBQUkwQixlQUFnQixDQUNoQixPQUFPLElBQUlFLFFBQWMsTUFBTW1FLFVBQVksQ0FDdkMsTUFBTyxDQUFDbEcsTUFBTXFFLE9BQU8sQ0FBQ3hLLE1BQU0sQ0FBQyxJQUFJLENBQUM0SCxTQUFTLENBQUMsRUFBRyxDQUMzQyxNQUFNLElBQUlNLFFBQVF6QixhQUN0QixDQUVBNEYsVUFDSixFQUNKLENBR0EsTUFBTTdELEtBQUs5QixTQUFXLElBQUksQ0FBRSxDQUN4QixPQUFPLElBQUksQ0FBQ3FCLFNBQVMsQ0FBQ0UsSUFBSSxDQUFDLElBQU0sQ0FDN0IsT0FBT3ZCLFdBQWEsWUFBY0EsVUFDdEMsRUFDSixDQUdBLElBQUk0RixZQUFhLENBQUMsT0FBTyxJQUFJLENBQUN0RSxhQUFhLENBRzNDbkYsR0FBRzBKLEtBQWEsQ0FBRXpKLFFBQWtCLENBQUUsQ0FDbEMsT0FBUXlKLE9BQ0osSUFBSyxTQUFVLE9BQU8sSUFBSSxDQUFDeEUsU0FBUyxDQUFDRSxJQUFJLENBQUNuRixTQUM5QyxDQUNKLENBR0EsSUFBSTBKLE1BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQzNKLEVBQUUsQ0FDOUIsQ0FFQSxNQUFNNEosUUFBVSxJQUFJL0UsYUFFcEIsK0NBQWUrRSxPQUFRLEU7O0FDNVd2QixNQUFNQyxrQkFBb0JuSCxPQUFPQSxDQUFDLENBQzlCLElBQUlvSCxRQUFTLENBQUMsT0FBT0YsbUJBQW1CLENBQUMsZUFBZ0IsRUFDekQsSUFBSUcsUUFBUyxDQUFDLE9BQU9ILGtCQUFrQixDQUFDM0MsR0FBSyxPQUFPQSxJQUFNLFlBQWNsRCxjQUFjLENBQUMscUJBQXFCa0QsR0FBSSxFQUNoSCxJQUFJK0MsVUFBVyxDQUFDLE9BQU9KLGtCQUFrQixDQUFDM0MsR0FBS0EsR0FBRzFELFdBQVcwRyxRQUFVaEQsRUFBRWlELEtBQUssQ0FBRSxFQUNoRixJQUFJQyxNQUFPLENBQUMsT0FBT1Asa0JBQWtCLENBQUMzQyxHQUFLQSxFQUFFbUQsS0FBSyxFQUFFQyxTQUFXcEQsRUFBRXFELE1BQU0sRUFBRUMsS0FBTSxFQUMvRSxJQUFJQyxTQUFVLENBQUMsT0FBT1osa0JBQWtCLENBQUMzQyxHQUFLQSxFQUFFd0QsSUFBSSxFQUFFQyxnQkFBaUIsRUFDdkUsSUFBSUMsTUFBTyxDQUFDLE9BQU9mLG1CQUFtQixDQUFDLFFBQVMsUUFBUyxFQUN6RCxJQUFJZ0IsTUFBTyxDQUFDLE9BQU9oQixrQkFBa0IsQ0FBQzNDLEdBQUssT0FBT0EsSUFBTSxZQUFjbEQsY0FBYyxDQUFDLE9BQVEsVUFBVWtELEdBQUksRUFDM0csSUFBSTRELFdBQVksQ0FBQyxPQUFPakIsa0JBQWtCLENBQUMzQyxHQUFLQSxFQUFFNkQsSUFBSSxFQUFJL0csY0FBYyxDQUFDLGtCQUFrQmtELEdBQUksRUFDL0YsSUFBSThELFlBQWEsQ0FBQyxPQUFPbkIsa0JBQWtCLENBQUMzQyxHQUFLQSxFQUFFK0QsS0FBSyxFQUFJakgsY0FBYyxDQUFDLGtCQUFtQixrQkFBa0JrRCxHQUFJLEVBQ3BILElBQUlnRSxhQUFjLENBQUMsT0FBT3JCLGtCQUFrQixDQUFDM0MsR0FBSyxPQUFPQSxJQUFNLFlBQWVBLENBQUFBLEVBQUlBLEVBQUV6QyxRQUFRLEVBQUMsR0FBTXlDLEVBQUVsSCxNQUFNLENBQUcsS0FBT2tILEVBQUVpRSxRQUFRLENBQUMsV0FBWSxFQUM1SSxJQUFJQyxVQUFXLENBQUMsT0FBT3ZCLGtCQUFrQixDQUFDM0MsR0FBS0EsRUFBRTZELElBQUksRUFBSS9HLGNBQWMsQ0FBQyxXQUFZLGdCQUFpQixXQUFZLE1BQU8sU0FBU2tELEdBQUksRUFDckksSUFBSW1FLFVBQVcsQ0FBQyxPQUFPeEIsbUJBQW1CLENBQUMsWUFBYSxTQUFVLENBQ3RFLEVBRUEsK0NBQWVDLGlCQUFrQixFOztBQ2xCakMsb1JBQWUsU0FBU3dCLE1BQU1wSCxLQUFVLENBQUUsQ0FDdEMsT0FDSSxvQkFBQ3FILGdCQUNHQyxNQUFNLEtBQ05DLE9BQU8sS0FDUEMsUUFBUSxZQUNSQyxNQUFNLDhCQUNGekgsT0FFSixvQkFBQ3pILFFBQUttUCxFQUFFLGdCQUFnQkMsS0FBSyxTQUM3QixvQkFBQ3BQLFFBQ0dtUCxFQUFFLDJDQUNGQyxLQUFLLGlCQUVULG9CQUFDcFAsUUFDR21QLEVBQUUsd0lBQ0ZDLEtBQUssaUJBSXJCLEM7O0FDcEJBLHNTQUFlLFNBQVNDLE9BQU81SCxLQUFVLENBQUUsQ0FDdkMsT0FDSSxvQkFBQ3FILE1BQUFBLGNBQUFBLEVBQUlDLE1BQU0sS0FBS0MsT0FBTyxLQUFLQyxRQUFRLGVBQWtCeEgsT0FDbEQsb0JBQUN6SCxRQUNHb1AsS0FBSyxlQUNMRCxFQUFFLG9JQUlsQixDOztBQ1RBLDRTQUFNRyxTQUFXLE9BQ2Isb0JBQUNSLE1BQUFBLGNBQUFBLEVBQUlJLE1BQU0sNkJBQTZCRixPQUFPLEtBQUtDLFFBQVEsWUFBWUYsTUFBTSxNQUFTdEgsT0FDbkYsb0JBQUN6SCxRQUFLbVAsRUFBRSxnQkFBZ0JDLEtBQUssU0FDN0Isb0JBQUNwUCxRQUFLbVAsRUFBRSxzSEFBc0hDLEtBQUssa0JBSTNJLE1BQU1HLFFBQVUsT0FDWixvQkFBQ1QsTUFBQUEsY0FBQUEsRUFBSUksTUFBTSw2QkFBNkJNLG9CQUFrQixnQkFBZ0JSLE9BQU8sS0FBS0MsUUFBUSxZQUFZRixNQUFNLE1BQVN0SCxPQUNySCxvQkFBQ2dJLFNBQ0csb0JBQUN6UCxRQUFLbVAsRUFBRSxrQkFBa0JDLEtBQUssVUFFbkMsb0JBQUNLLFNBQ0csb0JBQUN6UCxRQUFLbVAsRUFBRSxnSEFBZ0hDLEtBQUssdUJBS3pJLGdCQUFLWixLQUFLLEVBQUxBLE1BQ0RrQixZQUFBQSxXQURDbEIsTUFFRG1CLFdBQUFBLFlBRkNuQixRQUFBQSxXQU9MLE1BQU1vQixPQUE0RixDQUFDLENBQUN4USxJQUFJLENBQUUsR0FBR3FJLE1BQU0sR0FBSyxDQUNwSCxPQUFRckksTUFDSixLQUFLb1AsTUFBTWtCLFFBQVEsQ0FBRSxPQUFPLG9CQUFDSixTQUFBQSxjQUFBQSxJQUFhN0gsT0FDMUMsTUFBSytHLE1BQU1tQixPQUFPLENBQUUsT0FBTyxvQkFBQ0osUUFBQUEsY0FBQUEsSUFBWTlILE9BRXhDLFNBQVMsT0FBTyxJQUFJLENBRTVCLENBRUFtSSxDQUFBQSxPQUFPcEIsS0FBSyxDQUFHQSxLQUVmLDhDQUFlb0IsTUFBTyxFOztBQ3BDdEIsb1VBQWUsU0FBU0MsZ0JBQWdCcEksS0FBVSxDQUFFLENBQ2hELE9BQ0ksb0JBQUNxSCxNQUFBQSx3QkFBQUEsRUFBSWdCLFVBQVUsc0JBQXNCQyxjQUFZLFFBQVFoQixNQUFNLEtBQUtDLE9BQU8sS0FBS0MsUUFBUSxhQUFnQnhILE9BQ3BHLG9CQUFDZ0ksS0FBRUwsS0FBSyxPQUFPWSxZQUFVLFdBQ3JCLG9CQUFDaFEsUUFBS29QLEtBQUssZUFBZVksWUFBVSxVQUFVYixFQUFFLHlTQUNoRCxvQkFBQ2MsV0FBUUMsT0FBTyx5QkFJaEMsQzs7QUNUQSxtU0FLTyxNQUFNQyxNQUFRLENBQ2pCdEIsS0FBS0EsRUFBQUEsS0FBQUEsQ0FDTFEsTUFBTUEsRUFBQUEsTUFBQUEsQ0FDTk8sTUFBTUEsRUFBQUEsTUFBQUEsQ0FDTkMsZUFDSixrQkFBRSxDQUVhLFNBQVNPLEtBQUssQ0FDekIxSyxJQUFJLENBQ0osR0FBRytCLE1BS04sQ0FBRSxDQUNDLE1BQU00SSxjQUFnQkYsS0FBSyxDQUFDekssS0FBSyxDQUNqQyxNQUFNNEssV0FBa0IsQ0FBQyxFQUV6QixHQUFJLENBQUNELGNBQWUsQ0FDaEIsT0FBTyxJQUFJLENBQ2QsR0FDRzVJLE1BQU04SSxJQUFJLENBQUUsQ0FDWkQsV0FBV3ZCLEtBQUssQ0FBR3VCLFdBQVd0QixNQUFNLENBQUd2SCxNQUFNOEksSUFBSSxDQUNwRCxPQUVNLG9CQUFDRixjQUFBQSxhQUFBQSxJQUFrQjVJLE1BQVc2SSxZQUN6QyxDOztBQy9CQSxnU0FJQSxNQUFNRSxPQUFjLE9BQWdCQSxNQUFNLENBQzFDLE1BQU1DLFNBQVczUSxlQUFlQyxhQUFhLENBQUMsV0FFOUMsQ0FBTyxTQUFTMlEsV0FBVyxDQUFFQyxLQUFLLENBQUVDLElBQUksQ0FBRUMsT0FBTyxDQUFFQyxPQUFTLEtBQUssQ0FBRSxDQUFFLENBQ25FLEtBQU0sQ0FBRWxDLFFBQVEsQ0FBRXRCLE1BQU0sQ0FBRSxDQUFHRCxPQUFpQkEsQ0FFOUMsT0FDRSxvQkFBQ3VCLFVBQVNtQyxLQUFNSixNQUFPSyxTQUFTLE9BQzdCLE9BQ0Msb0JBQUMxRCxPQUFBQSxZQUFBQSxJQUNLN0YsT0FDSnFJLFVBQVUsb0JBQ1ZtQixLQUFNM0QsT0FBTzRELEtBQUssQ0FBQ0MsS0FBSyxDQUN4QlosS0FBTWpELE9BQU9NLEtBQUssQ0FBQ3dELElBQUksQ0FDdkJQLFFBQVNBLFVBRVQsb0JBQUNULElBQUlBLEVBQUNHLEtBQUssS0FBSzdLLEtBQU1rTCxLQUFNUyxNQUFPUCxPQUFTLFVBQVlwSyxTQUFTLElBSzNFLENBRU8sU0FBUzRLLGNBQWMsQ0FBRTdLLEtBQUssQ0FBRThLLFFBQVEsQ0FBRUMsUUFBUSxDQUFFLENBQUUsQ0FDM0QsS0FBTSxDQUFFakUsTUFBTSxDQUFFLENBQUdGLE9BQWlCQSxDQUNwQyxLQUFNLENBQUNvRSxVQUFXQyxXQUFXLENBQUd4TixNQUFNQyxRQUFRLENBQUNzQyxPQUUvQyxPQUNFLG9CQUFDOEcsUUFDQ29FLFFBQVNGLFVBQ1RELFNBQVVBLFNBQ1YvSyxNQUFPQSxNQUNQOEssU0FBVXJOLE1BQU0wTixXQUFXLENBQUMsSUFBTSxDQUNoQyxHQUFJSixTQUFVLE1BQU8sQ0FFckJELFNBQVMsQ0FBQ0UsV0FDVkMsV0FBVyxPQUFvQixDQUFDakwsTUFDbEMsRUFBRyxDQUFDOEssU0FBVUUsVUFBVSxHQUc5QixDQUVPLFNBQVNJLFNBQVM3UixJQUFZLENBQUUsQ0FDckMsR0FBSUEsS0FBSzhFLFFBQVEsQ0FBQyxTQUFVLE9BQU8yTCxTQUFTcUIsZ0JBQWdCLENBQUM5UixLQUFNLENBRW5FeVEsU0FBU3NCLFFBQVEsQ0FBQy9SLEtBQ3BCLENBRWUsU0FBU2dTLFdBQVcsQ0FBRUMsR0FBRyxDQUFFLENBQUUsQ0FDMUMsS0FBTSxDQUFFekUsUUFBUSxDQUFFRyxJQUFJLENBQUUsQ0FBR04sT0FBaUJBLENBRTVDLE9BQ0Usb0JBQUM2RSxPQUFJcEMsVUFBVSxlQUNiLG9CQUFDb0MsT0FBSXBDLFVBQVUscUJBQ2Isb0JBQUNZLFlBQ0NDLE1BQU0sWUFDTkMsS0FBSyxTQUNMQyxRQUFTLElBQU1nQixTQUFTSSxJQUFJalMsSUFBSSxJQUVsQyxvQkFBQzBRLFlBQ0NJLE9BQUFBLElBQU0sQ0FDTkgsTUFBTSxTQUNOQyxLQUFLLFFBQ0xDLFFBQVMsSUFBTUosU0FBUzBCLFNBQVMsQ0FBQ0YsSUFBSWpTLElBQUksS0FHOUMsb0JBQUNrUyxPQUFJcEMsVUFBVSxzQkFDYixvQkFBQ25DLE1BQUttQyxVQUFVLG9CQUFvQm1DLElBQUl2TSxJQUFJLEdBRTdDdU0sSUFBSUcsV0FBVyxFQUFJLElBQUksRUFDdEIsb0JBQUN6RSxNQUFLbUMsVUFBVSxvQkFDZCxvQkFBQ3RDLGNBQVV5RSxJQUFJRyxXQUFXLEdBRzlCLG9CQUFDRixPQUFJcEMsVUFBVSxpQkFDYixvQkFBQ3dCLGVBQ0M3SyxNQUFPd0wsSUFBSUksT0FBTyxDQUNsQkEsUUFBU0osSUFBSUksT0FBTyxDQUNwQmIsU0FBVVMsSUFBSTVNLEVBQUUsR0FBSyxrQkFDckJrTSxTQUFVLE9BQW9CLENBQzVCLEdBQUksQ0FBQzlLLE1BQU8rSixPQUFPOEIsUUFBUSxDQUFDQyxXQUFXLENBQUNOLElBQUk1TSxFQUFFLE9BQ3pDbUwsT0FBTzhCLFFBQVEsQ0FBQ0UsWUFBWSxDQUFDUCxJQUFJNU0sRUFBRSxDQUFFLEtBTXRELEM7O0FDdkZBLE1BQU1tTCxZQUFNQSxDQUFRLE9BQWdCQSxNQUFNLENBRTNCLFNBQVNpQyxhQUFjLENBQ2xDLEtBQU0sQ0FBQ3BFLFNBQVMsQ0FBQyxDQUFHaEIsT0FBaUJBLENBRXJDLE9BQ0ksb0JBQUM2RSxPQUFJcEMsVUFBVSxnQkFDWCxvQkFBQ3pCLFdBQVVxRSxJQUFLckUsVUFBVUMsSUFBSSxDQUFDcUUsRUFBRSxFQUFFLFlBQ25DLG9CQUFDVCxPQUFJcEMsVUFBVSx3QkFDVmpPLE9BQU8rUSxNQUFNLENBQU1wQyxZQUFNQSxDQUFDOEIsUUFBUSxDQUFDTyxXQUFXLElBQUl4RyxHQUFHLENBQUM0RixLQUNuRCxvQkFBQ0QsVUFBVUEsRUFBQ0MsSUFBS0EsSUFBSzVMLElBQUs0TCxJQUFJNU0sRUFBRSxFQUFJNE0sSUFBSXZNLElBQUksS0FLakUsQzs7QUNoQkEsTUFBTW9OLGVBQWlCNU0sT0FBT0EsQ0FBQyxDQUMzQixJQUFJNk0sUUFBUyxDQUFDLE9BQU8zRixtQkFBbUIsQ0FBQyxtQkFBb0IsQ0FDakUsRUFFQSx1REFBZTBGLGNBQWUsRTs7QUNQZixTQUFTRSxTQUFrQmpQLE9BQW1DLENBQUVrUCxRQUFxQyxDQUFFLENBQ2xILE9BQU8sU0FBU0MsY0FBY3pMLEtBQVEsQ0FBRSxDQUNwQyxLQUFNLENBQUN6RCxNQUFPQyxTQUFTLENBQUdDLE1BQU1DLFFBQVEsQ0FBQyxDQUFDZ1AsU0FBVSxLQUFLLENBQUUxTSxNQUFPLEtBQUssQ0FBQyxHQUV4RXZDLE1BQU1FLFNBQVMsQ0FBQyxJQUFNLENBQ2xCLEdBQUlKLE1BQU1tUCxRQUFRLENBQUUsTUFBTyxDQUUzQnBQLFFBQVEwRCxPQUFPbUIsSUFBSSxDQUFDLE9BQVcsQ0FDM0IzRSxTQUFTLENBQUN3QyxNQUFPME0sU0FBVSxJQUFJLEVBQ25DLEVBQ0osRUFBRyxDQUFDblAsTUFBTSxFQUVWLE9BQU9BLE1BQU1tUCxRQUFRLENBQUduUCxNQUFNeUMsS0FBSyxDQUFHdkMsTUFBTW5DLGFBQWEsQ0FBQ2tSLFNBQVV4TCxNQUFNLENBRWxGLEM7O0FDZEEsTUFBTTJMLE9BQVMsWUFDZixNQUFNQyxhQUFlLENBQUMsT0FBUSxhQUFjLFNBQVUsT0FBUSxVQUFVLENBQ3hFLE1BQU1DLFdBQWEsQ0FBQyxRQUFTLE9BQU8sQ0FFcEMsTUFBTUMsY0FBZ0J6VCxlQUFlQyxhQUFhLENBQUMsZ0JBVW5ELENBQWUsTUFBTXlULElBQ2pCLE9BQU9DLFdBQVdDLEdBQVcsQ0FBRUMsR0FBWSxDQUFtQixDQUMxRCxPQUFPLElBQUk5SyxRQUFRLENBQUN0SCxRQUFTcVMsU0FBVyxDQUNwQ0wsY0FBY00sSUFBSSxDQUFDSCxJQUFLLENBQUNDLEdBQUcsRUFBRyxDQUFDL1QsTUFBT2tVLFNBQVcsQ0FDOUMsR0FBSWxVLE1BQU8sT0FBT2dVLE9BQU9oVSxNQUFPLENBQ2hDMkIsUUFBUXVTLE9BQ1osRUFDSixFQUNKLENBRUEsYUFBYUMsYUFBZ0MsQ0FDekMsR0FBSSxDQUNBLE1BQU0sSUFBSSxDQUFDTixVQUFVLENBQUMsaUJBQ3RCLE9BQU8sSUFBSSxDQUNiLEtBQU0sQ0FDSixPQUFPLEtBQUssQ0FFcEIsQ0FFQSxhQUFhTyxPQUFPTCxHQUFXLENBQW9CLENBQy9DLEdBQUksQ0FDQSxNQUFNTSxPQUFTLE1BQU0sSUFBSSxDQUFDUixVQUFVLENBQUMsc0NBQXVDRSxLQUU1RSxPQUFPTSxTQUFXLE1BQ3RCLENBQUUsS0FBTSxDQUNKLE9BQU8sS0FBSyxDQUVwQixDQUVBLGFBQWFDLGNBQWNQLEdBQVcsQ0FBbUIsQ0FDckQsR0FBSSxDQUNBLE1BQU1NLE9BQVMsTUFBTSxJQUFJLENBQUNSLFVBQVUsQ0FBQyxnQkFBaUJFLEtBQ3RELEdBQUksQ0FBQ00sT0FBUSxPQUFPLElBQUksQ0FFeEIsT0FBT0EsT0FBT2pQLEtBQUssQ0FBQyxFQUFHaVAsT0FBT2hQLE9BQU8sQ0FBQyxNQUMxQyxDQUFFLE1BQU9yRixNQUFPLENBQ1pKLFFBQVFJLEtBQUssQ0FBQ0EsT0FDZCxPQUFPLElBQUksQ0FFbkIsQ0FFQSxhQUFhdVUsZ0JBQWdCUixHQUFXLENBQUVTLE9BQWlCLFFBQVEsQ0FBZ0UsQ0FDL0gsR0FBSSxDQUNBLE9BQU8sSUFBSSxDQUFDQyxZQUFZLENBQUNmLFdBQVksTUFBTSxJQUFJLENBQUNHLFVBQVUsQ0FBQyxDQUFDLFdBQVcsRUFBRVcsT0FBTyxvQkFBb0IsRUFBRWhCLE9BQU8sR0FBRyxDQUFDLENBQUVPLEtBQ3ZILENBQUUsTUFBTy9ULE1BQU8sQ0FDWkosUUFBUUksS0FBSyxDQUFDQSxPQUNkLE1BQU8sQ0FBQ2dNLFNBQVUsSUFBSSxDQUMxQixDQUNKLENBRUEsYUFBYTBJLFFBQVFYLEdBQVcsQ0FBRVMsT0FBaUIsUUFBUSxDQUFxQixDQUM1RSxHQUFJLENBQ0EsTUFBTUgsT0FBUyxNQUFNLElBQUksQ0FBQ1IsVUFBVSxDQUFDLENBQUMsUUFBUSxFQUFFVyxPQUFPLFNBQVMsRUFBRUEsT0FBTyxvQkFBb0IsRUFBRWhCLE9BQU8sRUFBRSxFQUFFQSxPQUFPLEdBQUcsRUFBRUEsT0FBTyxHQUFHLEVBQUVBLE9BQU8sR0FBRyxDQUFDLENBQUVPLEtBQy9JLEdBQUksQ0FBQ00sT0FBUSxNQUFPLEVBQUUsQ0FDdEIsT0FBT0EsT0FBTzFPLEtBQUssQ0FBQyxNQUFNOEcsR0FBRyxDQUFDa0ksR0FBSyxJQUFJLENBQUNGLFlBQVksQ0FBQ2hCLGFBQWNrQixHQUN2RSxDQUFFLE1BQU8zVSxNQUFPLENBQ1pKLFFBQVFJLEtBQUssQ0FBQ0EsT0FDZCxNQUFPLEVBQUUsQ0FFakIsQ0FFQSxPQUFPeVUsYUFBYUcsTUFBZ0IsQ0FBRUMsR0FBVyxDQUFFLENBQy9DLE9BQU81UyxPQUFPNlMsV0FBVyxDQUFDRCxJQUFJbFAsS0FBSyxDQUFDNk4sUUFBUS9HLEdBQUcsQ0FBQyxDQUFDUCxFQUFHeEksSUFBTSxDQUFDa1IsTUFBTSxDQUFDbFIsRUFBRSxDQUFFd0ksRUFBRSxFQUM1RSxDQUNKLEM7O0FDOUVPLFNBQVM2SSxLQUFLLENBQUNDLElBQUksQ0FBRUMsUUFBUSxDQUFFNUIsU0FBVyxJQUFJLENBQWlELENBQUUsQ0FDcEcsT0FBTzJCLEtBQU9DLFNBQVc1QixRQUFRLENBRzlCLFNBQVMxRixPQUFPLENBQUNzSCxRQUFRLENBQUVqTixRQUFTeEMsSUFBTSxJQUFJLENBQUMsQ0FBRSxDQUNwRCxPQUFPeVAsU0FBU0MsSUFBSSxDQUFDLE9BQWdCQyxPQUFPdE4sT0FBT21OLE9BQVN4UCxHQUNoRSxDQUVPLFNBQVM0UCxNQUFNLENBQUNKLElBQUksQ0FBRUMsUUFBUSxDQUFpQyxDQUFFLENBQ3BFLE9BQU9BLFFBQ1gsQ0FFTyxTQUFTSSxJQUFPLENBQUNDLElBQUksQ0FBRUwsUUFBUSxDQUF5RCxDQUFFLENBQzdGLE1BQU1aLE9BQVMsRUFBRSxDQUVqQixJQUFLLElBQUkzUSxFQUFJLEVBQUdBLEVBQUk0UixLQUFLM1IsTUFBTSxDQUFFRCxJQUFLLENBQ2xDMlEsT0FBT3hLLElBQUksQ0FBQ29MLFNBQVNLLElBQUksQ0FBQzVSLEVBQUUsQ0FBRUEsR0FDbEMsQ0FFQSxPQUFPLHdDQUFHMlEsT0FDZCxDOztBQ1RBLE1BQU1wVSxVQUFFQSxDQUFHQyxlQUFlQyxhQUFhLENBQUMsTUFFeEMsU0FBU29WLGNBQWlCcFIsT0FBZ0MsQ0FBRXFSLElBQVksQ0FBK0MsQ0FDbkgsS0FBTSxDQUFDcFIsTUFBT0MsU0FBUyxDQUFHQyxNQUFNQyxRQUFRLENBQUMsQ0FBQ2tSLE9BQVEsS0FBSyxDQUFFcEIsT0FBUSxJQUFJLEdBRXJFLE1BQU1xQixZQUFjLElBQU0sQ0FDdEJ6TSxRQUFRdEgsT0FBTyxDQUFDd0MsV0FBVzZFLElBQUksQ0FBQ3FMLFFBQVUsQ0FDdENoUSxTQUFTLENBQ0xvUixPQUFRLE9BQU9wQixTQUFXLFVBQVksSUFBSSxDQUFHLENBQUMsQ0FBQ0EsTUFBTSxDQUNyREEsT0FBUUEsTUFDWixFQUNKLEdBQUdzQixLQUFLLENBQUMvVixRQUFRSSxLQUFLLENBQzFCLEVBRUFzRSxNQUFNRSxTQUFTLENBQUNrUixZQUFhRixNQUFRLEVBQUUsRUFFdkMsTUFBTyxDQUNILEdBQUdwUixLQUFLLENBQ1J3UixPQUFRLENBQ0p2UixTQUFTLENBQUNvUixPQUFRLEtBQUssQ0FBRXBCLE9BQVEsSUFBSSxHQUNyQ3FCLGFBQ0osQ0FDSixDQUNKLENBRU8sTUFBTUcsZUFBaUIsSUFBTSxDQUNoQyxLQUFNLENBQUN6SCxPQUFPLENBQUMsQ0FBR1gsT0FBaUJBLENBRW5DLE9BQ0ksb0JBQUNXLFNBQVE1TyxLQUFNNE8sUUFBUUMsSUFBSSxDQUFDeUgsVUFBVSxDQUFFNUYsVUFBVSxlQUUxRCxDQUFFLENBRUssTUFBTTZGLGNBQWdCM0MsUUFBUUEsQ0FBQyxNQUFPLENBQUM0QyxTQUFTLENBQUMsR0FBSyxDQUN6RCxHQUFJLENBQUNBLFVBQVcsT0FBTyxJQUFJLENBRTNCLEtBQU0sQ0FBQ3hILElBQUksQ0FBQyxDQUFHZixPQUFpQkEsQ0FFaEMsTUFBTXdJLE9BQVMsTUFBTXJDLGlCQUFpQixDQUFDM1QsVUFBRUEsQ0FBQzJCLE9BQU8sRUFFakQsT0FDSSxvQkFBQzRNLE1BQUswSCxLQUFNLENBQUMsa0RBQWtELEVBQUVELE9BQU8sQ0FBQyxFQUFHQSxPQUVwRixFQUFHSixlQUFnQixDQUVaLE1BQU1NLGtCQUFvQi9DLFFBQVFBLENBQUMsTUFBTyxDQUFDNEMsU0FBUyxDQUFDLEdBQUssQ0FDN0QsR0FBSSxDQUFDQSxVQUFXLE9BQU8sSUFBSSxDQUUzQixLQUFNLENBQUNqSSxJQUFJLENBQUVTLElBQUksQ0FBQyxDQUFHZixPQUFpQkEsQ0FDdEMsTUFBTTJJLEtBQVksTUFBTXhDLG1CQUFtQixDQUFDM1QsVUFBRUEsQ0FBQzJCLE9BQU8sQ0FBRSxNQUFNZ1MsaUJBQWlCLENBQUMzVCxVQUFFQSxDQUFDMkIsT0FBTyxHQUUxRixHQUFJd1UsS0FBS3BLLFFBQVEsQ0FBRSxPQUNmLG9CQUFDK0IsTUFBSzBELE1BQU8xRCxLQUFLRyxNQUFNLENBQUNtSSxHQUFHLEVBQUUsUUFDaEMsQ0FFRixPQUNJLG9CQUFDN0gsTUFBSzBILEtBQU0sQ0FBQyxrREFBa0QsRUFBRUUsS0FBS0UsSUFBSSxDQUFDLENBQUMsRUFBR0YsS0FBS0csS0FBSyxDQUVqRyxFQUFHVixlQUFnQixDQUVuQixJQUFJVyxZQUFjLEtBQUssQ0FDUixTQUFTQyxjQUFlLENBQ25DLEtBQU0sQ0FBQ3RELE1BQU0sQ0FBQyxDQUFHRCxlQUFjQSxDQUMvQixLQUFNLENBQUN3RCxhQUFjQyxTQUFTLENBQUdyUyxNQUFNQyxRQUFRLENBQUMsSUFBSSxFQUNwRCxLQUFNLENBQUNpSyxJQUFJLENBQUVkLE1BQU0sQ0FBRUssSUFBSSxDQUFFUSxJQUFJLENBQUVFLFNBQVMsQ0FBRUUsVUFBVSxDQUFFRSxXQUFXLENBQUVFLFFBQVEsQ0FBRVgsT0FBTyxDQUFDLENBQUdYLE9BQWlCQSxDQUMzRyxNQUFNbUosSUFBTXJCLGNBQXVCLElBQU0zQixlQUFlLElBQ3hELE1BQU1pRCxRQUFVdEIsY0FBd0IsU0FBWSxDQUNoRCxHQUFJLENBQUNxQixJQUFJbkIsTUFBTSxFQUFJLENBQUNtQixJQUFJdkMsTUFBTSxDQUFFLE1BQU8sRUFBRSxDQUV6QyxPQUFPVCxXQUFXLENBQUMzVCxVQUFFQSxDQUFDMkIsT0FBTyxDQUNqQyxFQUFHLENBQUNnVixJQUFJbkIsTUFBTSxDQUFDLEVBQ2YsTUFBTXFCLFdBQWEzRCxPQUFPbFEsV0FBVyxDQUFDLElBQU1BLFdBQVcsQ0FBQyxvQkFBcUIsSUFBSThULFFBRWpGLE9BQ0ksb0JBQUN6RSxPQUFJcEMsVUFBVSxnQkFDWCxvQkFBQ3pCLFdBQVVxRSxJQUFLckUsVUFBVUMsSUFBSSxDQUFDcUUsRUFBRSxFQUFFLFdBQ25DLG9CQUFDZ0MsSUFBSUEsRUFBQ0MsS0FBTTRCLElBQUluQixNQUFNLENBQUVwQyxTQUFVLG9CQUFDakYsU0FBUTVPLEtBQU00TyxRQUFRQyxJQUFJLENBQUMySSxlQUFlLElBQ3pFLG9CQUFDakMsSUFBSUEsRUFBQ0MsS0FBTSxDQUFDNEIsSUFBSXZDLE1BQU0sRUFDbkIsb0JBQUMxRixZQUNHblAsS0FBTW1QLFdBQVdDLEtBQUssQ0FBQ3FJLE1BQU0sQ0FDN0IvRyxVQUFVLG9CQUNWZ0gsTUFBTSw4QkFDTkMsVUFBVyxDQUFDQyxJQUFLLCtDQUFnRGpJLE1BQU8sR0FBSUMsT0FBUSxFQUFFLEVBQ3RGaUksS0FBTSxvQkFBQ0MsWUFBSyw4R0FHcEIsb0JBQUN2QyxJQUFJQSxFQUFDQyxLQUFNMEIsY0FBZ0IsSUFBSSxFQUM1QixvQkFBQy9ILFlBQ0duUCxLQUFNbVAsV0FBV0MsS0FBSyxDQUFDcUksTUFBTSxDQUM3Qi9HLFVBQVUsb0JBQ1ZnSCxNQUFNLGlCQUNOQyxVQUFXLENBQUNDLElBQUssK0NBQWdEakksTUFBTyxHQUFJQyxPQUFRLEVBQUUsRUFDdEZpSSxLQUFNLG9CQUFDQyxZQUFNWixpQkFHckIsb0JBQUMzQixJQUFJQSxFQUFDQyxLQUFNMEIsY0FBZ0IsSUFBSSxFQUFJRixhQUNoQyxvQkFBQzdILFlBQ0duUCxLQUFNbVAsV0FBV0MsS0FBSyxDQUFDbUIsT0FBTyxDQUM5QkcsVUFBVSxvQkFDVmdILE1BQU0sa0JBQ05DLFVBQVcsQ0FBQ0MsSUFBSywrQ0FBZ0RqSSxNQUFPLEdBQUlDLE9BQVEsRUFBRSxFQUN0RmlJLEtBQU0sb0JBQUNDLFlBQUssc0VBR3BCLG9CQUFDdkMsSUFBSUEsRUFBQ0MsS0FBTTRCLElBQUl2QyxNQUFNLEVBQ2xCLG9CQUFDOUYsTUFBSzJCLFVBQVUsV0FBV3FILFVBQVdoSixLQUFLaUosU0FBUyxDQUFDQyxRQUFRLEVBQ3pELG9CQUFDbEosTUFBS21KLFFBQVNuSixLQUFLb0osT0FBTyxDQUFDQyxPQUFPLENBQUVDLE1BQU90SixLQUFLdUosS0FBSyxDQUFDQyxNQUFNLEVBQ3pELG9CQUFDeEosTUFBSzJCLFVBQVUsdUJBQXVCcUgsVUFBV2hKLEtBQUtpSixTQUFTLENBQUNRLFVBQVUsQ0FBRUgsTUFBT3RKLEtBQUt1SixLQUFLLENBQUNHLEtBQUssQ0FBRVAsUUFBU25KLEtBQUtvSixPQUFPLENBQUNJLE1BQU0sRUFDOUgsb0JBQUNoRCxJQUFJQSxFQUNEQyxLQUFNNkIsUUFBUXBCLE1BQU0sQ0FDcEJwQyxTQUNJLG9CQUFDcEQsZUFBZUEsRUFDWmQsTUFBTSxLQUNOQyxPQUFPLEtBQ1BjLFVBQVUsb0NBSWxCLG9CQUFDRixNQUFNQSxFQUNIeFEsS0FBTXFYLFFBQVF4QyxNQUFNLEVBQUUxUSxPQUFTLEVBQUlxTSxvQkFBb0IsQ0FBR0EscUJBQXFCLENBQy9FYixNQUFNLEtBQ05DLE9BQU8sS0FDUGMsVUFBVyxDQUFDLFdBQVcsRUFBRTJHLFFBQVF4QyxNQUFNLEVBQUUxUSxPQUFTLEVBQUksa0JBQW9CLGVBQWUsQ0FBQyxDQUFDLElBR25HLG9CQUFDNEssS0FBSzJKLEtBQUssTUFDUCxvQkFBQ25LLE1BQUs0QyxLQUFNNUMsS0FBS0MsS0FBSyxDQUFDQyxPQUFPLENBQUV3RCxNQUFPMUQsS0FBS0csTUFBTSxDQUFDaUssY0FBYyxFQUM3RCxvQkFBQ3hLLE1BQU1BLEVBQUMzRixRQUFRLDZCQUNaLG9CQUFDb04sS0FBS0EsRUFBQ0osS0FBTSxDQUFDNkIsUUFBUXBCLE1BQU0sRUFBRSxjQUc5QixvQkFBQ0wsS0FBS0EsRUFBQ0osS0FBTTZCLFFBQVF4QyxNQUFNLEVBQUUxUSxPQUFTLEdBQUcsb0NBS2pELG9CQUFDb0ssTUFBSzRDLEtBQU01QyxLQUFLQyxLQUFLLENBQUNvSyxPQUFPLENBQUUzRyxNQUFPMUQsS0FBS0csTUFBTSxDQUFDbUssZ0JBQWdCLEVBQUUsaUJBQ2xEdkIsV0FBV3dCLFFBQVEsTUFJOUMsb0JBQUNoRyxPQUFJcEMsVUFBVSxnQkFDWCxvQkFBQ25DLE1BQUttQyxVQUFVLHFCQUFvQixXQUFRLG9CQUFDNkYsZUFBY0MsVUFBVyxDQUFDLENBQUNZLElBQUl2QyxNQUFNLElBQ2xGLG9CQUFDdEcsTUFBS21DLFVBQVUscUJBQW9CLFdBQVEsb0JBQUNpRyxtQkFBa0JILFVBQVcsQ0FBQyxDQUFDWSxJQUFJdkMsTUFBTSxNQUc5RixvQkFBQ3hGLGFBQVlxQixVQUFVLGdCQUN2QixvQkFBQzNCLE1BQUtnSixVQUFXaEosS0FBS2lKLFNBQVMsQ0FBQ1EsVUFBVSxFQUN0QyxvQkFBQ3RLLFFBQ0drRSxTQUFVLENBQUNpRixRQUFRcEIsTUFBTSxDQUN6QmhFLE1BQU8vRCxPQUFPUSxNQUFNLENBQUNxSyxLQUFLLENBQzFCNUgsS0FBTWpELE9BQU9NLEtBQUssQ0FBQ3dLLEtBQUssQ0FDeEJ0SSxVQUFVLGFBQ1ZlLFFBQVMsSUFBTSxDQUNYNEYsUUFBUWpCLEtBQUssR0FDYjNTLFdBQVcsQ0FBQyxvQkFBcUIsSUFBSThULEtBQ3pDLEdBQ0gscUJBQ0Qsb0JBQUNoQyxJQUFJQSxFQUFDQyxLQUFNNkIsUUFBUXhDLE1BQU0sRUFBRTFRLE9BQVMsR0FDakMsb0JBQUMrSixRQUNHa0UsU0FBVSxDQUFDaUYsUUFBUXBCLE1BQU0sQ0FDekJoRSxNQUFPL0QsT0FBT1EsTUFBTSxDQUFDdUssTUFBTSxDQUMzQjlILEtBQU1qRCxPQUFPTSxLQUFLLENBQUN3SyxLQUFLLENBQ3hCdEksVUFBVSxhQUNWZSxRQUFTLElBQU0sQ0FDWDJDLGNBQWMsQ0FBQyxXQUFZM1QsVUFBRUEsQ0FBQzJCLE9BQU8sRUFDaENvSCxJQUFJLENBQUMsSUFBTSxDQUNSd04sWUFBYyxJQUFJLENBQ2xCSyxRQUFRakIsS0FBSyxFQUNqQixHQUNDRCxLQUFLLENBQUMzVixPQUFTLENBQ1pWLFlBQVksQ0FBQyxVQUFXLG9CQUFxQlUsT0FDN0MyVyxTQUFTLGtIQUNiLEVBQ1IsR0FDSCxXQUVMLG9CQUFDNUIsSUFBSUEsRUFBQ0MsS0FBTXdCLGFBQ1Isb0JBQUM5SSxRQUNHK0QsTUFBTy9ELE9BQU9RLE1BQU0sQ0FBQ3dLLEtBQUssQ0FDMUIvSCxLQUFNakQsT0FBT00sS0FBSyxDQUFDd0ssS0FBSyxDQUN4QnRJLFVBQVUsK0JBQ1ZlLFFBQVMsSUFBTSxDQUNYbFEsT0FBT3FDLFFBQVEsQ0FBQ1osTUFBTSxFQUMxQixHQUNILFVBQU8sb0JBQUN5TixlQUFlQSxVQUdoQyxvQkFBQzhFLElBQUlBLEVBQUNDLEtBQU02QixRQUFReEMsTUFBTSxFQUFFMVEsT0FBUyxHQUNqQyxvQkFBQ2tMLGFBQVlxQixVQUFVLGdCQUN2QixvQkFBQ25CLFVBQVNtSSxNQUFNLGlCQUFpQnBFLElBQUksTUFDakMsb0JBQUN1QyxHQUFHQSxFQUFDQyxLQUFNdUIsUUFBUXhDLE1BQU0sRUFDcEIsQ0FBQ3NFLE9BQVF0UixRQUNOLG9CQUFDaUwsT0FBSXBDLFVBQVUsYUFBYXpKLElBQUtZLE9BQzdCLG9CQUFDaVEsUUFBS3BILFVBQVUsbUJBQ1osb0JBQUMxQixNQUFLMEgsS0FBTSxDQUFDLG9EQUFvRCxFQUFFeUMsT0FBT3ZDLElBQUksQ0FBQyxDQUFDLEVBQUd1QyxPQUFPQyxVQUFVLEdBRXhHLG9CQUFDdEIsUUFBS3BILFVBQVUsbUJBQW1CeUksT0FBT2haLE9BQU8sRUFDakQsb0JBQUMyWCxRQUFLcEgsVUFBVSwyQkFBMEIsUUFDMUMsb0JBQUNvSCxRQUFLcEgsVUFBVSxxQkFDWixvQkFBQzJJLE9BQUkzSSxVQUFVLDJCQUEyQmtILElBQUssQ0FBQyxtQkFBbUIsRUFBRXVCLE9BQU9HLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FDaEcsb0JBQUN4QixRQUFLcEgsVUFBVSwwQkFBMEJ5SSxPQUFPRyxNQUFNLFVBWXZHLEM7O0FDaE9PLElBQVVDLE9BMENoQixvQkF6Q0csTUFBTUMsUUFBVSxJQUFJN1YsSUFJYixTQUFTOFYsTUFBTXZaLE1BQVcsQ0FBRXdaLElBQVksQ0FBRXpSLFFBQXlCLENBQUUwUixPQUFTLEtBQUssQ0FBRSxDQUN4RixNQUFNQyxTQUFXMVosTUFBTSxDQUFDd1osS0FBSyxDQUM3QixNQUFNRyxRQUFVLElBQU0sQ0FBQzNaLE1BQU0sQ0FBQ3daLEtBQUssQ0FBR0UsUUFBUyxDQUUvQzFaLENBQUFBLE1BQU0sQ0FBQ3daLEtBQUssQ0FBRyxVQUFZLENBQ3ZCLEdBQUlDLE9BQVEsQ0FDUixHQUFJLENBQ0FHLFFBQVFsUCxLQUFLLENBQUMzQyxTQUFVLElBQUksQ0FBRThSLFVBQ2xDLENBQUUsTUFBT3ZaLE1BQU8sQ0FDWkosUUFBUUksS0FBSyxDQUFDLDhDQUErQ0EsTUFDakUsQ0FDSixDQUFDLElBRUcwTSxZQUFjNE0sUUFBUWxQLEtBQUssQ0FBQ2dQLFNBQVUsSUFBSSxDQUFFRyxXQUNoRCxHQUFJSixPQUFRLE9BQU96TSxXQUFZLENBRS9CLEdBQUksQ0FDQSxNQUFNOE0sUUFBVUYsUUFBUWxQLEtBQUssQ0FBQzNDLFNBQVUsSUFBSSxDQUFFLENBQUM4UixVQUFXN00sWUFBWSxFQUN0RSxHQUFJOE0sU0FBVyxJQUFJLENBQUU5TSxZQUFjOE0sT0FBUSxDQUM3QyxNQUFPeFosT0FBTyxDQUNaSixRQUFRSSxLQUFLLENBQUMsdUNBQXdDQSxPQUMxRCxDQUVBLE9BQU8wTSxXQUNYLEVBQ0F6SyxPQUFPQyxNQUFNLENBQUN4QyxNQUFNLENBQUN3WixLQUFLLENBQUVFLFNBQVUsQ0FDbENoUixVQUFXLENBQUMsT0FBT2dSLFNBQVNoUixRQUFRLEVBQUUsQ0FDMUMsR0FFQTRRLFFBQVFsVixHQUFHLENBQUN1VixTQUVaLE9BQU9BLE9BQ1gsU0FoQ2dCSixNQUFBQSxNQWtDVCxTQUFTUSxZQUFhLENBQ3pCLElBQUssTUFBTUosV0FBV0wsUUFBU0ssU0FDbkMsU0FGZ0JJLFdBQUFBLGFBdkNIVixVQUFBQSxhOztBQ0lqQixNQUFNalksSUFBTUMsTUFFWixDQUFPLElBQVUyWSxnQkFvRWhCLDhCQW5FRyxJQUFJQyxZQUFjLEtBQUssS0FzQlZDLHlCQUFBQSxPQUFvQjlZLEdBQUcsQ0FBQyw0QkFBNEIsRUFBSSxDQUNqRSxDQUFDK1ksUUFBUyxTQUFTLEVBQ25CLENBQUNBLFFBQVMsU0FBVTlJLE1BQU8sU0FBVXRMLEdBQUksaUJBQWlCLEVBQzdELENBRU0sU0FBU3FVLFNBQVNoVSxJQUFZLENBQUUrSCxNQUFpRCxDQUFFLENBQ3RGLE1BQU1rTSxNQUFRLENBQ1ZGLFFBQVMsQ0FBQyxPQUFPLEVBQUUvVCxLQUFLLENBQUMsQ0FDekJpTCxNQUFPakwsS0FDUEwsR0FBSSxDQUFDLGdCQUFnQixFQUFFSyxLQUFLLENBQUMsQ0FDN0JvSyxVQUFXLENBQUMsZUFBZSxDQUFDLENBQzVCOEosUUFBUyxPQUFPbk0sU0FBVyxXQUFhQSxPQUFTQSxPQUFPQSxNQUFNLENBQzlELEdBQUksT0FBT0EsU0FBVyxTQUFXQSxPQUFTLENBQUMsQ0FBQyxFQUdoRDZMLGlCQUFpQkUsTUFBTSxDQUFDL1AsSUFBSSxDQUFDa1EsT0FDN0JMLGlCQUFpQkUsTUFBTSxDQUFDSyxJQUFJLENBQUMsQ0FBQ0MsRUFBR0MsSUFBTUQsRUFBRUUsS0FBSyxDQUFHRCxFQUFFQyxLQUFLLEVBRXhELE1BQU8sSUFBTSxDQUNULE1BQU0vUyxNQUFRcVMsaUJBQWlCRSxNQUFNLENBQUN2VSxPQUFPLENBQUMwVSxPQUM5QyxHQUFJMVMsTUFBUSxFQUFHLE9BQU8sS0FBSyxDQUMzQnFTLGlCQUFpQkUsTUFBTSxDQUFDaE8sTUFBTSxDQUFDdkUsTUFBTyxHQUN0QyxPQUFPLElBQUksQ0FFbkIsbUJBbkJnQnlTLFNBQUFBLFNBcUJULGVBQWVqWixZQUE0QixDQUM5QyxHQUFJOFksWUFBYSxNQUFPLENBQ3hCQSxZQUFjLElBQUksQ0FFbEIsTUFBTVUsYUFBZSxNQUFNN00sZ0JBQWdCLENBQUNBLDJCQUEyQixDQUFDLHlCQUV4RSxHQUFJLENBQUMxTSxHQUFHLENBQUMsNEJBQTRCLENBQUVpWSxhQUFhLENBQUNzQixhQUFhbFQsU0FBUyxDQUFFLHVCQUF3QixTQUFVbVQsQ0FBQyxDQUFFbFAsR0FBRyxDQUFFLENBQ25ILEdBQUksQ0FBQ2xFLE1BQU1xRSxPQUFPLENBQUNILE1BQVEsQ0FBQ0EsSUFBSW1QLElBQUksQ0FBQ0MsR0FBS0EsR0FBR1gsU0FBU1ksZ0JBQWtCLGNBQWdCclAsSUFBSW1QLElBQUksQ0FBQ0csR0FBS0EsR0FBR2pWLEtBQU8sbUJBQW9CLE1BQU8sQ0FFM0ksTUFBTTRCLE1BQVErRCxJQUFJNkIsU0FBUyxDQUFDeU4sR0FBS0EsR0FBR2IsU0FBU1ksZ0JBQWtCLGFBQWUsRUFDOUUsR0FBSXBULE1BQVEsRUFBRyxNQUFPLENBRXRCK0QsSUFBSVEsTUFBTSxDQUFDdkUsTUFBTyxLQUFNcVMsaUJBQWlCRSxNQUFNLENBQ25ELEVBQUcsQ0FFSHhhLHVCQUF1QixDQUFDLGNBQWUsSUFBTSxDQUN6QzBCLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBRzhZLE1BQ3ZDLEVBQ0osbUJBbEJzQi9ZLFdBQUFBLGFBakRUNlksbUJBQUFBLHNCOztBQ09qQixNQUFNelosV0FBRUEsQ0FBR0MsZUFBZUMsYUFBYSxDQUFDLE1BQ3hDLE1BQU1DLGFBQUlBLENBQUdGLGVBQWVDLGFBQWEsQ0FBQyxPQUUxQyxDQUFPLElBQVV5YSxJQW1GaEIsaUJBbEZHLElBQUlDLGFBQXdCLElBQUksQ0FFekIsZUFBZUMsT0FBdUIsQ0FDekMsTUFBTXROLGlCQUFpQixDQUN2QmxPLFVBQVUsQ0FBQyxPQUFRLFdBRW5CLENBQUN5QixPQUFldUQsS0FBSyxDQUFHa0osbUJBQW1CLENBQUMsZ0JBQWlCLGFBRTdELEdBQUl1TixLQUE4QixDQUFFMWEsRUFDcENxWiwyQkFBMkIsR0FDM0JzQixtQkFDQS9YLGtCQUFrQixHQUVsQmdZLGFBQ0FDLGVBQ0osTUFic0JKLE1BQUFBLE1BZWYsU0FBU0Usa0JBQXlCLENBQ3JDLElBQUlHLE1BQVEsQ0FDUnpCLHlCQUF5QixDQUFDLFVBQVcsQ0FDakM3TCxPQUFRLElBQU0sb0JBQUM0SSxZQUFZQSxPQUMzQjJELE1BQU8sQ0FDWCxHQUNBVix5QkFBeUIsQ0FBQyxXQUFZLENBQ2xDN0wsT0FBUSxJQUFNLG9CQUFDZ0YsV0FBV0EsT0FDMUJ1SCxNQUFPLENBQ1gsR0FDSCxDQUVEaGIsdUJBQXVCLENBQUMsY0FBZSxJQUFNLENBQ3pDLElBQUssSUFBSXNFLEVBQUksRUFBR0EsRUFBSXlYLE1BQU14WCxNQUFNLENBQUVELElBQUssQ0FDbkN5WCxLQUFLLENBQUN6WCxFQUFFLEVBQ1osQ0FDSixFQUNKLE1BakJnQnNYLGlCQUFBQSxpQkFtQlQsU0FBU0UsZUFBc0IsQ0FDbEMsTUFBTS9SLFdBQWFxRSxtQkFBbUIsQ0FBQyxZQUFhLFlBRXBEdkwsT0FBT21aLGdCQUFnQixDQUFDcmEsT0FBUSxDQUM1QnNhLGVBQWdCLENBQ1p4VSxNQUFPNUUsT0FBT3FaLE1BQU0sQ0FBQzVCLGdCQUFnQkEsRUFDckMxUyxhQUFjLElBQUksQ0FDbEJ1RCxTQUFVLElBQUksRUFFbEJnUixjQUFlLENBQ1gxVSxNQUFPNUUsT0FBT3FaLE1BQU0sQ0FBQ3JZLE9BQU9BLEVBQzVCK0QsYUFBYyxJQUFJLENBQ2xCdUQsU0FBVSxJQUFJLENBRXRCLEdBRUFwQixXQUFXSSxJQUFJLENBQUMsSUFBTUosV0FBV3FTLFFBQVEsQ0FBQyxDQUFDaGMsS0FBTSxzQkFBc0IsR0FDM0UsTUFqQmdCMGIsY0FBQUEsY0FtQlQsU0FBU0QsWUFBbUIsQ0FDL0IsTUFBTTdYLFNBQVdoRCxhQUFJQSxDQUFDdUIsT0FBTyxDQUFDMUIsV0FBRUEsQ0FBQzJCLE9BQU8sQ0FBRSxhQUMxQyxHQUFJLENBQUMzQixXQUFFQSxDQUFDZ0YsTUFBTSxDQUFDN0IsVUFBVyxNQUFNLENBRWhDLE1BQU1xWSxLQUFPLFVBQVksQ0FDckIsTUFBTUMsT0FBU3piLFdBQUVBLENBQUN5QixRQUFRLENBQUMwQixTQUFVLFFBRXJDeVgsYUFBZS9ZLFNBQVNDLElBQUksQ0FBQ0MsV0FBVyxDQUNwQ0MsT0FBT0MsTUFBTSxDQUFDSixTQUFTSyxhQUFhLENBQUMsU0FBVSxDQUMzQ3NELEdBQUksZUFDSnJELFlBQWFzWixNQUNqQixHQUVSLEVBQ0FELE9BRUFyYyx1QkFBdUIsQ0FBQyxhQUFjLElBQU0sQ0FDeEN5YixhQUFhdlksTUFBTSxHQUNuQm1aLE9BQ0FuYyxVQUFVLENBQUMsU0FBVSxZQUN6QixFQUNKLE1BckJnQjJiLFdBQUFBLFdBdUJULFNBQVNVLE1BQWEsQ0FDekI1QyxrQkFBa0IsR0FDbEI4QixjQUFjdlksUUFDbEIsTUFIZ0JxWixLQUFBQSxPQS9FSGYsT0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rZXJuZWwtc2V0dGluZ3MvLi9zcmMvcmVuZGVyZXIvbW9kdWxlcy9ldmVudHMudHM/YzBmMSIsIndlYnBhY2s6Ly9rZXJuZWwtc2V0dGluZ3MvLi9zcmMvcmVuZGVyZXIvbW9kdWxlcy9sb2dnZXIudHM/NjRlNiIsIndlYnBhY2s6Ly9rZXJuZWwtc2V0dGluZ3MvLi9zcmMvcmVuZGVyZXIvbW9kdWxlcy9kZXZzZXJ2ZXIudHM/ODdmYiIsIndlYnBhY2s6Ly9rZXJuZWwtc2V0dGluZ3MvLi9zcmMvcmVuZGVyZXIvbW9kdWxlcy9zdG9yYWdlLnRzPzBmMDYiLCJ3ZWJwYWNrOi8va2VybmVsLXNldHRpbmdzLy4vc3JjL3JlbmRlcmVyL21vZHVsZXMvbWVtb2l6ZS50cz8wZDQ0Iiwid2VicGFjazovL2tlcm5lbC1zZXR0aW5ncy8uL3NyYy9yZW5kZXJlci9tb2R1bGVzL3dlYnBhY2sudHM/NTU4YSIsIndlYnBhY2s6Ly9rZXJuZWwtc2V0dGluZ3MvLi9zcmMvcmVuZGVyZXIvY29tcG9uZW50cy9kaXNjb3JkLnRzP2U0YWUiLCJ3ZWJwYWNrOi8va2VybmVsLXNldHRpbmdzLy4vc3JjL3JlbmRlcmVyL2NvbXBvbmVudHMvaWNvbnMvdHJhc2gudHN4PzYzMWQiLCJ3ZWJwYWNrOi8va2VybmVsLXNldHRpbmdzLy4vc3JjL3JlbmRlcmVyL2NvbXBvbmVudHMvaWNvbnMvZm9sZGVyLnRzeD9kOGVmIiwid2VicGFjazovL2tlcm5lbC1zZXR0aW5ncy8uL3NyYy9yZW5kZXJlci9jb21wb25lbnRzL2ljb25zL3NoaWVsZC50c3g/YzFlMyIsIndlYnBhY2s6Ly9rZXJuZWwtc2V0dGluZ3MvLi9zcmMvcmVuZGVyZXIvY29tcG9uZW50cy9pY29ucy91cGRhdGVfYXZhaWxhYmxlLnRzeD8yYzU4Iiwid2VicGFjazovL2tlcm5lbC1zZXR0aW5ncy8uL3NyYy9yZW5kZXJlci9jb21wb25lbnRzL2ljb25zL2luZGV4LnRzeD9jNzAyIiwid2VicGFjazovL2tlcm5lbC1zZXR0aW5ncy8uL3NyYy9yZW5kZXJlci9jb21wb25lbnRzL2NhcmQudHN4P2UyMmIiLCJ3ZWJwYWNrOi8va2VybmVsLXNldHRpbmdzLy4vc3JjL3JlbmRlcmVyL2NvbXBvbmVudHMvcGFuZWwudHN4P2JmZGUiLCJ3ZWJwYWNrOi8va2VybmVsLXNldHRpbmdzLy4vc3JjL3JlbmRlcmVyL21vZHVsZXMvZGlzY29yZC50cz9iM2M5Iiwid2VicGFjazovL2tlcm5lbC1zZXR0aW5ncy8uL3NyYy9yZW5kZXJlci9tb2R1bGVzL21ha2VsYXp5LnRzPzYyMDUiLCJ3ZWJwYWNrOi8va2VybmVsLXNldHRpbmdzLy4vc3JjL3JlbmRlcmVyL21vZHVsZXMvc2ltcGxlZ2l0LnRzPzRjNzIiLCJ3ZWJwYWNrOi8va2VybmVsLXNldHRpbmdzLy4vc3JjL3JlbmRlcmVyL2NvbXBvbmVudHMvcHJpbWl0aXZlcy50c3g/MDU4NCIsIndlYnBhY2s6Ly9rZXJuZWwtc2V0dGluZ3MvLi9zcmMvcmVuZGVyZXIvY29tcG9uZW50cy91cGRhdGVzLnRzeD84MmZhIiwid2VicGFjazovL2tlcm5lbC1zZXR0aW5ncy8uL3NyYy9yZW5kZXJlci9tb2R1bGVzL3BhdGNoZXIudHM/MTRhYiIsIndlYnBhY2s6Ly9rZXJuZWwtc2V0dGluZ3MvLi9zcmMvcmVuZGVyZXIvbW9kdWxlcy9zZXR0aW5ncy50cz83Y2E0Iiwid2VicGFjazovL2tlcm5lbC1zZXR0aW5ncy8uL3NyYy9yZW5kZXJlci9pbmRleC50c3g/ODhhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFdmVudHM6IEV2ZW50VGFyZ2V0ICYge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnQ6IFwicmVsb2FkLWNzc1wiIHwgXCJyZWxvYWQtY29yZVwiLCBsaXN0ZW5lcjogKGV2ZW50OiBFdmVudCkgPT4gdm9pZCwgb25jZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQ6IFwicmVsb2FkLWNzc1wiIHwgXCJyZWxvYWQtY29yZVwiLCBsaXN0ZW5lcjogKGV2ZW50OiBFdmVudCkgPT4gdm9pZCk6IHZvaWQ7XG59ID0gbmV3IEV2ZW50VGFyZ2V0KCk7XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50czsiLCJleHBvcnQgbmFtZXNwYWNlIExvZ2dlciB7XG4gICAgdHlwZSBUeXBlcyA9IFwibG9nXCIgfCBcIndhcm5cIiB8IFwiZXJyb3JcIiB8IFwiaW5mb1wiO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VUeXBlKHR5cGU6IFR5cGVzKTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbmZvXCI6XG4gICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBcImxvZ1wiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nTWVzc2FnZSh0eXBlOiBUeXBlcywgbW9kdWxlOiBTdHJpbmcsIC4uLm1lc3NhZ2U6IGFueVtdKTogdm9pZCB7XG4gICAgICAgIGNvbnNvbGVbcGFyc2VUeXBlKHR5cGUpXShgJWNbS2VybmVsU2V0dGluZ3NdJWMgJWNbJHttb2R1bGV9XSVjYCwgXCJjb2xvcjogI0E4RDQ2QjsgZm9udC13ZWlnaHQ6IDcwMDtcIiwgXCJcIiwgXCJjb2xvcjogI0E4RDQ2QlwiLCBcIlwiLCAuLi5tZXNzYWdlKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gbG9nKG1vZHVsZSwgLi4ubWVzc2FnZSkge2xvZ01lc3NhZ2UoXCJsb2dcIiwgbW9kdWxlLCAuLi5tZXNzYWdlKTt9XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGluZm8obW9kdWxlLCAuLi5tZXNzYWdlKSB7bG9nTWVzc2FnZShcImluZm9cIiwgbW9kdWxlLCAuLi5tZXNzYWdlKTt9XG4gICAgZXhwb3J0IGZ1bmN0aW9uIHdhcm4obW9kdWxlLCAuLi5tZXNzYWdlKSB7bG9nTWVzc2FnZShcIndhcm5cIiwgbW9kdWxlLCAuLi5tZXNzYWdlKTt9XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGVycm9yKG1vZHVsZSwgLi4ubWVzc2FnZSkge2xvZ01lc3NhZ2UoXCJlcnJvclwiLCBtb2R1bGUsIC4uLm1lc3NhZ2UpO31cbn0iLCJpbXBvcnQgRXZlbnRzIGZyb20gXCIuL2V2ZW50c1wiO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gXCIuL2xvZ2dlclwiO1xuXG5jb25zdCBmcyA9IFNldHRpbmdzTmF0aXZlLnJlcXVpcmVNb2R1bGUoXCJmc1wiKTtcbmNvbnN0IHBhdGggPSBTZXR0aW5nc05hdGl2ZS5yZXF1aXJlTW9kdWxlKFwicGF0aFwiKTtcblxuZXhwb3J0IG5hbWVzcGFjZSBEZXZTZXJ2ZXIge1xuICAgIGV4cG9ydCBsZXQgd3M6IFdlYlNvY2tldCA9IG51bGw7XG4gICAgZXhwb3J0IGxldCBleHBlY3RlZENsb3NlID0gZmFsc2U7XG5cbiAgICBjb25zdCB0cnlKU09OID0gZnVuY3Rpb24gKGpzb246IHN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNsb3NlKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXdzKSByZXR1cm47XG5cbiAgICAgICAgTG9nZ2VyLmxvZyhcIkRldlNlcnZlclwiLCBcIkNsb3NpbmcgV2ViU29ja2V0XCIpO1xuICAgICAgICBEZXZTZXJ2ZXIud3MgPSB3cyA9IG51bGw7XG4gICAgfTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB3aW4gPSB3aW5kb3cgYXMgYW55O1xuICAgICAgICBcbiAgICAgICAgaWYgKHdpbi5LZXJuZWxEZXZTZXJ2ZXIgJiYgd2luLktlcm5lbERldlNlcnZlci53cyAhPSBudWxsKSB7XG4gICAgICAgICAgICBMb2dnZXIubG9nKFwiRGV2U2VydmVyXCIsIFwiVGFraW5nIG92ZXIgc29ja2V0XCIpO1xuICAgICAgICAgICAgd3MgPSBEZXZTZXJ2ZXIud3MgPSB3aW4uS2VybmVsRGV2U2VydmVyLndzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTG9nZ2VyLmxvZyhcIkRldlNlcnZlclwiLCBcIkxvYWRpbmcgZGV2ZWxvcG1lbnQgc2VydmVyLi4uXCIpO1xuICAgICAgICAgICAgd3MgPSBEZXZTZXJ2ZXIud3MgPSBuZXcgV2ViU29ja2V0KFwid3M6Ly9sb2NhbGhvc3Q6NTY1NlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbi5LZXJuZWxEZXZTZXJ2ZXIgPSBEZXZTZXJ2ZXI7XG4gICAgICAgIHdzLm9ubWVzc2FnZSA9IGhhbmRsZU1lc3NhZ2U7XG4gICAgICAgIHdzLm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcihcIkRldlNlcnZlclwiLCBcIkZhdGFsIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgd3Mub25jbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIERldlNlcnZlci53cyA9IHdzID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghZXhwZWN0ZWRDbG9zZSkgTG9nZ2VyLmVycm9yKFwiRGV2U2VydmVyXCIsIFwiQ29ubmVjdGlvbiBjbG9zZWQuLi5cIik7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWxvYWRDb3JlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBMb2dnZXIubG9nKFwiRGV2U2VydmVyXCIsIFwiUmVsb2FkaW5nIGNvcmUuLi5cIik7XG5cbiAgICAgICAgRXZlbnRzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicmVsb2FkLWNvcmVcIikpO1xuXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUoZnMuY3VycmVudCwgXCJyZW5kZXJlci5qc1wiKSwgXCJ1dGY4XCIgYXMgYW55KTtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksIHtcbiAgICAgICAgICAgIHR5cGU6IFwibW9kdWxlXCIsXG4gICAgICAgICAgICB0ZXh0Q29udGVudDogY29udGVudCArIFwiO19fd2VicGFja19leHBvcnRzX19Db3JlLnN0YXJ0KCk7XCIsXG4gICAgICAgICAgICBvbmxvYWQ6ICgpID0+IHNjcmlwdC5yZW1vdmUoKVxuICAgICAgICB9KSk7XG4gICAgfTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiByZWxvYWRTdHlsZXMoKTogdm9pZCB7XG4gICAgICAgIEV2ZW50cy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInJlbG9hZC1jc3NcIikpO1xuICAgIH07XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVsb2FkKHR5cGU6IFwiYWxsXCIgfCBcImNvcmVcIiB8IFwic3R5bGVzXCIpOiB2b2lkIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiY29yZVwiOiB7XG4gICAgICAgICAgICAgICAgcmVsb2FkQ29yZSgpO1xuICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzdHlsZXNcIjoge1xuICAgICAgICAgICAgICAgIHJlbG9hZFN0eWxlcygpO1xuICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBleHBvcnQgY29uc3QgaGFuZGxlTWVzc2FnZSA9ICh7ZGF0YX0pID0+IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRyeUpTT04oZGF0YSk7XG4gICAgICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIExvZ2dlci5lcnJvcihcIkRldlNlcnZlclwiLCBcIlVuYWJsZSB0byBwYXJzZSBtZXNzYWdlOlwiLCBkYXRhKTtcblxuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2Uub3BlcmF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIFwiSEVMTE9cIjoge1xuICAgICAgICAgICAgICAgIHNlbmQoXCJIRUxMT1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudDogYERpc2NvcmQtPiR7KHdpbmRvdyBhcyBhbnkpLkRpc2NvcmROYXRpdmUuYXBwLmdldFJlbGVhc2VDaGFubmVsKCl9YFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgTG9nZ2VyLmxvZyhcIkRldlNlcnZlclwiLCBcIldTIENvbm5lY3RlZFwiKTtcbiAgICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJSRUxPQURfU1RZTEVTXCI6IHtcbiAgICAgICAgICAgICAgICByZWxvYWRTdHlsZXMoKTtcbiAgICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJSRUxPQURfQ09SRVwiOiB7XG4gICAgICAgICAgICAgICAgcmVsb2FkQ29yZSgpO1xuICAgICAgICAgICAgfSBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIExvZ2dlci5sb2coXCJEZXZTZXJ2ZXJcIiwgXCJVbmtub3duIG9wZXJhdGlvbjpcIiwgbWVzc2FnZS5vcGVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZW5kKG9wZXJhdGlvbjogXCJIRUxMT1wiIHwgXCJDTE9TRVwiLCBkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF3cykgdGhyb3cgXCJUcmllZCBzZW5kaW5nIG1lc3NhZ2Ugd2l0aG91dCBjb25uZWN0aW9uIGVzdGFibGlzaGVkXCI7XG5cbiAgICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSkpO1xuICAgIH07XG59IiwiaW1wb3J0IHR5cGUge0RpcmVudH0gZnJvbSBcImZzXCI7XG5cbmNvbnN0IGZzID0gU2V0dGluZ3NOYXRpdmUucmVxdWlyZU1vZHVsZShcImZzXCIpO1xuY29uc3QgcGF0aCA9IFNldHRpbmdzTmF0aXZlLnJlcXVpcmVNb2R1bGUoXCJwYXRoXCIpO1xuXG5leHBvcnQgbmFtZXNwYWNlIFN0b3JhZ2Uge1xuICAgIGV4cG9ydCBsZXQgbGlzdGVuZXJzOiBTZXQ8RnVuY3Rpb24+ID0gbmV3IFNldCgpO1xuICAgIGV4cG9ydCBsZXQgbG9jYXRpb24gPSBcIlwiO1xuICAgIGV4cG9ydCBjb25zdCBncm91cHM6IE1hcDxzdHJpbmcsIGFueT4gPSBuZXcgTWFwKCk7XG5cbiAgICBmdW5jdGlvbiB0cnlKU09OKGpzb246IHN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGVtaXQoLi4uYXJnczogYW55W10pIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gWy4uLmxpc3RlbmVyc107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7Y2FsbGJhY2tzW2ldKC4uLmFyZ3MpO31cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge2NvbnNvbGUuZXJyb3IoZXJyb3IpO31cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gb24obGlzdGVuZXI6IEZ1bmN0aW9uKTogKCkgPT4gYm9vbGVhbiB7XG4gICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuXG4gICAgICAgIHJldHVybiBvZmYuYmluZChsaXN0ZW5lcik7XG4gICAgfTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBvZmYobGlzdGVuZXI6IEZ1bmN0aW9uKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICB9O1xuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHVzZTxUPihmYWN0b3J5OiAoKSA9PiBUKTogVCB7XG4gICAgICAgIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFjdG9yeSgpKTtcblxuICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gb24oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFN0YXRlKGZhY3RvcnkoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHZvaWQgcmVtb3ZlKCk7XG4gICAgICAgIH0sIFtdKTtcblxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfTtcbiBcbiAgICBleHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICAgICAgbG9jYXRpb24gPSBTdG9yYWdlLmxvY2F0aW9uID0gcGF0aC5yZXNvbHZlKGZzLmN1cnJlbnQsIFwiLi5cIiwgXCIuLlwiLCBcIi4uXCIsIFwic3RvcmFnZVwiLCBcInNldHRpbmdzXCIpO1xuICAgICAgICBpZiAoIWZzLmV4aXN0cyhsb2NhdGlvbikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZnMuY3JlYXRlRGlyKGxvY2F0aW9uLCB7cmVjdXJzaXZlOiB0cnVlfSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGZpbGVzID0gZnMucmVhZERpcihsb2NhdGlvbiwgXCJ1dGY4XCIpLCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gZmlsZXNbaV0gYXMgc3RyaW5nO1xuICAgICAgICAgICAgaWYgKCFmcy5zdGF0cyhwYXRoLmpvaW4obG9jYXRpb24sIGZpbGUpKS5pc0ZpbGUoKSB8fCAhZmlsZS5lbmRzV2l0aChcIi5qc29uXCIpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gZmlsZS5zbGljZSgwLCBmaWxlLmluZGV4T2YoXCIuanNvblwiKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGdyb3Vwcy5zZXQoZ3JvdXAsIHRyeUpTT04oZnMucmVhZEZpbGUocGF0aC5qb2luKGxvY2F0aW9uLCBmaWxlKSwgXCJ1dGY4XCIgYXMgYW55KSBhcyBzdHJpbmcpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0KGdyb3VwOiBzdHJpbmcsIGRlZiA9IG51bGwpIHtcbiAgICAgICAgaWYgKH5ncm91cC5pbmRleE9mKFwiLlwiKSkge1xuICAgICAgICAgICAgY29uc3QgW2lkLCAuLi5wYXRoc10gPSBncm91cC5zcGxpdChcIi5cIik7XG5cbiAgICAgICAgICAgIHJldHVybiBwYXRocy5yZWR1Y2UoKGN1cnIsIG5hbWUpID0+IGN1cnI/LltuYW1lXSwgZ3JvdXBzLmdldChpZCkgPz8gZGVmKTtcbiAgICAgICAgfSBcblxuICAgICAgICByZXR1cm4gZ3JvdXBzLmdldChncm91cCkgPz8gZGVmO1xuICAgIH07XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0KGdyb3VwOiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgICAgICBpZiAofmdyb3VwLmluZGV4T2YoXCIuXCIpKSB7XG4gICAgICAgICAgICBjb25zdCBbaWQsIC4uLnBhdGhzXSA9IGdyb3VwLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgICAgIGdyb3VwID0gaWQ7XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gcGF0aHMucG9wKCk7XG4gICAgICAgICAgICBjb25zdCBzdG9yZWQgPSBncm91cHMuZ2V0KGlkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHN0b3JlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0ID0gcGF0aHMucmVkdWNlKChjdXJyLCBuYW1lKSA9PiBjdXJyPy5bbmFtZV0sIGdyb3Vwcy5nZXQoaWQpKTtcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIkdyb3VwIHBhdGggbm90IGZvdW5kIVwiKTtcblxuICAgICAgICAgICAgICAgIG9iamVjdFtwcm9wXSA9IGRhdGE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyZWUgPSBwYXRocy5yZWR1Y2UoKGN1cnIsIG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyW25hbWVdKSBjdXJyW25hbWVdID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJbbmFtZV07XG4gICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgICAgICAgICAgdHJlZVtwcm9wXSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ3JvdXBzLnNldChpZCwgdHJlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBncm91cHMuc2V0KGdyb3VwLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZzLndyaXRlRmlsZShwYXRoLmpvaW4oU3RvcmFnZS5sb2NhdGlvbiwgZ3JvdXAgKyBcIi5qc29uXCIpLCBKU09OLnN0cmluZ2lmeShncm91cHMuZ2V0KGdyb3VwKSwgbnVsbCwgXCJcXHRcIikpO1xuICAgICAgICBlbWl0KGdyb3VwKTtcbiAgICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemU8VCA9IGFueT4ob2JqZWN0OiBUKToge1trZXkgaW4ga2V5b2YgVF06IGFueX0ge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgIGNvbnN0IGNsb25lID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBrZXkpO1xuICAgICAgICBpZiAoIWRlc2NyaXB0b3IgfHwgIWRlc2NyaXB0b3IuZ2V0KSB7XG4gICAgICAgICAgICBjbG9uZVtrZXldID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGdldHRlciA9IGRlc2NyaXB0b3IuZ2V0O1xuICAgICAgICBsZXQgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbG9uZSwga2V5LCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiAodmFsdWUgPSBnZXR0ZXIoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSBhcyBhbnk7XG59OyIsIi8vIEB0cy1ub2NoZWNrXG5cbmlmICh0eXBlb2YgKEFycmF5LnByb3RvdHlwZS5hdCkgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdhdCcsIHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0KGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPCAwID8gdGhpc1t0aGlzLmxlbmd0aCAtIE1hdGguYWJzKGluZGV4KV0gOiB0aGlzW2luZGV4XTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG59XG5cbmlmICh0eXBlb2YgKHNldEltbWVkaWF0ZSkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW5kb3cuc2V0SW1tZWRpYXRlID0gKGNhbGxiYWNrOiBhbnkpID0+IHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xufVxuXG5leHBvcnQgY2xhc3MgRmlsdGVycyB7XG4gICAgc3RhdGljIGJ5UHJvcHMoLi4ucHJvcHM6IHN0cmluZ1tdKSB7XG4gICAgICAgIHJldHVybiAobW9kdWxlOiBhbnkpID0+IHByb3BzLmV2ZXJ5KHByb3AgPT4gcHJvcCBpbiBtb2R1bGUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBieURpc3BsYXlOYW1lKG5hbWU6IHN0cmluZywgZGVmID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIChtb2R1bGU6IGFueSkgPT4gKGRlZiA/IChtb2R1bGUgPSBtb2R1bGUuZGVmYXVsdCkgOiBtb2R1bGUpICYmIHR5cGVvZiAobW9kdWxlKSA9PT0gXCJmdW5jdGlvblwiICYmIG1vZHVsZS5kaXNwbGF5TmFtZSA9PT0gbmFtZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYnlUeXBlU3RyaW5nKC4uLnN0cmluZ3M6IHN0cmluZ1tdKSB7XG4gICAgICAgIHJldHVybiAobW9kdWxlOiBhbnkpID0+IG1vZHVsZS50eXBlICYmIChtb2R1bGUgPSBtb2R1bGUudHlwZT8udG9TdHJpbmcoKSkgJiYgc3RyaW5ncy5ldmVyeShzdHIgPT4gbW9kdWxlLmluZGV4T2Yoc3RyKSA+IC0xKTtcbiAgICB9XG4gICAgc3RhdGljIGJ5Q29kZSguLi5zdHJpbmdzOiBzdHJpbmdbXSkge1xuICAgICAgICByZXR1cm4gKG1vZHVsZTogYW55KSA9PiAobW9kdWxlID0gbW9kdWxlLnRvU3RyaW5nKCkpICYmIHN0cmluZ3MuZXZlcnkoc3RyID0+IG1vZHVsZS5pbmRleE9mKHN0cikgPiAtMSk7XG4gICAgfVxuICAgIHN0YXRpYyBieVByb3RvdHlwZSguLi5wcm9wczogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgZmlsdGVyID0gRmlsdGVycy5ieVByb3BzKC4uLnByb3BzKTtcbiAgICAgICAgcmV0dXJuIChtb2R1bGU6IGFueSkgPT4gbW9kdWxlLnByb3RvdHlwZSAmJiBmaWx0ZXIobW9kdWxlLnByb3RvdHlwZSk7XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBNb2R1bGVGaWx0ZXIgPSAobW9kdWxlOiBhbnksIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW47XG5cbmNsYXNzIFdlYnBhY2tNb2R1bGUge1xuICAgIHdoZW5SZWFkeTogUHJvbWlzZTx2b2lkPjtcbiAgICBjYWNoZSA9IG51bGw7XG4gICAgI2xpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICBnZXQgRmlsdGVycygpIHtyZXR1cm4gRmlsdGVyczt9XG4gICAgZ2V0IGNodW5rTmFtZSgpIHtyZXR1cm4gXCJ3ZWJwYWNrQ2h1bmtkaXNjb3JkX2FwcFwiO31cbiAgICBnZXQgaWQoKSB7cmV0dXJuIFN5bWJvbChcImtlcm5lbC1zZXR0aW5nc1wiKTt9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy53aGVuUmVhZHkgPSB0aGlzLndhaXRGb3JHbG9iYWwudGhlbigoKSA9PiBuZXcgUHJvbWlzZShhc3luYyBvblJlYWR5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtEaXNwYXRjaGVyLCBVc2VyU3RvcmVdID0gYXdhaXQgdGhpcy5maW5kQnlQcm9wcyhcbiAgICAgICAgICAgICAgICBbXCJfZGlzcGF0Y2hcIiwgXCJkaXNwYXRjaFwiXSwgW1wiZ2V0Q3VycmVudFVzZXJcIiwgXCJfZGlzcGF0Y2hUb2tlblwiXSxcbiAgICAgICAgICAgICAgICB7Y2FjaGU6IGZhbHNlLCBidWxrOiB0cnVlLCB3YWl0OiB0cnVlLCBmb3JldmVyOiB0cnVlfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKFVzZXJTdG9yZS5nZXRDdXJyZW50VXNlcigpKSByZXR1cm4gb25SZWFkeSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBEaXNwYXRjaGVyLnVuc3Vic2NyaWJlKFwiU1RBUlRfU0VTU0lPTlwiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgRGlzcGF0Y2hlci51bnN1YnNjcmliZShcIkNPTk5FQ1RJT05fT1BFTlwiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgb25SZWFkeSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgRGlzcGF0Y2hlci5zdWJzY3JpYmUoXCJTVEFSVF9TRVNTSU9OXCIsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIERpc3BhdGNoZXIuc3Vic2NyaWJlKFwiQ09OTkVDVElPTl9PUEVOXCIsIGxpc3RlbmVyKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRoaXMud2hlblJlYWR5LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgbGV0IG9yaWdpbmFsUHVzaCA9IHdpbmRvd1t0aGlzLmNodW5rTmFtZV0ucHVzaDtcblxuICAgICAgICAgICAgY29uc3QgaGFuZGxlUHVzaCA9IChjaHVuazogYW55W10pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbLCBtb2R1bGVzXSA9IGNodW5rO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBtb2R1bGVJZCBpbiBtb2R1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTW9kdWxlID0gbW9kdWxlc1ttb2R1bGVJZF07XG5cbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlc1ttb2R1bGVJZF0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgWywgZXhwb3J0c10gPSBhcmdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxNb2R1bGUuYXBwbHkob3JpZ2luYWxNb2R1bGUsIGFyZ3MpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBbLi4udGhpcy4jbGlzdGVuZXJzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtsaXN0ZW5lcnNbaV0oZXhwb3J0cyk7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dlYnBhY2tdXCIsIFwiQ291bGQgbm90IGZpcmUgY2FsbGJhY2sgbGlzdGVuZXI6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihtb2R1bGVzW21vZHVsZUlkXSwgb3JpZ2luYWxNb2R1bGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvU3RyaW5nOiBvcmlnaW5hbE1vZHVsZS50b1N0cmluZy5iaW5kKG9yaWdpbmFsTW9kdWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fb3JpZ2luYWw6IG9yaWdpbmFsTW9kdWxlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFB1c2guYXBwbHkod2luZG93W3RoaXMuY2h1bmtOYW1lXSwgW2NodW5rXSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93W3RoaXMuY2h1bmtOYW1lXSwgXCJwdXNoXCIsIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBoYW5kbGVQdXNoLFxuICAgICAgICAgICAgICAgIHNldDogKG5ld1B1c2gpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxQdXNoID0gbmV3UHVzaDtcblxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93W3RoaXMuY2h1bmtOYW1lXSwgXCJwdXNoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBoYW5kbGVQdXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZExpc3RlbmVyKGxpc3RlbmVyOiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLiNsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXI6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBmaW5kTGF6eShmaWx0ZXI6IEZ1bmN0aW9uKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgZnJvbUNhY2hlID0gdGhpcy5maW5kTW9kdWxlKGZpbHRlcik7XG4gICAgICAgIGlmIChmcm9tQ2FjaGUpIHJldHVybiBQcm9taXNlLnJlc29sdmUoZnJvbUNhY2hlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IChtOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3RNYXRjaCA9IGZpbHRlcihtKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgcmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICghbS5kZWZhdWx0KSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdE1hdGNoID0gZmlsdGVyKG0uZGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0TWF0Y2gpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUobS5kZWZhdWx0KTtcbiAgICAgICAgICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZSA9IHRoaXMuYWRkTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyB3YWl0Rm9yKGZpbHRlcjogTW9kdWxlRmlsdGVyLCB7cmV0cmllcyA9IDEwMCwgYWxsID0gZmFsc2UsIGZvcmV2ZXIgPSBmYWxzZSwgZGVsYXkgPSA1MH0gPSB7fSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgKGkgPCByZXRyaWVzKSB8fCBmb3JldmVyOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZHVsZSA9IHRoaXMuZmluZE1vZHVsZShmaWx0ZXIsIHthbGwsIGNhY2hlOiBmYWxzZX0pO1xuICAgICAgICAgICAgaWYgKG1vZHVsZSkgcmV0dXJuIG1vZHVsZTtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KHJlcywgZGVsYXkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlT3B0aW9ucyhhcmdzLCBmaWx0ZXIgPSB0aGluZyA9PiAodHlwZW9mICh0aGluZykgPT09IFwib2JqZWN0XCIgJiYgdGhpbmcgIT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh0aGluZykpKSB7XG4gICAgICAgIHJldHVybiBbYXJncywgZmlsdGVyKGFyZ3MuYXQoLTEpKSA/IGFyZ3MucG9wKCkgOiB7fV07XG4gICAgfVxuXG4gICAgcmVxdWVzdChjYWNoZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKGNhY2hlICYmIHRoaXMuY2FjaGUpIHJldHVybiB0aGlzLmNhY2hlO1xuICAgICAgICBsZXQgcmVxID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHdpbmRvd1t0aGlzLmNodW5rTmFtZV0pKSB7XG4gICAgICAgICAgICBjb25zdCBjaHVuayA9IFtbdGhpcy5pZF0sIHt9LCBfX3dlYnBhY2tfcmVxdWlyZV9fID0+IHJlcSA9IF9fd2VicGFja19yZXF1aXJlX19dO1xuICAgICAgICAgICAgd2VicGFja0NodW5rZGlzY29yZF9hcHAucHVzaChjaHVuayk7XG4gICAgICAgICAgICB3ZWJwYWNrQ2h1bmtkaXNjb3JkX2FwcC5zcGxpY2Uod2VicGFja0NodW5rZGlzY29yZF9hcHAuaW5kZXhPZihjaHVuayksIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhY2hlKSB0aGlzLmNhY2hlID0gcmVxO1xuXG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfVxuXG4gICAgZmluZE1vZHVsZShmaWx0ZXI6IE1vZHVsZUZpbHRlciwge2FsbCA9IGZhbHNlLCBjYWNoZSA9IHRydWUsIGZvcmNlID0gdHJ1ZSwgZGVmYXVsdDogZGVmYXVsdEV4cG9ydHMgPSBmYWxzZX0gPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIChmaWx0ZXIpICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiB2b2lkIDA7XG5cbiAgICAgICAgY29uc3QgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHRoaXMucmVxdWVzdChjYWNoZSk7XG4gICAgICAgIGNvbnN0IGZvdW5kID0gW107XG4gICAgICAgIGxldCBoYXNFcnJvciA9IG51bGw7XG5cbiAgICAgICAgaWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgd3JhcEZpbHRlciA9IGZ1bmN0aW9uIChtb2R1bGU6IGFueSwgaW5kZXg6IG51bWJlcikge1xuICAgICAgICAgICAgdHJ5IHtyZXR1cm4gZmlsdGVyKG1vZHVsZSwgaW5kZXgpO31cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhc0Vycm9yID8/PSBlcnJvcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fLmMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tpZF0uZXhwb3J0cztcbiAgICAgICAgICAgIGlmICghbW9kdWxlIHx8IG1vZHVsZSA9PT0gd2luZG93KSBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgbW9kdWxlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3cmFwRmlsdGVyKG1vZHVsZSwgaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbCkgcmV0dXJuIG1vZHVsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kLnB1c2gobW9kdWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICgvKiBtb2R1bGUuX19lc01vZHVsZSAmJiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlLmRlZmF1bHQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG1vZHVsZS5kZWZhdWx0ICE9PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwRmlsdGVyKG1vZHVsZS5kZWZhdWx0LCBpZClcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBvcnRzID0gZGVmYXVsdEV4cG9ydHMgPyBtb2R1bGUgOiBtb2R1bGUuZGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWxsKSByZXR1cm4gZXhwb3J0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kLnB1c2goZXhwb3J0cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9yY2UgLyogJiYgbW9kdWxlLl9fZXNNb2R1bGUgKi8pIGZvciAoY29uc3Qga2V5IGluIG1vZHVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2R1bGVba2V5XSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cmFwRmlsdGVyKG1vZHVsZVtrZXldLCBpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbCkgcmV0dXJuIG1vZHVsZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kLnB1c2gobW9kdWxlW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3cmFwRmlsdGVyKG1vZHVsZSwgaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbCkgcmV0dXJuIG1vZHVsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kLnB1c2gobW9kdWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIltXZWJwYWNrXSBmaWx0ZXIgdGhyZXcgYW4gZXJyb3IuIFRoaXMgY2FuIGNhdXNlIGxhZyBzcGlrZXMgYXQgdGhlIHVzZXIncyBlbmQuIFBsZWFzZSBmaXggYXNhcC5cXG5cXG5cIiwgaGFzRXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWxsID8gZm91bmQgOiBmb3VuZFswXTtcbiAgICB9XG5cbiAgICBmaW5kTW9kdWxlcyhmaWx0ZXI6IE1vZHVsZUZpbHRlcikge3JldHVybiB0aGlzLmZpbmRNb2R1bGUoZmlsdGVyLCB7YWxsOiB0cnVlfSk7fVxuXG4gICAgYnVsayguLi5vcHRpb25zOiBhbnlbXSkge1xuICAgICAgICBjb25zdCBbZmlsdGVycywge3dhaXQgPSBmYWxzZSwgLi4ucmVzdH1dID0gdGhpcy5wYXJzZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGZvdW5kID0gbmV3IEFycmF5KGZpbHRlcnMubGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgc2VhcmNoRnVuY3Rpb24gPSB3YWl0ID8gdGhpcy53YWl0Rm9yIDogdGhpcy5maW5kTW9kdWxlO1xuICAgICAgICBjb25zdCB3cmFwcGVkRmlsdGVycyA9IGZpbHRlcnMubWFwKGZpbHRlciA9PiB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWx0ZXIpKSBmaWx0ZXIgPSBGaWx0ZXJzLmJ5UHJvcHMoLi4uZmlsdGVyKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGZpbHRlcikgPT09IFwic3RyaW5nXCIpIGZpbHRlciA9IEZpbHRlcnMuYnlEaXNwbGF5TmFtZShmaWx0ZXIpO1xuXG4gICAgICAgICAgICByZXR1cm4gKG0pID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge3JldHVybiBmaWx0ZXIobSk7fVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge3JldHVybiBmYWxzZTt9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IHNlYXJjaEZ1bmN0aW9uLmNhbGwodGhpcywgKG1vZHVsZTogYW55KSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdyYXBwZWRGaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyID0gd3JhcHBlZEZpbHRlcnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIiB8fCAhZmlsdGVyKG1vZHVsZSkgfHwgZm91bmRbaV0gIT0gbnVsbCkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgZm91bmRbaV0gPSBtb2R1bGU7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZvdW5kLmZpbHRlcihTdHJpbmcpLmxlbmd0aCA9PT0gZmlsdGVycy5sZW5ndGg7XG4gICAgICAgIH0sIHJlc3QpO1xuXG4gICAgICAgIGlmICh3YWl0KSByZXR1cm4gcmV0dXJuVmFsdWUudGhlbigoKSA9PiBmb3VuZCk7XG5cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cblxuICAgIGZpbmRCeVByb3BzKC4uLm9wdGlvbnM6IGFueVtdKSB7XG4gICAgICAgIGNvbnN0IFtwcm9wcywge2J1bGsgPSBmYWxzZSwgd2FpdCA9IGZhbHNlLCAuLi5yZXN0fV0gPSB0aGlzLnBhcnNlT3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgICBpZiAoIWJ1bGsgJiYgIXdhaXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmRNb2R1bGUoRmlsdGVycy5ieVByb3BzKC4uLnByb3BzKSwgcmVzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2FpdCAmJiAhYnVsaykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2FpdEZvcihGaWx0ZXJzLmJ5UHJvcHMoLi4ucHJvcHMpLCByZXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChidWxrKSB7XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJzID0gcHJvcHMubWFwKChwcm9wc0FycmF5OiBzdHJpbmdbXSkgPT4gRmlsdGVycy5ieVByb3BzKC4uLnByb3BzQXJyYXkpKS5jb25jYXQoe3dhaXQsIC4uLnJlc3R9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVsayguLi5maWx0ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBcblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmaW5kQnlEaXNwbGF5TmFtZSguLi5vcHRpb25zOiBhbnlbXSkge1xuICAgICAgICBjb25zdCBbZGlzcGxheU5hbWVzLCB7YnVsayA9IGZhbHNlLCB3YWl0ID0gZmFsc2UsIC4uLnJlc3R9XSA9IHRoaXMucGFyc2VPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIGlmICghYnVsayAmJiAhd2FpdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZE1vZHVsZShGaWx0ZXJzLmJ5RGlzcGxheU5hbWUoZGlzcGxheU5hbWVzWzBdKSwgcmVzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2FpdCAmJiAhYnVsaykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2FpdEZvcihGaWx0ZXJzLmJ5RGlzcGxheU5hbWUoZGlzcGxheU5hbWVzWzBdKSwgcmVzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYnVsaykge1xuICAgICAgICAgICAgY29uc3QgZmlsdGVycyA9IGRpc3BsYXlOYW1lcy5tYXAoZmlsdGVycy5tYXAoRmlsdGVycy5ieURpc3BsYXlOYW1lKSkuY29uY2F0KHt3YWl0LCBjYWNoZX0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWxrKC4uLmZpbHRlcnMpO1xuICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZmluZEluZGV4KGZpbHRlcjogTW9kdWxlRmlsdGVyKSB7XG4gICAgICAgIGxldCBmb3VuZEluZGV4ID0gLTE7XG5cbiAgICAgICAgdGhpcy5maW5kTW9kdWxlKChtb2R1bGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoZmlsdGVyKG1vZHVsZSkpIGZvdW5kSW5kZXggPSBpbmRleDsgXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmb3VuZEluZGV4O1xuICAgIH1cblxuICAgIGF0SW5kZXgoaW5kZXg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHRydWUpPy5jW2luZGV4XTtcbiAgICB9XG5cbiAgICBnZXQgd2FpdEZvckdsb2JhbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KGFzeW5jIG9uRXhpc3RzID0+IHtcbiAgICAgICAgICAgIHdoaWxlICghQXJyYXkuaXNBcnJheSh3aW5kb3dbdGhpcy5jaHVua05hbWVdKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHNldEltbWVkaWF0ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9uRXhpc3RzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKkBkZXByZWNhdGVkIFVzZSBXZWJwYWNrLndoZW5SZWFkeS50aGVuKCgpID0+IHt9KSBpbnN0ZWFkLiAqL1xuICAgIGFzeW5jIHdhaXQoY2FsbGJhY2sgPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndoZW5SZWFkeS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiICYmIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKkBkZXByZWNhdGVkIFVzZSBXZWJwYWNrLndoZW5SZWFkeS50aGVuKCgpID0+IHt9KSBpbnN0ZWFkLiAqL1xuICAgIGdldCB3aGVuRXhpc3RzKCkge3JldHVybiB0aGlzLndhaXRGb3JHbG9iYWw7fVxuXG4gICAgLyoqQGRlcHJlY2F0ZWQgVXNlIFdlYnBhY2sud2hlblJlYWR5LnRoZW4oKCkgPT4ge30pIGluc3RlYWQuICovXG4gICAgb24oZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJMT0FERURcIjogcmV0dXJuIHRoaXMud2hlblJlYWR5LnRoZW4obGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqQGRlcHJlY2F0ZWQgQHNlZSBXZWJwYWNrLm9uICovXG4gICAgZ2V0IG9uY2UoKSB7cmV0dXJuIHRoaXMub247fVxufVxuXG5jb25zdCBXZWJwYWNrID0gbmV3IFdlYnBhY2tNb2R1bGU7XG5cbmV4cG9ydCBkZWZhdWx0IFdlYnBhY2s7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tIFwiLi4vbW9kdWxlcy9tZW1vaXplXCI7XHJcbmltcG9ydCBXZWJwYWNrLCB7IEZpbHRlcnMgfSBmcm9tIFwiLi4vbW9kdWxlcy93ZWJwYWNrXCI7XHJcblxyXG5jb25zdCBEaXNjb3JkQ29tcG9uZW50cyA9IG1lbW9pemUoe1xyXG4gICAgZ2V0IEJ1dHRvbigpIHtyZXR1cm4gV2VicGFjay5maW5kQnlQcm9wcyhcIkJvcmRlckNvbG9yc1wiKTt9LFxyXG4gICAgZ2V0IFN3aXRjaCgpIHtyZXR1cm4gV2VicGFjay5maW5kTW9kdWxlKG0gPT4gdHlwZW9mIG0gPT09ICdmdW5jdGlvbicgJiYgRmlsdGVycy5ieUNvZGUoJ2hlbHBkZXNrQXJ0aWNsZUlkJykobSkpO30sXHJcbiAgICBnZXQgTWFya2Rvd24oKSB7cmV0dXJuIFdlYnBhY2suZmluZE1vZHVsZShtID0+IG0/LnByb3RvdHlwZT8ucmVuZGVyICYmIG0ucnVsZXMpO30sXHJcbiAgICBnZXQgVGV4dCgpIHtyZXR1cm4gV2VicGFjay5maW5kTW9kdWxlKG0gPT4gbS5TaXplcz8uU0laRV8yNCAmJiBtLkNvbG9ycz8uTElOSyk7fSxcclxuICAgIGdldCBTcGlubmVyKCkge3JldHVybiBXZWJwYWNrLmZpbmRNb2R1bGUobSA9PiBtLlR5cGU/LlNQSU5OSU5HX0NJUkNMRSk7fSxcclxuICAgIGdldCBGbGV4KCkge3JldHVybiBXZWJwYWNrLmZpbmRCeVByb3BzKFwiQ2hpbGRcIiwgXCJBbGlnblwiKTt9LFxyXG4gICAgZ2V0IExpbmsoKSB7cmV0dXJuIFdlYnBhY2suZmluZE1vZHVsZShtID0+IHR5cGVvZiBtID09PSAnZnVuY3Rpb24nICYmIEZpbHRlcnMuYnlDb2RlKCdocmVmJywgJ2FuY2hvcicpKG0pKTt9LFxyXG4gICAgZ2V0IEZvcm1UaXRsZSgpIHtyZXR1cm4gV2VicGFjay5maW5kTW9kdWxlKG0gPT4gbS5UYWdzICYmIEZpbHRlcnMuYnlDb2RlKCdlcnJvclNlcGFyYXRvcicpKG0pKTt9LFxyXG4gICAgZ2V0IEZvcm1Ob3RpY2UoKSB7cmV0dXJuIFdlYnBhY2suZmluZE1vZHVsZShtID0+IG0uVHlwZXMgJiYgRmlsdGVycy5ieUNvZGUoJ2Zvcm1Ob3RpY2VUaXRsZScsICdmb3JtTm90aWNlQm9keScpKG0pKTt9LFxyXG4gICAgZ2V0IEZvcm1EaXZpZGVyKCkge3JldHVybiBXZWJwYWNrLmZpbmRNb2R1bGUobSA9PiB0eXBlb2YgbSA9PT0gJ2Z1bmN0aW9uJyAmJiAobSA9IG0udG9TdHJpbmcoKSkgJiYgbS5sZW5ndGggPCAyMDAgJiYgbS5pbmNsdWRlcygnZGl2aWRlcicpKTt9LFxyXG4gICAgZ2V0IEZvcm1JdGVtKCkge3JldHVybiBXZWJwYWNrLmZpbmRNb2R1bGUobSA9PiBtLlRhZ3MgJiYgRmlsdGVycy5ieUNvZGUoJ2NoaWxkcmVuJywgJ2NyZWF0ZUVsZW1lbnQnLCAnZGlzYWJsZWQnLCAndGFnJywgJ3RpdGxlJykobSkpO30sXHJcbiAgICBnZXQgVG9vbHRpcHMoKSB7cmV0dXJuIFdlYnBhY2suZmluZEJ5UHJvcHMoXCJQb3NpdGlvbnNcIiwgXCJDb2xvcnNcIik7fVxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERpc2NvcmRDb21wb25lbnRzO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUcmFzaChwcm9wczogYW55KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPHN2Z1xuICAgICAgICAgICAgd2lkdGg9JzI0J1xuICAgICAgICAgICAgaGVpZ2h0PScyNCdcbiAgICAgICAgICAgIHZpZXdCb3g9JzAgMCAyNCAyNCdcbiAgICAgICAgICAgIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbiAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMHpcIiBmaWxsPVwibm9uZVwiIC8+XG4gICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgIGQ9J00xNSAzLjk5OVYySDlWMy45OTlIM1Y1Ljk5OUgyMVYzLjk5OUgxNVonXG4gICAgICAgICAgICAgICAgZmlsbD0nY3VycmVudENvbG9yJ1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgZD0nTTUgNi45OTkwMlYxOC45OTlDNSAyMC4xMDEgNS44OTcgMjAuOTk5IDcgMjAuOTk5SDE3QzE4LjEwMyAyMC45OTkgMTkgMjAuMTAxIDE5IDE4Ljk5OVY2Ljk5OTAySDVaTTExIDE3SDlWMTFIMTFWMTdaTTE1IDE3SDEzVjExSDE1VjE3WidcbiAgICAgICAgICAgICAgICBmaWxsPSdjdXJyZW50Q29sb3InXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L3N2Zz5cbiAgICApO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9sZGVyKHByb3BzOiBhbnkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8c3ZnIHdpZHRoPScyNCcgaGVpZ2h0PScyNCcgdmlld0JveD0nMCAwIDUxMiA1MTInIHsuLi5wcm9wc30+XG4gICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgIGZpbGw9J2N1cnJlbnRDb2xvcidcbiAgICAgICAgICAgICAgICBkPSdNNDY0IDEyOEgyNzJsLTY0LTY0SDQ4QzIxLjQ5IDY0IDAgODUuNDkgMCAxMTJ2Mjg4YzAgMjYuNTEgMjEuNDkgNDggNDggNDhoNDE2YzI2LjUxIDAgNDgtMjEuNDkgNDgtNDhWMTc2YzAtMjYuNTEtMjEuNDktNDgtNDgtNDh6J1xuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9zdmc+XG4gICAgKTtcbn1cbiIsImNvbnN0IFZlcmlmaWVkID0gKHByb3BzOiBhbnkpID0+IChcbiAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB3aWR0aD1cIjI0XCIgey4uLnByb3BzfT5cbiAgICAgICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMHpcIiBmaWxsPVwibm9uZVwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMTIgMUwzIDV2NmMwIDUuNTUgMy44NCAxMC43NCA5IDEyIDUuMTYtMS4yNiA5LTYuNDUgOS0xMlY1bC05LTR6bS0yIDE2bC00LTQgMS40MS0xLjQxTDEwIDE0LjE3bDYuNTktNi41OUwxOCA5bC04IDh6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgPC9zdmc+XG4pO1xuXG5jb25zdCBXYXJuaW5nID0gKHByb3BzKSA9PiAoXG4gICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI0IDI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgd2lkdGg9XCIyNFwiIHsuLi5wcm9wc30+XG4gICAgICAgIDxnPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0wLDBoMjR2MjRIMFYwelwiIGZpbGw9XCJub25lXCIgLz5cbiAgICAgICAgPC9nPlxuICAgICAgICA8Zz5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTIsMkw0LDV2Ni4wOWMwLDUuMDUsMy40MSw5Ljc2LDgsMTAuOTFjNC41OS0xLjE1LDgtNS44Niw4LTEwLjkxVjVMMTIsMnogTTEzLDE2aC0ydi0yaDJWMTZ6IE0xMywxMmgtMlY3aDJWMTJ6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbik7XG5cbmVudW0gVHlwZXMge1xuICAgIFZFUklGSUVEID0gXCJWRVJJRklFRFwiLFxuICAgIFdBUk5JTkcgPSBcIldBUk5JTkdcIlxufTtcblxudHlwZSBGQzxTLCBQID0ge30+ID0gUmVhY3QuRkM8UD4gJiBTO1xuXG5jb25zdCBTaGllbGQ6IEZDPHtUeXBlcz86IHR5cGVvZiBUeXBlc30sIHt0eXBlOiBrZXlvZiB0eXBlb2YgVHlwZXN9ICYgUmVhY3QuU1ZHQXR0cmlidXRlczxhbnk+PiA9ICh7dHlwZSwgLi4ucHJvcHN9KSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgVHlwZXMuVkVSSUZJRUQ6IHJldHVybiA8VmVyaWZpZWQgey4uLnByb3BzfSAvPjtcbiAgICAgICAgY2FzZSBUeXBlcy5XQVJOSU5HOiByZXR1cm4gPFdhcm5pbmcgey4uLnByb3BzfSAvPjtcblxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG5TaGllbGQuVHlwZXMgPSBUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgU2hpZWxkOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFVwZGF0ZUF2YWlsYWJsZShwcm9wczogYW55KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJrcy11cGRhdGUtYXZhaWxhYmxlXCIgYXJpYS1oaWRkZW49XCJmYWxzZVwiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB7Li4ucHJvcHN9PlxuICAgICAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICAgICAgPHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGZpbGwtcnVsZT1cIm5vbnplcm9cIiBkPVwiTTUsOCBMOSwxMiBMNiwxMiBDNiwxNS4zMSA4LjY5LDE4IDEyLDE4IEMxMy4wMSwxOCAxMy45NywxNy43NSAxNC44LDE3LjMgTDE2LjI2LDE4Ljc2IEMxNS4wMywxOS41NCAxMy41NywyMCAxMiwyMCBDNy41OCwyMCA0LDE2LjQyIDQsMTIgTDEsMTIgTDUsOCBaIE0xOCwxMiBDMTgsOC42OSAxNS4zMSw2IDEyLDYgQzEwLjk5LDYgMTAuMDMsNi4yNSA5LjIsNi43IEw3Ljc0LDUuMjQgQzguOTcsNC40NiAxMC40Myw0IDEyLDQgQzE2LjQyLDQgMjAsNy41OCAyMCwxMiBMMjMsMTIgTDE5LDE2IEwxNSwxMiBMMTgsMTIgWlwiIC8+XG4gICAgICAgICAgICAgICAgPHBvbHlnb24gcG9pbnRzPVwiMjQgMCAwIDAgMCAyNCAyNCAyNFwiIC8+XG4gICAgICAgICAgICA8L2c+XG4gICAgICAgIDwvc3ZnPlxuICAgICk7XG59IiwiaW1wb3J0IFRyYXNoIGZyb20gJy4vdHJhc2gnO1xuaW1wb3J0IEZvbGRlciBmcm9tICcuL2ZvbGRlcic7XG5pbXBvcnQgU2hpZWxkIGZyb20gJy4vc2hpZWxkJztcbmltcG9ydCBVcGRhdGVBdmFpbGFibGUgZnJvbSAnLi91cGRhdGVfYXZhaWxhYmxlJztcblxuZXhwb3J0IGNvbnN0IEljb25zID0ge1xuICAgIFRyYXNoLFxuICAgIEZvbGRlcixcbiAgICBTaGllbGQsXG4gICAgVXBkYXRlQXZhaWxhYmxlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSWNvbih7XG4gICAgbmFtZSxcbiAgICAuLi5wcm9wc1xufToge1xuICAgIG5hbWU6IGtleW9mIHR5cGVvZiBJY29ucztcbiAgICBzaXplPzogc3RyaW5nIHwgbnVtYmVyO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbn0pIHtcbiAgICBjb25zdCBJY29uQ29tcG9uZW50ID0gSWNvbnNbbmFtZV07XG4gICAgY29uc3QgZXh0cmFQcm9wczogYW55ID0ge307XG5cbiAgICBpZiAoIUljb25Db21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zaXplKSB7XG4gICAgICAgIGV4dHJhUHJvcHMud2lkdGggPSBleHRyYVByb3BzLmhlaWdodCA9IHByb3BzLnNpemU7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxJY29uQ29tcG9uZW50IHsuLi5wcm9wc30gey4uLmV4dHJhUHJvcHN9IC8+O1xufVxuIiwiaW1wb3J0IFwiLi9jYXJkLnNjc3NcIjtcbmltcG9ydCBEaXNjb3JkQ29tcG9uZW50cyBmcm9tIFwiLi9kaXNjb3JkXCI7XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi9pY29uc1wiO1xuXG5jb25zdCBrZXJuZWw6IGFueSA9ICh3aW5kb3cgYXMgYW55KS5rZXJuZWw7XG5jb25zdCBFbGVjdHJvbiA9IFNldHRpbmdzTmF0aXZlLnJlcXVpcmVNb2R1bGUoXCJlbGVjdHJvblwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIFRvb2xCdXR0b24oeyBsYWJlbCwgaWNvbiwgb25DbGljaywgZGFuZ2VyID0gZmFsc2UgfSkge1xuICBjb25zdCB7IFRvb2x0aXBzLCBCdXR0b24gfSA9IERpc2NvcmRDb21wb25lbnRzO1xuXG4gIHJldHVybiAoXG4gICAgPFRvb2x0aXBzIHRleHQ9e2xhYmVsfSBwb3NpdGlvbj1cInRvcFwiPlxuICAgICAgeyhwcm9wcykgPT4gKFxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImtlcm5lbC10b29sYnV0dG9uXCJcbiAgICAgICAgICBsb29rPXtCdXR0b24uTG9va3MuQkxBTkt9XG4gICAgICAgICAgc2l6ZT17QnV0dG9uLlNpemVzLk5PTkV9XG4gICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHNpemU9XCIyMFwiIG5hbWU9e2ljb259IGNvbG9yPXtkYW5nZXIgPyBcIiNlZDQyNDVcIiA6IHVuZGVmaW5lZH0gLz5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApfVxuICAgIDwvVG9vbHRpcHM+XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTd2l0Y2hXcmFwcGVyKHsgdmFsdWUsIG9uQ2hhbmdlLCBkaXNhYmxlZCB9KSB7XG4gIGNvbnN0IHsgU3dpdGNoIH0gPSBEaXNjb3JkQ29tcG9uZW50cztcbiAgY29uc3QgW2lzQ2hlY2tlZCwgc2V0Q2hlY2tlZF0gPSBSZWFjdC51c2VTdGF0ZSh2YWx1ZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3dpdGNoXG4gICAgICBjaGVja2VkPXtpc0NoZWNrZWR9XG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICBvbkNoYW5nZT17UmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAoZGlzYWJsZWQpIHJldHVybjtcblxuICAgICAgICBvbkNoYW5nZSghaXNDaGVja2VkKTtcbiAgICAgICAgc2V0Q2hlY2tlZCgodmFsdWU6IGJvb2xlYW4pID0+ICF2YWx1ZSk7XG4gICAgICB9LCBbb25DaGFuZ2UsIGlzQ2hlY2tlZF0pfVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuSXRlbShwYXRoOiBzdHJpbmcpIHtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIuYXNhclwiKSkgcmV0dXJuIEVsZWN0cm9uLnNob3dJdGVtSW5Gb2xkZXIocGF0aCk7XG5cbiAgRWxlY3Ryb24ub3BlblBhdGgocGF0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEtlcm5lbENhcmQoeyBwa2cgfSkge1xuICBjb25zdCB7IE1hcmtkb3duLCBUZXh0IH0gPSBEaXNjb3JkQ29tcG9uZW50cztcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwia2VybmVsLWNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwia2VybmVsLWNhcmQtdG9vbHNcIj5cbiAgICAgICAgPFRvb2xCdXR0b25cbiAgICAgICAgICBsYWJlbD1cIk9wZW4gUGF0aFwiXG4gICAgICAgICAgaWNvbj1cIkZvbGRlclwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gb3Blbkl0ZW0ocGtnLnBhdGgpfVxuICAgICAgICAvPlxuICAgICAgICA8VG9vbEJ1dHRvblxuICAgICAgICAgIGRhbmdlclxuICAgICAgICAgIGxhYmVsPVwiRGVsZXRlXCJcbiAgICAgICAgICBpY29uPVwiVHJhc2hcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IEVsZWN0cm9uLnRyYXNoSXRlbShwa2cucGF0aCl9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwia2VybmVsLWNhcmQtaGVhZGVyXCI+XG4gICAgICAgIDxUZXh0IGNsYXNzTmFtZT1cImtlcm5lbC1jYXJkLW5hbWVcIj57cGtnLm5hbWV9PC9UZXh0PlxuICAgICAgPC9kaXY+XG4gICAgICB7cGtnLmRlc2NyaXB0aW9uICE9IG51bGwgJiYgKFxuICAgICAgICA8VGV4dCBjbGFzc05hbWU9XCJrZXJuZWwtY2FyZC1kZXNjXCI+XG4gICAgICAgICAgPE1hcmtkb3duPntwa2cuZGVzY3JpcHRpb259PC9NYXJrZG93bj5cbiAgICAgICAgPC9UZXh0PlxuICAgICAgKX1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwia2VybmVsLWZvb3RlclwiPlxuICAgICAgICA8U3dpdGNoV3JhcHBlclxuICAgICAgICAgIHZhbHVlPXtwa2cuZW5hYmxlZH1cbiAgICAgICAgICBlbmFibGVkPXtwa2cuZW5hYmxlZH1cbiAgICAgICAgICBkaXNhYmxlZD17cGtnLmlkID09PSBcImtlcm5lbC1zZXR0aW5nc1wifVxuICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgIGlmICghdmFsdWUpIGtlcm5lbC5wYWNrYWdlcy5zdG9wUGFja2FnZShwa2cuaWQpO1xuICAgICAgICAgICAgZWxzZSBrZXJuZWwucGFja2FnZXMuc3RhcnRQYWNrYWdlKHBrZy5pZCk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IEtlcm5lbENhcmQgZnJvbSBcIi4vY2FyZFwiO1xuaW1wb3J0IERpc2NvcmRDb21wb25lbnRzIGZyb20gXCIuL2Rpc2NvcmRcIjtcbmltcG9ydCBcIi4vcGFuZWwuc2Nzc1wiO1xuXG5jb25zdCBrZXJuZWw6IGFueSA9ICh3aW5kb3cgYXMgYW55KS5rZXJuZWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEtlcm5lbFBhbmVsKCkge1xuICAgIGNvbnN0IHtGb3JtVGl0bGV9ID0gRGlzY29yZENvbXBvbmVudHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImtlcm5lbC1wYW5lbFwiPlxuICAgICAgICAgICAgPEZvcm1UaXRsZSB0YWc9e0Zvcm1UaXRsZS5UYWdzLkgxfT5QYWNrYWdlczwvRm9ybVRpdGxlPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZXJuZWwtY2FyZC1zY3JvbGxlclwiPlxuICAgICAgICAgICAgICAgIHtPYmplY3QudmFsdWVzPGFueT4oa2VybmVsLnBhY2thZ2VzLmdldFBhY2thZ2VzKCkpLm1hcChwa2cgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8S2VybmVsQ2FyZCBwa2c9e3BrZ30ga2V5PXtwa2cuaWQgPz8gcGtnLm5hbWV9IC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cbiIsImltcG9ydCBtZW1vaXplIGZyb20gXCIuL21lbW9pemVcIjtcbmltcG9ydCBXZWJwYWNrIGZyb20gXCIuL3dlYnBhY2tcIjtcblxuY29uc3QgRGlzY29yZE1vZHVsZXMgPSBtZW1vaXplKHtcbiAgICBnZXQgTW9tZW50KCkge3JldHVybiBXZWJwYWNrLmZpbmRCeVByb3BzKFwibW9tZW50UHJvcGVydGllc1wiKTt9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgRGlzY29yZE1vZHVsZXM7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZUxhenk8UCA9IGFueT4oZmFjdG9yeTogKHByb3BzOiBQKSA9PiBQcm9taXNlPGFueT4sIGZhbGxiYWNrOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDx7fT4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gTGF6eUNvbXBvbmVudChwcm9wczogUCkge1xuICAgICAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtyZXNvbHZlZDogZmFsc2UsIHZhbHVlOiB2b2lkIDB9KTtcblxuICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlc29sdmVkKSByZXR1cm47XG5cbiAgICAgICAgICAgIGZhY3RvcnkocHJvcHMpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0U3RhdGUoe3ZhbHVlLCByZXNvbHZlZDogdHJ1ZX0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIFtzdGF0ZV0pO1xuXG4gICAgICAgIHJldHVybiBzdGF0ZS5yZXNvbHZlZCA/IHN0YXRlLnZhbHVlIDogUmVhY3QuY3JlYXRlRWxlbWVudChmYWxsYmFjaywgcHJvcHMpO1xuICAgIH07XG59IiwiY29uc3QgcGVyaW9kID0gXCJAQEA9PT1AQEBcIjtcclxuY29uc3QgY29tbWl0RmllbGRzID0gW1wiaGFzaFwiLCBcImhhc2hfc2hvcnRcIiwgXCJhdXRob3JcIiwgXCJkYXRlXCIsIFwibWVzc2FnZVwiXTtcclxuY29uc3QgaGFzaEZpZWxkcyA9IFtcInNob3J0XCIsIFwiZnVsbFwiXTtcclxuXHJcbmNvbnN0IGNoaWxkX3Byb2Nlc3MgPSBTZXR0aW5nc05hdGl2ZS5yZXF1aXJlTW9kdWxlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcclxuXHJcbmV4cG9ydCB0eXBlIENvbW1pdCA9IHtcclxuICAgIGhhc2g/OiBzdHJpbmcsXHJcbiAgICBoYXNoX3Nob3J0Pzogc3RyaW5nO1xyXG4gICAgYXV0aG9yPzogc3RyaW5nO1xyXG4gICAgZGF0ZT86IHN0cmluZztcclxuICAgIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHaXQge1xyXG4gICAgc3RhdGljIGV4ZWN1dGVDbWQoY21kOiBzdHJpbmcsIGN3ZD86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY2hpbGRfcHJvY2Vzcy5leGVjKGNtZCwge2N3ZH0sIChlcnJvciwgc3Rkb3V0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzdGRvdXQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgaXNJbnN0YWxsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlQ21kKFwiZ2l0IC0tdmVyc2lvblwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGlzUmVwbyhjd2Q6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZUNtZChcImdpdCByZXYtcGFyc2UgLS1pcy1pbnNpZGUtd29yay10cmVlXCIsIGN3ZCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBcInRydWVcIjtcclxuICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2V0QnJhbmNoTmFtZShjd2Q6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlQ21kKFwiZ2l0IGJyYW5jaCAtYVwiLCBjd2QpO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnNsaWNlKDIsIHJlc3VsdC5pbmRleE9mKFwiXFxuXCIpKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRMYXRlc3RDb21taXQoY3dkOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nID0gXCJtYXN0ZXJcIik6IFByb21pc2U8e3Nob3J0Pzogc3RyaW5nLCBmdWxsPzogc3RyaW5nLCBoYXNFcnJvcj86IGJvb2xlYW59PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VQZXJpb2RzKGhhc2hGaWVsZHMsIGF3YWl0IHRoaXMuZXhlY3V0ZUNtZChgZ2l0IGxvZyAtMSAke3RhcmdldH0gLS1wcmV0dHk9Zm9ybWF0OlwiJWgke3BlcmlvZH0lSFwiYCwgY3dkKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiB7aGFzRXJyb3I6IHRydWV9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2V0RGlmZihjd2Q6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcgPSBcIm1hc3RlclwiKTogUHJvbWlzZTxDb21taXRbXT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZUNtZChgZ2l0IGxvZyAke3RhcmdldH0uLm9yaWdpbi8ke3RhcmdldH0gLS1wcmV0dHk9Zm9ybWF0OlwiJUgke3BlcmlvZH0laCR7cGVyaW9kfSVhbiR7cGVyaW9kfSVhciR7cGVyaW9kfSVzXCJgLCBjd2QpO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnNwbGl0KFwiXFxuXCIpLm1hcChwID0+IHRoaXMucGFyc2VQZXJpb2RzKGNvbW1pdEZpZWxkcywgcCkpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwYXJzZVBlcmlvZHMoZmllbGRzOiBzdHJpbmdbXSwgb3V0OiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKG91dC5zcGxpdChwZXJpb2QpLm1hcCgoYywgaSkgPT4gW2ZpZWxkc1tpXSwgY10pKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBmdW5jdGlvbiBTaG93KHt3aGVuLCBjaGlsZHJlbiwgZmFsbGJhY2sgPSBudWxsfToge3doZW46IGJvb2xlYW4sIGNoaWxkcmVuOiBhbnksIGZhbGxiYWNrPzogYW55fSkge1xuICAgIHJldHVybiB3aGVuID8gY2hpbGRyZW4gOiBmYWxsYmFjaztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBTd2l0Y2goe2NoaWxkcmVuLCBkZWZhdWx0OiBkZWYgPSBudWxsfSkge1xuICAgIHJldHVybiBjaGlsZHJlbi5maW5kKChjaGlsZDogYW55KSA9PiBjaGlsZD8ucHJvcHM/LndoZW4pID8/IGRlZjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBNYXRjaCh7d2hlbiwgY2hpbGRyZW59OiB7d2hlbjogYm9vbGVhbiwgY2hpbGRyZW46IGFueX0pIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gRm9yPFQ+KHtlYWNoLCBjaGlsZHJlbn06IHtlYWNoOiBUW10sIGNoaWxkcmVuOiAoaXRlbTogVCwgaW5kZXg6IG51bWJlcikgPT4gYW55fSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkcmVuKGVhY2hbaV0sIGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gPD57cmVzdWx0fTwvPjtcbn07IiwiaW1wb3J0IERpc2NvcmRNb2R1bGVzIGZyb20gXCJAbW9kdWxlcy9kaXNjb3JkXCI7XG5pbXBvcnQge0xvZ2dlcn0gZnJvbSBcIkBtb2R1bGVzL2xvZ2dlclwiO1xuaW1wb3J0IG1ha2VMYXp5IGZyb20gXCJAbW9kdWxlcy9tYWtlbGF6eVwiO1xuaW1wb3J0IEdpdCwge0NvbW1pdH0gZnJvbSBcIkBtb2R1bGVzL3NpbXBsZWdpdFwiO1xuaW1wb3J0IHtTdG9yYWdlfSBmcm9tIFwiQG1vZHVsZXMvc3RvcmFnZVwiO1xuaW1wb3J0IERpc2NvcmRDb21wb25lbnRzIGZyb20gXCIuL2Rpc2NvcmRcIjtcbmltcG9ydCBTaGllbGQgZnJvbSBcIi4vaWNvbnMvc2hpZWxkXCI7XG5pbXBvcnQgVXBkYXRlQXZhaWxhYmxlIGZyb20gXCIuL2ljb25zL3VwZGF0ZV9hdmFpbGFibGVcIjtcbmltcG9ydCB7TWF0Y2gsIFN3aXRjaCwgU2hvdywgRm9yfSBmcm9tIFwiLi9wcmltaXRpdmVzXCI7XG5pbXBvcnQgXCIuL3VwZGF0ZXMuc2Nzc1wiO1xuXG5jb25zdCBmcyA9IFNldHRpbmdzTmF0aXZlLnJlcXVpcmVNb2R1bGUoXCJmc1wiKTtcblxuZnVuY3Rpb24gdXNlR2l0Q29tbWFuZDxUPihmYWN0b3J5OiAoKSA9PiBudWxsIHwgUHJvbWlzZTxUPiwgZGVwcz86IGFueVtdKToge2xvYWRlZDogYm9vbGVhbiwgcmVzdWx0OiBULCBmZXRjaCgpOiB2b2lkfSB7XG4gICAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7bG9hZGVkOiBmYWxzZSwgcmVzdWx0OiBudWxsfSk7XG5cbiAgICBjb25zdCBoYW5kbGVGZXRjaCA9ICgpID0+IHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKGZhY3RvcnkoKSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGxvYWRlZDogdHlwZW9mIHJlc3VsdCA9PT0gXCJib29sZWFuXCIgPyB0cnVlIDogISFyZXN1bHQsXG4gICAgICAgICAgICAgICAgcmVzdWx0OiByZXN1bHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICB9O1xuXG4gICAgUmVhY3QudXNlRWZmZWN0KGhhbmRsZUZldGNoLCBkZXBzID8/IFtdKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBmZXRjaCgpIHtcbiAgICAgICAgICAgIHNldFN0YXRlKHtsb2FkZWQ6IGZhbHNlLCByZXN1bHQ6IG51bGx9KTtcbiAgICAgICAgICAgIGhhbmRsZUZldGNoKCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgY29uc3QgTG9hZGluZ1NwaW5uZXIgPSAoKSA9PiB7XG4gICAgY29uc3Qge1NwaW5uZXJ9ID0gRGlzY29yZENvbXBvbmVudHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8U3Bpbm5lciB0eXBlPXtTcGlubmVyLlR5cGUuTE9XX01PVElPTn0gY2xhc3NOYW1lPVwia3N1LXNwaW5uZXJcIiAvPlxuICAgICk7XG59O1xuXG5leHBvcnQgY29uc3QgQ3VycmVudEJyYW5jaCA9IG1ha2VMYXp5KGFzeW5jICh7Z2l0TG9hZGVkfSkgPT4ge1xuICAgIGlmICghZ2l0TG9hZGVkKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IHtMaW5rfSA9IERpc2NvcmRDb21wb25lbnRzO1xuXG4gICAgY29uc3QgYnJhbmNoID0gYXdhaXQgR2l0LmdldEJyYW5jaE5hbWUoZnMuY3VycmVudCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8TGluayBocmVmPXtgaHR0cHM6Ly9naXRodWIuY29tL3N0cmVuY2hlci1rZXJuZWwvc2V0dGluZ3MvdHJlZS8ke2JyYW5jaH1gfT57YnJhbmNofTwvTGluaz5cbiAgICApO1xufSwgTG9hZGluZ1NwaW5uZXIpO1xuXG5leHBvcnQgY29uc3QgQ3VycmVudENvbW1pdEhhc2ggPSBtYWtlTGF6eShhc3luYyAoe2dpdExvYWRlZH0pID0+IHtcbiAgICBpZiAoIWdpdExvYWRlZCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCB7VGV4dCwgTGlua30gPSBEaXNjb3JkQ29tcG9uZW50cztcbiAgICBjb25zdCBoYXNoOiBhbnkgPSBhd2FpdCBHaXQuZ2V0TGF0ZXN0Q29tbWl0KGZzLmN1cnJlbnQsIGF3YWl0IEdpdC5nZXRCcmFuY2hOYW1lKGZzLmN1cnJlbnQpKTtcblxuICAgIGlmIChoYXNoLmhhc0Vycm9yKSByZXR1cm4gKFxuICAgICAgICA8VGV4dCBjb2xvcj17VGV4dC5Db2xvcnMuUkVEfT5lcnJvcjwvVGV4dD5cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPExpbmsgaHJlZj17YGh0dHBzOi8vZ2l0aHViLmNvbS9zdHJlbmNoZXIta2VybmVsL3NldHRpbmdzL3RyZWUvJHtoYXNoLmZ1bGx9YH0+e2hhc2guc2hvcnR9PC9MaW5rPlxuICAgICk7XG59LCBMb2FkaW5nU3Bpbm5lcik7XG5cbmxldCBuZWVkc1JlbG9hZCA9IGZhbHNlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVXBkYXRlclBhbmVsKCkge1xuICAgIGNvbnN0IHtNb21lbnR9ID0gRGlzY29yZE1vZHVsZXM7XG4gICAgY29uc3QgW2Vycm9yTWVzc2FnZSwgc2V0RXJyb3JdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gICAgY29uc3Qge0xpbmssIEJ1dHRvbiwgVGV4dCwgRmxleCwgRm9ybVRpdGxlLCBGb3JtTm90aWNlLCBGb3JtRGl2aWRlciwgRm9ybUl0ZW0sIFNwaW5uZXJ9ID0gRGlzY29yZENvbXBvbmVudHM7XG4gICAgY29uc3QgZ2l0ID0gdXNlR2l0Q29tbWFuZDxib29sZWFuPigoKSA9PiBHaXQuaXNJbnN0YWxsZWQoKSk7XG4gICAgY29uc3QgdXBkYXRlcyA9IHVzZUdpdENvbW1hbmQ8Q29tbWl0W10+KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKCFnaXQubG9hZGVkIHx8ICFnaXQucmVzdWx0KSByZXR1cm4gW107XG5cbiAgICAgICAgcmV0dXJuIEdpdC5nZXREaWZmKGZzLmN1cnJlbnQpO1xuICAgIH0sIFtnaXQubG9hZGVkXSk7XG4gICAgY29uc3QgbGFzdFVwZGF0ZSA9IE1vbWVudChTdG9yYWdlLnVzZSgoKSA9PiBTdG9yYWdlLmdldChcInVwZGF0ZXIubGFzdEZldGNoXCIsIG5ldyBEYXRlKCkpKSk7XG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZXJuZWwtcGFuZWxcIj5cbiAgICAgICAgICAgIDxGb3JtVGl0bGUgdGFnPXtGb3JtVGl0bGUuVGFncy5IMX0+VXBkYXRlczwvRm9ybVRpdGxlPlxuICAgICAgICAgICAgPFNob3cgd2hlbj17Z2l0LmxvYWRlZH0gZmFsbGJhY2s9ezxTcGlubmVyIHR5cGU9e1NwaW5uZXIuVHlwZS5XQU5ERVJJTkdfQ1VCRVN9IC8+fT5cbiAgICAgICAgICAgICAgICA8U2hvdyB3aGVuPXshZ2l0LnJlc3VsdH0+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtTm90aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPXtGb3JtTm90aWNlLlR5cGVzLkRBTkdFUn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImtzLW1hcmdpbkJvdHRvbTIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiR2l0IGluc3RhbGxhdGlvbiBub3QgZm91bmQhXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlRGF0YT17e3NyYzogXCIvYXNzZXRzLzZlOTdmNjY0M2U3ZGYyOWIyNjU3MWQ5NjQzMGU5MmY0LnN2Z1wiLCB3aWR0aDogNjAsIGhlaWdodDogNjB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keT17PHNwYW4+Q3VycmVudGx5IEtlcm5lbFNldHRpbmdzIHJlbGllcyBvbiB5b3VyIGxvY2FsIGdpdCBpbnN0YWxsYXRpb24uIFBsZWFzZSBpbnN0YWxsIGdpdCB0byB1c2UgdGhpcyB1cGRhdGVyLjwvc3Bhbj59XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9TaG93PlxuICAgICAgICAgICAgICAgIDxTaG93IHdoZW49e2Vycm9yTWVzc2FnZSAhPSBudWxsfT5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Ob3RpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9e0Zvcm1Ob3RpY2UuVHlwZXMuREFOR0VSfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwia3MtbWFyZ2luQm90dG9tMjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJFcnJvciBvY2N1cnJlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZURhdGE9e3tzcmM6IFwiL2Fzc2V0cy82ZTk3ZjY2NDNlN2RmMjliMjY1NzFkOTY0MzBlOTJmNC5zdmdcIiwgd2lkdGg6IDYwLCBoZWlnaHQ6IDYwfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk9ezxzcGFuPntlcnJvck1lc3NhZ2V9PC9zcGFuPn1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L1Nob3c+XG4gICAgICAgICAgICAgICAgPFNob3cgd2hlbj17ZXJyb3JNZXNzYWdlID09IG51bGwgJiYgbmVlZHNSZWxvYWR9PlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybU5vdGljZVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT17Rm9ybU5vdGljZS5UeXBlcy5XQVJOSU5HfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwia3MtbWFyZ2luQm90dG9tMjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJSZWxvYWQgcmVxdWlyZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VEYXRhPXt7c3JjOiBcIi9hc3NldHMvNmU5N2Y2NjQzZTdkZjI5YjI2NTcxZDk2NDMwZTkyZjQuc3ZnXCIsIHdpZHRoOiA2MCwgaGVpZ2h0OiA2MH19XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5PXs8c3Bhbj5DbGllbnQgcmVsb2FkIGlzIHJlcXVpcmVkIGluIG9yZGVyIHRvIG1ha2UgY2hhbmdlcyB0YWtlIGFmZmVjdC48L3NwYW4+fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvU2hvdz5cbiAgICAgICAgICAgICAgICA8U2hvdyB3aGVuPXtnaXQucmVzdWx0fT5cbiAgICAgICAgICAgICAgICAgICAgPEZsZXggY2xhc3NOYW1lPVwia3N1LWNhcmRcIiBkaXJlY3Rpb249e0ZsZXguRGlyZWN0aW9uLlZFUlRJQ0FMfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGbGV4IGp1c3RpZnk9e0ZsZXguSnVzdGlmeS5CRVRXRUVOfSBhbGlnbj17RmxleC5BbGlnbi5DRU5URVJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGbGV4IGNsYXNzTmFtZT1cImtzdS1zaGllbGQtY29udGFpbmVyXCIgZGlyZWN0aW9uPXtGbGV4LkRpcmVjdGlvbi5IT1JJWk9OVEFMfSBhbGlnbj17RmxleC5BbGlnbi5TVEFSVH0ganVzdGlmeT17RmxleC5KdXN0aWZ5LkNFTlRFUn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTaG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuPXt1cGRhdGVzLmxvYWRlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrPXsoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFVwZGF0ZUF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjcwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNzBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJrcy11cGRhdGUtYXZhaWxhYmxlIGtzdS1zaGllbGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2hpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT17dXBkYXRlcy5yZXN1bHQ/Lmxlbmd0aCA+IDAgPyBTaGllbGQuVHlwZXMuV0FSTklORyA6IFNoaWVsZC5UeXBlcy5WRVJJRklFRH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjcwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI3MFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtga3N1LXNoaWVsZCAke3VwZGF0ZXMucmVzdWx0Py5sZW5ndGggPiAwID8gXCJrc3Utc2hpZWxkLXdhcm5cIiA6IFwia3N1LXNoaWVsZC1va1wifWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1Nob3c+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGbGV4LkNoaWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgc2l6ZT17VGV4dC5TaXplcy5TSVpFXzI0fSBjb2xvcj17VGV4dC5Db2xvcnMuSEVBREVSX1BSSU1BUll9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTd2l0Y2ggZGVmYXVsdD1cIkV2ZXJ5dGhpbmcgaXMgdXAgdG8gZGF0ZSFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1hdGNoIHdoZW49eyF1cGRhdGVzLmxvYWRlZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2FkaW5nLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTWF0Y2g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYXRjaCB3aGVuPXt1cGRhdGVzLnJlc3VsdD8ubGVuZ3RoID4gMH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb21ldGhpbmcgbmVlZHMgdG8gYmUgdXBkYXRlZCFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9NYXRjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1N3aXRjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHNpemU9e1RleHQuU2l6ZXMuU0laRV8xNH0gY29sb3I9e1RleHQuQ29sb3JzLkhFQURFUl9TRUNPTkRBUll9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhc3QgQ2hlY2tlZDoge2xhc3RVcGRhdGUuY2FsZW5kYXIoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9GbGV4LkNoaWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImtzdS1naXQtaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCBjbGFzc05hbWU9XCJrc3UtZ2l0LWluZm8taXRlbVwiPkJyYW5jaDogPEN1cnJlbnRCcmFuY2ggZ2l0TG9hZGVkPXshIWdpdC5yZXN1bHR9IC8+PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCBjbGFzc05hbWU9XCJrc3UtZ2l0LWluZm8taXRlbVwiPkNvbW1pdDogPEN1cnJlbnRDb21taXRIYXNoIGdpdExvYWRlZD17ISFnaXQucmVzdWx0fSAvPjwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtRGl2aWRlciBjbGFzc05hbWU9XCJrc3UtZGl2aWRlclwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RmxleCBkaXJlY3Rpb249e0ZsZXguRGlyZWN0aW9uLkhPUklaT05UQUx9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF1cGRhdGVzLmxvYWRlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e0J1dHRvbi5Db2xvcnMuQlJBTkR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9e0J1dHRvbi5TaXplcy5TTUFMTH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwia3N1LWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZXMuZmV0Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0b3JhZ2Uuc2V0KFwidXBkYXRlci5sYXN0RmV0Y2hcIiwgbmV3IERhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPkNoZWNrIGZvciBVcGRhdGVzPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNob3cgd2hlbj17dXBkYXRlcy5yZXN1bHQ/Lmxlbmd0aCA+IDB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IXVwZGF0ZXMubG9hZGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e0J1dHRvbi5Db2xvcnMuWUVMTE9XfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17QnV0dG9uLlNpemVzLlNNQUxMfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwia3N1LWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2l0LmV4ZWN1dGVDbWQoXCJnaXQgcHVsbFwiLCBmcy5jdXJyZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkc1JlbG9hZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVzLmZldGNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3IoXCJVcGRhdGVyXCIsIFwiRmFpbGVkIHRvIHVwZGF0ZSFcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3IoXCJFcnJvciBvY2N1cnJlZCB3aGlsZSB1cGRhdGluZyBrZXJuZWwgc2V0dGluZ3MuIENoZWNrIHlvdXIgY29uc29sZSAoQ3RybC9DbWQgKyBTaGlmdCArIEkpIGFuZCByZXBvcnQgYW55IGVycm9ycy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlVwZGF0ZTwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2hvdz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2hvdyB3aGVuPXtuZWVkc1JlbG9hZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPXtCdXR0b24uQ29sb3JzLkdSRUVOfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17QnV0dG9uLlNpemVzLlNNQUxMfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwia3N1LWJ1dHRvbiBrc3UtcmVsb2FkLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlJlbG9hZCA8VXBkYXRlQXZhaWxhYmxlIC8+PC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TaG93PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNob3cgd2hlbj17dXBkYXRlcy5yZXN1bHQ/Lmxlbmd0aCA+IDB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtRGl2aWRlciBjbGFzc05hbWU9XCJrc3UtZGl2aWRlclwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1JdGVtIHRpdGxlPVwiUmVjZW50IENvbW1pdHNcIiB0YWc9XCJoNVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9yIGVhY2g9e3VwZGF0ZXMucmVzdWx0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoY29tbWl0LCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwia3N1LWNvbW1pdFwiIGtleT17aW5kZXh9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJrc3UtY29tbWl0LWhhc2hcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9e2BodHRwczovL2dpdGh1Yi5jb20vc3RyZW5jaGVyLWtlcm5lbC9zZXR0aW5ncy9jb21taXQvJHtjb21taXQuaGFzaH1gfT57Y29tbWl0Lmhhc2hfc2hvcnR9PC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImtzdS1jb21taXQtbmFtZVwiPntjb21taXQubWVzc2FnZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImtzdS1jb21taXQtYXV0aG9yLWxhYmVsXCI+IGJ5IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwia3N1LWNvbW1pdC1hdXRob3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwia3N1LWNvbW1pdC1hdXRob3ItYXZhdGFyXCIgc3JjPXtgaHR0cHM6Ly9naXRodWIuY29tLyR7Y29tbWl0LmF1dGhvcn0ucG5nP3NpemU9MjBgfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwia3N1LWNvbW1pdC1hdXRob3ItbmFtZVwiPntjb21taXQuYXV0aG9yfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Gb3I+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Gb3JtSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU2hvdz5cbiAgICAgICAgICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgICAgICAgIDwvU2hvdz5cbiAgICAgICAgICAgIDwvU2hvdz5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cbiIsImV4cG9ydCBuYW1lc3BhY2UgUGF0Y2hlciB7XG4gICAgY29uc3QgcGF0Y2hlcyA9IG5ldyBTZXQ8RnVuY3Rpb24+KCk7XG5cbiAgICB0eXBlIFBhdGNoZXJDYWxsYmFjayA9ICh0aGlzT2JqZWN0OiBhbnksIG1ldGhvZEFyZ3VtZW50czogSUFyZ3VtZW50cywgcmV0dXJuVmFsdWU/OiBhbnkpID0+IGFueTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBwYXRjaChtb2R1bGU6IGFueSwgZnVuYzogc3RyaW5nLCBjYWxsYmFjazogUGF0Y2hlckNhbGxiYWNrLCBiZWZvcmUgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBvcmlnaW5hbCA9IG1vZHVsZVtmdW5jXTtcbiAgICAgICAgY29uc3QgdW5wYXRjaCA9ICgpID0+IHttb2R1bGVbZnVuY10gPSBvcmlnaW5hbDt9O1xuXG4gICAgICAgIG1vZHVsZVtmdW5jXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBSZWZsZWN0LmFwcGx5KGNhbGxiYWNrLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbS2VybmVsOnBhdGNoZXJdIEVycm9yIGR1cmluZyBiZWZvcmUgcGF0Y2g6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IFJlZmxlY3QuYXBwbHkob3JpZ2luYWwsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAoYmVmb3JlKSByZXR1cm4gcmV0dXJuVmFsdWU7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcFJldCA9IFJlZmxlY3QuYXBwbHkoY2FsbGJhY2ssIHRoaXMsIFthcmd1bWVudHMsIHJldHVyblZhbHVlXSk7XG4gICAgICAgICAgICAgICAgaWYgKHRlbXBSZXQgIT0gbnVsbCkgcmV0dXJuVmFsdWUgPSB0ZW1wUmV0O1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW0tlcm5lbDpwYXRjaGVyXSBFcnJvciBkdXJpbmcgcGF0Y2g6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuYXNzaWduKG1vZHVsZVtmdW5jXSwgb3JpZ2luYWwsIHtcbiAgICAgICAgICAgIHRvU3RyaW5nKCkge3JldHVybiBvcmlnaW5hbC50b1N0cmluZygpfVxuICAgICAgICB9KTtcblxuICAgICAgICBwYXRjaGVzLmFkZCh1bnBhdGNoKTtcblxuICAgICAgICByZXR1cm4gdW5wYXRjaDtcbiAgICB9O1xuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHVucGF0Y2hBbGwoKSB7XG4gICAgICAgIGZvciAoY29uc3QgdW5wYXRjaCBvZiBwYXRjaGVzKSB1bnBhdGNoKCk7XG4gICAgfTtcbn0iLCJpbXBvcnQge1BhdGNoZXJ9IGZyb20gXCIuL3BhdGNoZXJcIjtcbmltcG9ydCBXZWJwYWNrIGZyb20gXCIuL3dlYnBhY2tcIjtcbmltcG9ydCBFdmVudHMgZnJvbSBcIi4vZXZlbnRzXCI7XG5cbmNvbnN0IHdpbiA9IHdpbmRvdyBhcyBhbnk7XG5cbmV4cG9ydCBuYW1lc3BhY2UgU2V0dGluZ3NSZW5kZXJlciB7XG4gICAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICBleHBvcnQgdHlwZSBTZWN0aW9uID0ge1xuICAgICAgICBzZWN0aW9uOiBcIkRJVklERVJcIiB8IFwiQ1VTVE9NXCIgfCBzdHJpbmc7XG4gICAgICAgIGVsZW1lbnQ/KCk6IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgICAgICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgICAgIGlkPzogc3RyaW5nO1xuICAgICAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgICAgIGljb24/OiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBzdHJpbmc7XG4gICAgICAgIGNvbG9yPzogc3RyaW5nO1xuICAgICAgICBvbkNsaWNrPzogRnVuY3Rpb247XG4gICAgICAgIG5ld0luZGljYXRvcj86IGJvb2xlYW47XG4gICAgICAgIGJhZGdlQ291bnQ/OiBudW1iZXI7XG4gICAgICAgIG9yZGVyPzogbnVtYmVyO1xuICAgIH07XG4gICAgXG4gICAgZXhwb3J0IHR5cGUgUGFuZWxPcHRpb25zID0ge1xuICAgICAgICByZW5kZXIoKTogUmVhY3QuUmVhY3RFbGVtZW50O1xuICAgICAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgICAgIG9yZGVyPzogbnVtYmVyO1xuICAgIH07XG5cbiAgICBleHBvcnQgY29uc3QgcGFuZWxzOiBTZWN0aW9uW10gPSB3aW5bXCJfX2tlcm5lbF9zZXR0aW5nc19jYWNoZV9fXCJdID8/IFtcbiAgICAgICAge3NlY3Rpb246IFwiRElWSURFUlwifSxcbiAgICAgICAge3NlY3Rpb246IFwiSEVBREVSXCIsIGxhYmVsOiBcIktlcm5lbFwiLCBpZDogXCJrZXJuZWwtc2V0dGluZ3NcIn1cbiAgICBdO1xuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWU6IHN0cmluZywgcmVuZGVyOiAoKCkgPT4gUmVhY3QuUmVhY3RFbGVtZW50KSB8IFBhbmVsT3B0aW9ucykge1xuICAgICAgICBjb25zdCBwYW5lbCA9IHtcbiAgICAgICAgICAgIHNlY3Rpb246IGBLZXJuZWwtJHtuYW1lfWAsXG4gICAgICAgICAgICBsYWJlbDogbmFtZSxcbiAgICAgICAgICAgIGlkOiBga2VybmVsLXNldHRpbmdzLSR7bmFtZX1gLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBga2VybmVsLXNldHRpbmdzYCxcbiAgICAgICAgICAgIGVsZW1lbnQ6IHR5cGVvZiByZW5kZXIgPT09IFwiZnVuY3Rpb25cIiA/IHJlbmRlciA6IHJlbmRlci5yZW5kZXIsXG4gICAgICAgICAgICAuLi4odHlwZW9mIHJlbmRlciA9PT0gXCJvYmplY3RcIiA/IHJlbmRlciA6IHt9KVxuICAgICAgICB9O1xuXG4gICAgICAgIFNldHRpbmdzUmVuZGVyZXIucGFuZWxzLnB1c2gocGFuZWwpO1xuICAgICAgICBTZXR0aW5nc1JlbmRlcmVyLnBhbmVscy5zb3J0KChhLCBiKSA9PiBhLm9yZGVyIC0gYi5vcmRlcik7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gU2V0dGluZ3NSZW5kZXJlci5wYW5lbHMuaW5kZXhPZihwYW5lbCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBTZXR0aW5nc1JlbmRlcmVyLnBhbmVscy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN0IFNldHRpbmdzVmlldyA9IGF3YWl0IFdlYnBhY2suZmluZExhenkoV2VicGFjay5GaWx0ZXJzLmJ5UHJvdG90eXBlKFwiZ2V0UHJlZGljYXRlU2VjdGlvbnNcIikpO1xuICAgIFxuICAgICAgICBpZiAoIXdpbltcIl9fa2VybmVsX3NldHRpbmdzX2NhY2hlX19cIl0pIFBhdGNoZXIucGF0Y2goU2V0dGluZ3NWaWV3LnByb3RvdHlwZSwgXCJnZXRQcmVkaWNhdGVTZWN0aW9uc1wiLCBmdW5jdGlvbiAoXywgcmVzKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzKSB8fCAhcmVzLnNvbWUoZSA9PiBlPy5zZWN0aW9uPy50b0xvd2VyQ2FzZSgpID09PSBcImNoYW5nZWxvZ1wiKSB8fCByZXMuc29tZShzID0+IHM/LmlkID09PSBcImtlcm5lbC1zZXR0aW5nc1wiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHJlcy5maW5kSW5kZXgocyA9PiBzPy5zZWN0aW9uPy50b0xvd2VyQ2FzZSgpID09PSBcImNoYW5nZWxvZ1wiKSAtIDE7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwKSByZXR1cm47XG5cbiAgICAgICAgICAgIHJlcy5zcGxpY2UoaW5kZXgsIDAsIC4uLlNldHRpbmdzUmVuZGVyZXIucGFuZWxzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgRXZlbnRzLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWxvYWQtY29yZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICB3aW5bXCJfX2tlcm5lbF9zZXR0aW5nc19jYWNoZV9fXCJdID0gcGFuZWxzO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuIiwiLy8gaW1wb3J0IEtlcm5lbFBhbmVsIGZyb20gXCIuL2NvbXBvbmVudHMvcGFuZWwuanNcIjtcbmltcG9ydCB7RGV2U2VydmVyfSBmcm9tIFwiQG1vZHVsZXMvZGV2c2VydmVyXCI7XG5pbXBvcnQgRXZlbnRzIGZyb20gXCJAbW9kdWxlcy9ldmVudHNcIjtcbmltcG9ydCB7U3RvcmFnZX0gZnJvbSBcIkBtb2R1bGVzL3N0b3JhZ2VcIjtcbmltcG9ydCBLZXJuZWxQYW5lbCBmcm9tIFwiLi9jb21wb25lbnRzL3BhbmVsXCI7XG5pbXBvcnQgVXBkYXRlclBhbmVsIGZyb20gXCIuL2NvbXBvbmVudHMvdXBkYXRlc1wiO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gXCIuL21vZHVsZXMvbG9nZ2VyXCI7XG5pbXBvcnQge1BhdGNoZXJ9IGZyb20gXCIuL21vZHVsZXMvcGF0Y2hlclwiO1xuaW1wb3J0IHtTZXR0aW5nc1JlbmRlcmVyfSBmcm9tIFwiLi9tb2R1bGVzL3NldHRpbmdzXCI7XG5pbXBvcnQgV2VicGFjayBmcm9tIFwiLi9tb2R1bGVzL3dlYnBhY2tcIjtcbi8vIGltcG9ydCBHaXQgZnJvbSBcIi4vdXBkYXRlci9naXQuanNcIjtcbi8vIGltcG9ydCBVcGRhdGVyIGZyb20gXCIuL3VwZGF0ZXIvaW5kZXguanNcIjtcblxuY29uc3QgZnMgPSBTZXR0aW5nc05hdGl2ZS5yZXF1aXJlTW9kdWxlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gU2V0dGluZ3NOYXRpdmUucmVxdWlyZU1vZHVsZShcInBhdGhcIik7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29yZSB7XG4gICAgbGV0IHN0eWxlRWxlbWVudDogRWxlbWVudCA9IG51bGw7XG5cbiAgICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IFdlYnBhY2sud2hlblJlYWR5O1xuICAgICAgICBMb2dnZXIubG9nKFwiQ29yZVwiLCBcIlN0YXJ0ZWQuXCIpO1xuXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5SZWFjdCA9IFdlYnBhY2suZmluZEJ5UHJvcHMoXCJjcmVhdGVFbGVtZW50XCIsIFwidXNlRWZmZWN0XCIpO1xuXG4gICAgICAgIGlmIChfX05PREVfRU5WX18gPT09IFwiREVWRUxPUE1FTlRcIikgRGV2U2VydmVyLmluaXRpYWxpemUoKTtcbiAgICAgICAgU2V0dGluZ3NSZW5kZXJlci5pbml0aWFsaXplKCk7XG4gICAgICAgIHJlZ2lzdGVyU2V0dGluZ3MoKTtcbiAgICAgICAgU3RvcmFnZS5pbml0aWFsaXplKCk7XG5cbiAgICAgICAgbG9hZFN0eWxlcygpO1xuICAgICAgICBleHBvc2VHbG9iYWxzKCk7XG4gICAgfTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclNldHRpbmdzKCk6IHZvaWQge1xuICAgICAgICBsZXQgZmx1c2ggPSBbXG4gICAgICAgICAgICBTZXR0aW5nc1JlbmRlcmVyLnJlZ2lzdGVyKFwiVXBkYXRlc1wiLCB7XG4gICAgICAgICAgICAgICAgcmVuZGVyOiAoKSA9PiA8VXBkYXRlclBhbmVsIC8+LFxuICAgICAgICAgICAgICAgIG9yZGVyOiAyXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFNldHRpbmdzUmVuZGVyZXIucmVnaXN0ZXIoXCJQYWNrYWdlc1wiLCB7XG4gICAgICAgICAgICAgICAgcmVuZGVyOiAoKSA9PiA8S2VybmVsUGFuZWwgLz4sXG4gICAgICAgICAgICAgICAgb3JkZXI6IDFcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF07XG5cbiAgICAgICAgRXZlbnRzLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWxvYWQtY29yZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZsdXNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZmx1c2hbaV0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBleHBvc2VHbG9iYWxzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBEaXNwYXRjaGVyID0gV2VicGFjay5maW5kQnlQcm9wcyhcIl9kaXNwYXRjaFwiLCBcImRpc3BhdGNoXCIpO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHdpbmRvdywge1xuICAgICAgICAgICAgS2VybmVsU2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShTZXR0aW5nc1JlbmRlcmVyKSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBLZXJuZWxTdG9yYWdlOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IE9iamVjdC5mcmVlemUoU3RvcmFnZSksXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIERpc3BhdGNoZXIud2FpdCgoKSA9PiBEaXNwYXRjaGVyLmRpc3BhdGNoKHt0eXBlOiBcIktFUk5FTF9TRVRUSU5HU19JTklUXCJ9KSk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGxvYWRTdHlsZXMoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gcGF0aC5yZXNvbHZlKGZzLmN1cnJlbnQsIFwic3R5bGUuY3NzXCIpO1xuICAgICAgICBpZiAoIWZzLmlzRmlsZShsb2NhdGlvbikpIHJldHVybiAvLyBUT0RPOiBCYWlsIG91dFxuICAgICAgICBcbiAgICAgICAgY29uc3QgbG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IGZzLnJlYWRGaWxlKGxvY2F0aW9uLCBcInV0ZjhcIiBhcyBhbnkpO1xuXG4gICAgICAgICAgICBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBcImtlcm5lbC1zdHlsZVwiLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogc3R5bGVzXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICAgIGxvYWQoKTtcblxuICAgICAgICBFdmVudHMuYWRkRXZlbnRMaXN0ZW5lcihcInJlbG9hZC1jc3NcIiwgKCkgPT4ge1xuICAgICAgICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgbG9hZCgpO1xuICAgICAgICAgICAgTG9nZ2VyLmxvZyhcIlN0eWxlc1wiLCBcIlJlbG9hZGVkLlwiKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzdG9wKCk6IHZvaWQge1xuICAgICAgICBQYXRjaGVyLnVucGF0Y2hBbGwoKTtcbiAgICAgICAgc3R5bGVFbGVtZW50Py5yZW1vdmUoKTtcbiAgICB9O1xufSJdLCJuYW1lcyI6WyJFdmVudHMiLCJFdmVudFRhcmdldCIsIkxvZ2dlciIsInBhcnNlVHlwZSIsInR5cGUiLCJsb2dNZXNzYWdlIiwibW9kdWxlIiwibWVzc2FnZSIsImNvbnNvbGUiLCJsb2ciLCJpbmZvIiwid2FybiIsImVycm9yIiwiZnMiLCJTZXR0aW5nc05hdGl2ZSIsInJlcXVpcmVNb2R1bGUiLCJwYXRoIiwiRGV2U2VydmVyIiwid3MiLCJleHBlY3RlZENsb3NlIiwidHJ5SlNPTiIsImpzb24iLCJKU09OIiwicGFyc2UiLCJjbG9zZSIsImluaXRpYWxpemUiLCJ3aW4iLCJ3aW5kb3ciLCJLZXJuZWxEZXZTZXJ2ZXIiLCJXZWJTb2NrZXQiLCJvbm1lc3NhZ2UiLCJoYW5kbGVNZXNzYWdlIiwib25lcnJvciIsIm9uY2xvc2UiLCJyZWxvYWRDb3JlIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiY29udGVudCIsInJlYWRGaWxlIiwicmVzb2x2ZSIsImN1cnJlbnQiLCJzY3JpcHQiLCJkb2N1bWVudCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsIk9iamVjdCIsImFzc2lnbiIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsIm9ubG9hZCIsInJlbW92ZSIsInJlbG9hZFN0eWxlcyIsInJlbG9hZCIsImRhdGEiLCJvcGVyYXRpb24iLCJzZW5kIiwiY2xpZW50IiwiRGlzY29yZE5hdGl2ZSIsImFwcCIsImdldFJlbGVhc2VDaGFubmVsIiwic3RyaW5naWZ5IiwiU3RvcmFnZSIsImxpc3RlbmVycyIsIlNldCIsImxvY2F0aW9uIiwiZ3JvdXBzIiwiTWFwIiwiZW1pdCIsImFyZ3MiLCJjYWxsYmFja3MiLCJpIiwibGVuZ3RoIiwib24iLCJsaXN0ZW5lciIsImFkZCIsIm9mZiIsImJpbmQiLCJkZWxldGUiLCJ1c2UiLCJmYWN0b3J5Iiwic3RhdGUiLCJzZXRTdGF0ZSIsIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJleGlzdHMiLCJjcmVhdGVEaXIiLCJyZWN1cnNpdmUiLCJmaWxlcyIsInJlYWREaXIiLCJmaWxlIiwic3RhdHMiLCJqb2luIiwiaXNGaWxlIiwiZW5kc1dpdGgiLCJncm91cCIsInNsaWNlIiwiaW5kZXhPZiIsInNldCIsImdldCIsImRlZiIsImlkIiwicGF0aHMiLCJzcGxpdCIsInJlZHVjZSIsImN1cnIiLCJuYW1lIiwicHJvcCIsInBvcCIsInN0b3JlZCIsIm9iamVjdCIsIkVycm9yIiwidHJlZSIsIndyaXRlRmlsZSIsIm1lbW9pemUiLCJrZXlzIiwiY2xvbmUiLCJrZXkiLCJkZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0dGVyIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJBcnJheSIsInByb3RvdHlwZSIsImF0IiwiaW5kZXgiLCJNYXRoIiwiYWJzIiwic2V0SW1tZWRpYXRlIiwiY2FsbGJhY2siLCJzZXRUaW1lb3V0IiwiRmlsdGVycyIsImJ5UHJvcHMiLCJwcm9wcyIsImV2ZXJ5IiwiYnlEaXNwbGF5TmFtZSIsImRlZmF1bHQiLCJkaXNwbGF5TmFtZSIsImJ5VHlwZVN0cmluZyIsInN0cmluZ3MiLCJ0b1N0cmluZyIsInN0ciIsImJ5Q29kZSIsImJ5UHJvdG90eXBlIiwiZmlsdGVyIiwiV2VicGFja01vZHVsZSIsImNhY2hlIiwiY2h1bmtOYW1lIiwiU3ltYm9sIiwiY29uc3RydWN0b3IiLCJ3aGVuUmVhZHkiLCJ3YWl0Rm9yR2xvYmFsIiwidGhlbiIsIlByb21pc2UiLCJvblJlYWR5IiwiRGlzcGF0Y2hlciIsIlVzZXJTdG9yZSIsImZpbmRCeVByb3BzIiwiYnVsayIsIndhaXQiLCJmb3JldmVyIiwiZ2V0Q3VycmVudFVzZXIiLCJ1bnN1YnNjcmliZSIsInN1YnNjcmliZSIsIm9yaWdpbmFsUHVzaCIsInB1c2giLCJoYW5kbGVQdXNoIiwiY2h1bmsiLCJtb2R1bGVzIiwibW9kdWxlSWQiLCJvcmlnaW5hbE1vZHVsZSIsImV4cG9ydHMiLCJhcHBseSIsIl9fb3JpZ2luYWwiLCJuZXdQdXNoIiwid3JpdGFibGUiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiZmluZExhenkiLCJmcm9tQ2FjaGUiLCJmaW5kTW9kdWxlIiwibSIsImRpcmVjdE1hdGNoIiwiZGVmYXVsdE1hdGNoIiwid2FpdEZvciIsInJldHJpZXMiLCJhbGwiLCJkZWxheSIsInJlcyIsInBhcnNlT3B0aW9ucyIsInRoaW5nIiwiaXNBcnJheSIsInJlcXVlc3QiLCJyZXEiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwid2VicGFja0NodW5rZGlzY29yZF9hcHAiLCJzcGxpY2UiLCJmb3JjZSIsImRlZmF1bHRFeHBvcnRzIiwiZm91bmQiLCJoYXNFcnJvciIsIndyYXBGaWx0ZXIiLCJjIiwiZmluZE1vZHVsZXMiLCJvcHRpb25zIiwiZmlsdGVycyIsInJlc3QiLCJzZWFyY2hGdW5jdGlvbiIsIndyYXBwZWRGaWx0ZXJzIiwibWFwIiwicmV0dXJuVmFsdWUiLCJjYWxsIiwiU3RyaW5nIiwicHJvcHNBcnJheSIsImNvbmNhdCIsImZpbmRCeURpc3BsYXlOYW1lIiwiZGlzcGxheU5hbWVzIiwiZmluZEluZGV4IiwiZm91bmRJbmRleCIsImF0SW5kZXgiLCJvbkV4aXN0cyIsIndoZW5FeGlzdHMiLCJldmVudCIsIm9uY2UiLCJXZWJwYWNrIiwiRGlzY29yZENvbXBvbmVudHMiLCJCdXR0b24iLCJTd2l0Y2giLCJNYXJrZG93biIsInJlbmRlciIsInJ1bGVzIiwiVGV4dCIsIlNpemVzIiwiU0laRV8yNCIsIkNvbG9ycyIsIkxJTksiLCJTcGlubmVyIiwiVHlwZSIsIlNQSU5OSU5HX0NJUkNMRSIsIkZsZXgiLCJMaW5rIiwiRm9ybVRpdGxlIiwiVGFncyIsIkZvcm1Ob3RpY2UiLCJUeXBlcyIsIkZvcm1EaXZpZGVyIiwiaW5jbHVkZXMiLCJGb3JtSXRlbSIsIlRvb2x0aXBzIiwiVHJhc2giLCJzdmciLCJ3aWR0aCIsImhlaWdodCIsInZpZXdCb3giLCJ4bWxucyIsImQiLCJmaWxsIiwiRm9sZGVyIiwiVmVyaWZpZWQiLCJXYXJuaW5nIiwiZW5hYmxlLWJhY2tncm91bmQiLCJnIiwiVkVSSUZJRUQiLCJXQVJOSU5HIiwiU2hpZWxkIiwiVXBkYXRlQXZhaWxhYmxlIiwiY2xhc3NOYW1lIiwiYXJpYS1oaWRkZW4iLCJmaWxsLXJ1bGUiLCJwb2x5Z29uIiwicG9pbnRzIiwiSWNvbnMiLCJJY29uIiwiSWNvbkNvbXBvbmVudCIsImV4dHJhUHJvcHMiLCJzaXplIiwia2VybmVsIiwiRWxlY3Ryb24iLCJUb29sQnV0dG9uIiwibGFiZWwiLCJpY29uIiwib25DbGljayIsImRhbmdlciIsInRleHQiLCJwb3NpdGlvbiIsImxvb2siLCJMb29rcyIsIkJMQU5LIiwiTk9ORSIsImNvbG9yIiwiU3dpdGNoV3JhcHBlciIsIm9uQ2hhbmdlIiwiZGlzYWJsZWQiLCJpc0NoZWNrZWQiLCJzZXRDaGVja2VkIiwiY2hlY2tlZCIsInVzZUNhbGxiYWNrIiwib3Blbkl0ZW0iLCJzaG93SXRlbUluRm9sZGVyIiwib3BlblBhdGgiLCJLZXJuZWxDYXJkIiwicGtnIiwiZGl2IiwidHJhc2hJdGVtIiwiZGVzY3JpcHRpb24iLCJlbmFibGVkIiwicGFja2FnZXMiLCJzdG9wUGFja2FnZSIsInN0YXJ0UGFja2FnZSIsIktlcm5lbFBhbmVsIiwidGFnIiwiSDEiLCJ2YWx1ZXMiLCJnZXRQYWNrYWdlcyIsIkRpc2NvcmRNb2R1bGVzIiwiTW9tZW50IiwibWFrZUxhenkiLCJmYWxsYmFjayIsIkxhenlDb21wb25lbnQiLCJyZXNvbHZlZCIsInBlcmlvZCIsImNvbW1pdEZpZWxkcyIsImhhc2hGaWVsZHMiLCJjaGlsZF9wcm9jZXNzIiwiR2l0IiwiZXhlY3V0ZUNtZCIsImNtZCIsImN3ZCIsInJlamVjdCIsImV4ZWMiLCJzdGRvdXQiLCJpc0luc3RhbGxlZCIsImlzUmVwbyIsInJlc3VsdCIsImdldEJyYW5jaE5hbWUiLCJnZXRMYXRlc3RDb21taXQiLCJ0YXJnZXQiLCJwYXJzZVBlcmlvZHMiLCJnZXREaWZmIiwicCIsImZpZWxkcyIsIm91dCIsImZyb21FbnRyaWVzIiwiU2hvdyIsIndoZW4iLCJjaGlsZHJlbiIsImZpbmQiLCJjaGlsZCIsIk1hdGNoIiwiRm9yIiwiZWFjaCIsInVzZUdpdENvbW1hbmQiLCJkZXBzIiwibG9hZGVkIiwiaGFuZGxlRmV0Y2giLCJjYXRjaCIsImZldGNoIiwiTG9hZGluZ1NwaW5uZXIiLCJMT1dfTU9USU9OIiwiQ3VycmVudEJyYW5jaCIsImdpdExvYWRlZCIsImJyYW5jaCIsImhyZWYiLCJDdXJyZW50Q29tbWl0SGFzaCIsImhhc2giLCJSRUQiLCJmdWxsIiwic2hvcnQiLCJuZWVkc1JlbG9hZCIsIlVwZGF0ZXJQYW5lbCIsImVycm9yTWVzc2FnZSIsInNldEVycm9yIiwiZ2l0IiwidXBkYXRlcyIsImxhc3RVcGRhdGUiLCJEYXRlIiwiV0FOREVSSU5HX0NVQkVTIiwiREFOR0VSIiwidGl0bGUiLCJpbWFnZURhdGEiLCJzcmMiLCJib2R5Iiwic3BhbiIsImRpcmVjdGlvbiIsIkRpcmVjdGlvbiIsIlZFUlRJQ0FMIiwianVzdGlmeSIsIkp1c3RpZnkiLCJCRVRXRUVOIiwiYWxpZ24iLCJBbGlnbiIsIkNFTlRFUiIsIkhPUklaT05UQUwiLCJTVEFSVCIsIkNoaWxkIiwiSEVBREVSX1BSSU1BUlkiLCJTSVpFXzE0IiwiSEVBREVSX1NFQ09OREFSWSIsImNhbGVuZGFyIiwiQlJBTkQiLCJTTUFMTCIsIllFTExPVyIsIkdSRUVOIiwiY29tbWl0IiwiaGFzaF9zaG9ydCIsImltZyIsImF1dGhvciIsIlBhdGNoZXIiLCJwYXRjaGVzIiwicGF0Y2giLCJmdW5jIiwiYmVmb3JlIiwib3JpZ2luYWwiLCJ1bnBhdGNoIiwiUmVmbGVjdCIsImFyZ3VtZW50cyIsInRlbXBSZXQiLCJ1bnBhdGNoQWxsIiwiU2V0dGluZ3NSZW5kZXJlciIsImluaXRpYWxpemVkIiwicGFuZWxzIiwic2VjdGlvbiIsInJlZ2lzdGVyIiwicGFuZWwiLCJlbGVtZW50Iiwic29ydCIsImEiLCJiIiwib3JkZXIiLCJTZXR0aW5nc1ZpZXciLCJfIiwic29tZSIsImUiLCJ0b0xvd2VyQ2FzZSIsInMiLCJhZGRFdmVudExpc3RlbmVyIiwiQ29yZSIsInN0eWxlRWxlbWVudCIsInN0YXJ0IiwiX19OT0RFX0VOVl9fIiwicmVnaXN0ZXJTZXR0aW5ncyIsImxvYWRTdHlsZXMiLCJleHBvc2VHbG9iYWxzIiwiZmx1c2giLCJkZWZpbmVQcm9wZXJ0aWVzIiwiS2VybmVsU2V0dGluZ3MiLCJmcmVlemUiLCJLZXJuZWxTdG9yYWdlIiwiZGlzcGF0Y2giLCJsb2FkIiwic3R5bGVzIiwic3RvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')}},__webpack_require__={d:(I,g)=>{for(var C in g)__webpack_require__.o(g,C)&&!__webpack_require__.o(I,C)&&Object.defineProperty(I,C,{enumerable:!0,get:g[C]})},o:(I,g)=>Object.prototype.hasOwnProperty.call(I,g)},__webpack_exports__={};__webpack_modules__[5](0,__webpack_exports__,__webpack_require__);var __webpack_exports__Core=__webpack_exports__.Q;export{__webpack_exports__Core as Core};